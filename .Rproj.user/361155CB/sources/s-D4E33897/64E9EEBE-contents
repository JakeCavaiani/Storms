
#### READ ME ####
##The purpose of this script is to plot hysteresis loops from CPCRW data prior to hysteresis analysis and, specifically, the hysteresisMetrics function.##


#### libraries ####
options(tz="America/Anchorage")
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(plyr)
library(imputeTS)
library(TSA)
library(bbmle)
library(zoo)
library(xts)
library(forecast)
library(stats)
library(lattice)
library(nlme)
library(geosphere)
library(car)
library(EcoHydRology)


####################### plot on normalized scale ####################### 
#### load data ####
C3_storm1_Q = read.csv("Stitched_data/storms/C3_storm1_Q.csv", row.names = 1) 
C3_storm1_NO3 = read.csv("Stitched_data/storms/C3_storm1_NO3.csv", row.names = 1) 
C3_storm1_SpCond = read.csv("Stitched_data/storms/C3_storm1_SpCond.csv", row.names = 1) 
C3_storm1_fDOM = read.csv("Stitched_data/storms/C3_storm1_fDOM.csv", row.names = 1) 
C3_storm1_turb = read.csv("Stitched_data/storms/C3_storm1_turb.csv", row.names = 1) 

C3_storm1a_Q = read.csv("Stitched_data/storms/C3_storm1a_Q.csv", row.names = 1) 
C3_storm1a_NO3 = read.csv("Stitched_data/storms/C3_storm1a_NO3.csv", row.names = 1) 
C3_storm1a_SpCond = read.csv("Stitched_data/storms/C3_storm1a_SpCond.csv", row.names = 1) 
C3_storm1a_fDOM = read.csv("Stitched_data/storms/C3_storm1a_fDOM.csv", row.names = 1) 
C3_storm1a_turb = read.csv("Stitched_data/storms/C3_storm1a_turb.csv", row.names = 1) 

C3_storm1b_Q = read.csv("Stitched_data/storms/C3_storm1b_Q.csv", row.names = 1) 
C3_storm1b_NO3 = read.csv("Stitched_data/storms/C3_storm1b_NO3.csv", row.names = 1) 
C3_storm1b_SpCond = read.csv("Stitched_data/storms/C3_storm1b_SpCond.csv", row.names = 1) 
C3_storm1b_fDOM = read.csv("Stitched_data/storms/C3_storm1b_fDOM.csv", row.names = 1) 
C3_storm1b_turb = read.csv("Stitched_data/storms/C3_storm1b_turb.csv", row.names = 1) 

C3_storm2_Q = read.csv("Stitched_data/storms/C3_storm2_Q.csv", row.names = 1) 
C3_storm2_NO3 = read.csv("Stitched_data/storms/C3_storm2_NO3.csv", row.names = 1) 
C3_storm2_SpCond = read.csv("Stitched_data/storms/C3_storm2_SpCond.csv", row.names = 1) 
C3_storm2_fDOM = read.csv("Stitched_data/storms/C3_storm2_fDOM.csv", row.names = 1) 
C3_storm2_turb = read.csv("Stitched_data/storms/C3_storm2_turb.csv", row.names = 1) 

C3_storm3_Q = read.csv("Stitched_data/storms/C3_storm3_Q.csv", row.names = 1) 
C3_storm3_NO3 = read.csv("Stitched_data/storms/C3_storm3_NO3.csv", row.names = 1) 
C3_storm3_SpCond = read.csv("Stitched_data/storms/C3_storm3_SpCond.csv", row.names = 1) 
C3_storm3_fDOM = read.csv("Stitched_data/storms/C3_storm3_fDOM.csv", row.names = 1) 
C3_storm3_turb = read.csv("Stitched_data/storms/C3_storm3_turb.csv", row.names = 1) 

C3_storm4_Q = read.csv("Stitched_data/storms/C3_storm4_Q.csv", row.names = 1) 
C3_storm4_NO3 = read.csv("Stitched_data/storms/C3_storm4_NO3.csv", row.names = 1) 
C3_storm4_SpCond = read.csv("Stitched_data/storms/C3_storm4_SpCond.csv", row.names = 1) 
C3_storm4_fDOM = read.csv("Stitched_data/storms/C3_storm4_fDOM.csv", row.names = 1) 
C3_storm4_turb = read.csv("Stitched_data/storms/C3_storm4_turb.csv", row.names = 1) 

C3_storm5_Q = read.csv("Stitched_data/storms/C3_storm5_Q.csv", row.names = 1) 
C3_storm5_NO3 = read.csv("Stitched_data/storms/C3_storm5_NO3.csv", row.names = 1) 
C3_storm5_SpCond = read.csv("Stitched_data/storms/C3_storm5_SpCond.csv", row.names = 1) 
C3_storm5_fDOM = read.csv("Stitched_data/storms/C3_storm5_fDOM.csv", row.names = 1) 
C3_storm5_turb = read.csv("Stitched_data/storms/C3_storm5_turb.csv", row.names = 1) 

##

P6_storm1_Q = read.csv("Stitched_data/storms/P6_storm1_Q.csv", row.names = 1) 
P6_storm1_SpCond = read.csv("Stitched_data/storms/P6_storm1_SpCond.csv", row.names = 1) 
P6_storm1_fDOM = read.csv("Stitched_data/storms/P6_storm1_fDOM.csv", row.names = 1) 
P6_storm1_turb = read.csv("Stitched_data/storms/P6_storm1_turb.csv", row.names = 1) 

P6_storm2_Q = read.csv("Stitched_data/storms/P6_storm2_Q.csv", row.names = 1) 
P6_storm2_SpCond = read.csv("Stitched_data/storms/P6_storm2_SpCond.csv", row.names = 1) 
P6_storm2_fDOM = read.csv("Stitched_data/storms/P6_storm2_fDOM.csv", row.names = 1) 
P6_storm2_turb = read.csv("Stitched_data/storms/P6_storm2_turb.csv", row.names = 1) 

P6_storm3_Q = read.csv("Stitched_data/storms/P6_storm3_Q.csv", row.names = 1) 
P6_storm3_SpCond = read.csv("Stitched_data/storms/P6_storm3_SpCond.csv", row.names = 1) 
P6_storm3_fDOM = read.csv("Stitched_data/storms/P6_storm3_fDOM.csv", row.names = 1) 
P6_storm3_turb = read.csv("Stitched_data/storms/P6_storm3_turb.csv", row.names = 1) 

P6_storm4_Q = read.csv("Stitched_data/storms/P6_storm4_Q.csv", row.names = 1) 
P6_storm4_SpCond = read.csv("Stitched_data/storms/P6_storm4_SpCond.csv", row.names = 1) 
P6_storm4_fDOM = read.csv("Stitched_data/storms/P6_storm4_fDOM.csv", row.names = 1) 
P6_storm4_turb = read.csv("Stitched_data/storms/P6_storm4_turb.csv", row.names = 1) 

##

C2_storm1_Q = read.csv("Stitched_data/storms/C2_storm1_Q.csv", row.names = 1) 
C2_storm1_NO3 = read.csv("Stitched_data/storms/C2_storm1_NO3.csv", row.names = 1) 
C2_storm1_SpCond = read.csv("Stitched_data/storms/C2_storm1_SpCond.csv", row.names = 1) 
C2_storm1_fDOM = read.csv("Stitched_data/storms/C2_storm1_fDOM.csv", row.names = 1) 
C2_storm1_turb = read.csv("Stitched_data/storms/C2_storm1_turb.csv", row.names = 1) 

C2_storm1a_Q = read.csv("Stitched_data/storms/C2_storm1a_Q.csv", row.names = 1) 
C2_storm1a_Q$datavalue[C2_storm1a_Q$datavalue == 34.6897] = 30.0095
C2_storm1a_Q$datavalue[C2_storm1a_Q$datavalue == 32.1058] = 30.5844
C2_storm1a_NO3 = read.csv("Stitched_data/storms/C2_storm1a_NO3.csv", row.names = 1) 
C2_storm1a_SpCond = read.csv("Stitched_data/storms/C2_storm1a_SpCond.csv", row.names = 1) 
C2_storm1a_fDOM = read.csv("Stitched_data/storms/C2_storm1a_fDOM.csv", row.names = 1) 
C2_storm1a_turb = read.csv("Stitched_data/storms/C2_storm1a_turb.csv", row.names = 1) 

C2_storm1b_Q = read.csv("Stitched_data/storms/C2_storm1b_Q.csv", row.names = 1) 
C2_storm1b_NO3 = read.csv("Stitched_data/storms/C2_storm1b_NO3.csv", row.names = 1) 
C2_storm1b_SpCond = read.csv("Stitched_data/storms/C2_storm1b_SpCond.csv", row.names = 1) 
C2_storm1b_fDOM = read.csv("Stitched_data/storms/C2_storm1b_fDOM.csv", row.names = 1) 
C2_storm1b_turb = read.csv("Stitched_data/storms/C2_storm1b_turb.csv", row.names = 1) 

C2_storm2_Q = read.csv("Stitched_data/storms/C2_storm2_Q.csv", row.names = 1) 
C2_storm2_NO3 = read.csv("Stitched_data/storms/C2_storm2_NO3.csv", row.names = 1) 
C2_storm2_SpCond = read.csv("Stitched_data/storms/C2_storm2_SpCond.csv", row.names = 1) 
C2_storm2_fDOM = read.csv("Stitched_data/storms/C2_storm2_fDOM.csv", row.names = 1) 
C2_storm2_turb = read.csv("Stitched_data/storms/C2_storm2_turb.csv", row.names = 1) 

C2_storm3_Q = read.csv("Stitched_data/storms/C2_storm3_Q.csv", row.names = 1) 
C2_storm3_NO3 = read.csv("Stitched_data/storms/C2_storm3_NO3.csv", row.names = 1) 
C2_storm3_SpCond = read.csv("Stitched_data/storms/C2_storm3_SpCond.csv", row.names = 1) 
C2_storm3_fDOM = read.csv("Stitched_data/storms/C2_storm3_fDOM.csv", row.names = 1) 
C2_storm3_turb = read.csv("Stitched_data/storms/C2_storm3_turb.csv", row.names = 1) 

C2_storm4_Q = read.csv("Stitched_data/storms/C2_storm4_Q.csv", row.names = 1) 
C2_storm4_NO3 = read.csv("Stitched_data/storms/C2_storm4_NO3.csv", row.names = 1) 
C2_storm4_SpCond = read.csv("Stitched_data/storms/C2_storm4_SpCond.csv", row.names = 1) 
C2_storm4_fDOM = read.csv("Stitched_data/storms/C2_storm4_fDOM.csv", row.names = 1) 
C2_storm4_turb = read.csv("Stitched_data/storms/C2_storm4_turb.csv", row.names = 1) 

C2_storm5_Q = read.csv("Stitched_data/storms/C2_storm5_Q.csv", row.names = 1) 
C2_storm5_NO3 = read.csv("Stitched_data/storms/C2_storm5_NO3.csv", row.names = 1) 
C2_storm5_SpCond = read.csv("Stitched_data/storms/C2_storm5_SpCond.csv", row.names = 1) 
C2_storm5_fDOM = read.csv("Stitched_data/storms/C2_storm5_fDOM.csv", row.names = 1) 
C2_storm5_turb = read.csv("Stitched_data/storms/C2_storm5_turb.csv", row.names = 1) 

##

C4_storm1_Q = read.csv("Stitched_data/storms/C4_storm1_Q.csv", row.names = 1) 
C4_storm1_SpCond = read.csv("Stitched_data/storms/C4_storm1_SpCond.csv", row.names = 1) 
C4_storm1_fDOM = read.csv("Stitched_data/storms/C4_storm1_fDOM.csv", row.names = 1) 
C4_storm1_turb = read.csv("Stitched_data/storms/C4_storm1_turb.csv", row.names = 1) 

C4_storm2_Q = read.csv("Stitched_data/storms/C4_storm2_Q.csv", row.names = 1) 
C4_storm2_SpCond = read.csv("Stitched_data/storms/C4_storm2_SpCond.csv", row.names = 1) 
C4_storm2_fDOM = read.csv("Stitched_data/storms/C4_storm2_fDOM.csv", row.names = 1) 
C4_storm2_turb = read.csv("Stitched_data/storms/C4_storm2_turb.csv", row.names = 1) 

C4_storm3_Q = read.csv("Stitched_data/storms/C4_storm3_Q.csv", row.names = 1) 
C4_storm3_SpCond = read.csv("Stitched_data/storms/C4_storm3_SpCond.csv", row.names = 1) 
C4_storm3_fDOM = read.csv("Stitched_data/storms/C4_storm3_fDOM.csv", row.names = 1) 
C4_storm3_turb = read.csv("Stitched_data/storms/C4_storm3_turb.csv", row.names = 1) 

C4_storm4_Q = read.csv("Stitched_data/storms/C4_storm4_Q.csv", row.names = 1) 
C4_storm4_SpCond = read.csv("Stitched_data/storms/C4_storm4_SpCond.csv", row.names = 1) 
C4_storm4_fDOM = read.csv("Stitched_data/storms/C4_storm4_fDOM.csv", row.names = 1) 
C4_storm4_turb = read.csv("Stitched_data/storms/C4_storm4_turb.csv", row.names = 1) 




#### normalize data ####

dfList <- Filter(function(x) is(x, "data.frame"), mget(ls()))

for(i in 1:length(dfList)) {
  dfList[[i]][["datavalue"]] = 
    (dfList[[i]][["datavalue"]] - min(dfList[[i]][["datavalue"]], na.rm=T)) / (max(dfList[[i]][["datavalue"]], na.rm=T) - min(dfList[[i]][["datavalue"]], na.rm=T))
}

list2env(dfList ,.GlobalEnv)

#### fxn: plot hysteresis loop ####

hyst_plot = function(dat_Q, dat_response, site, response_var, storm_num) {
  dat.p = ggplot(data = dat_Q, 
                 aes(x=(dat_Q$datavalue), 
                     y=(dat_response$datavalue), 
                     color = as.numeric(dat_Q$valuedatetime))) +
    geom_point(size=3) +
    scale_colour_gradientn(colors = rainbow(3)) +
    theme_bw() +
    theme(legend.position="none") + 
    theme(axis.text=element_text(size=12),
          axis.title=element_text(size=14,face="bold")) +
    ylab(paste(site, response_var))+
    xlab("Normalized Discharge") +
    ggtitle(paste("Storm", storm_num))
  return(dat.p)
}


#### plot C3 loops ####

C3_storm1_NO3.p = hyst_plot(C3_storm1_Q, C3_storm1_NO3, "C3", "NO3", "1")
C3_storm1a_NO3.p = hyst_plot(C3_storm1a_Q, C3_storm1a_NO3, "C3", "NO3", "1a")
C3_storm1b_NO3.p = hyst_plot(C3_storm1b_Q, C3_storm1b_NO3, "C3", "NO3", "1b")
C3_storm2_NO3.p = hyst_plot(C3_storm2_Q, C3_storm2_NO3, "C3", "NO3", "2")
C3_storm3_NO3.p = hyst_plot(C3_storm3_Q, C3_storm3_NO3, "C3", "NO3", "3")
C3_storm4_NO3.p = hyst_plot(C3_storm4_Q, C3_storm4_NO3, "C3", "NO3", "4")
C3_storm5_NO3.p = hyst_plot(C3_storm5_Q, C3_storm5_NO3, "C3", "NO3", "5")

C3_storm1_SpCond.p = hyst_plot(C3_storm1_Q, C3_storm1_SpCond, "C3", "SpCond", "1")
C3_storm1a_SpCond.p = hyst_plot(C3_storm1a_Q, C3_storm1a_SpCond, "C3", "SpCond", "1a")
C3_storm1b_SpCond.p = hyst_plot(C3_storm1b_Q, C3_storm1b_SpCond, "C3", "SpCond", "1b")
C3_storm2_SpCond.p = hyst_plot(C3_storm2_Q, C3_storm2_SpCond, "C3", "SpCond", "2")
C3_storm3_SpCond.p = hyst_plot(C3_storm3_Q, C3_storm3_SpCond, "C3", "SpCond", "3")
C3_storm4_SpCond.p = hyst_plot(C3_storm4_Q, C3_storm4_SpCond, "C3", "SpCond", "4")
C3_storm5_SpCond.p = hyst_plot(C3_storm5_Q, C3_storm5_SpCond, "C3", "SpCond", "5")

C3_storm1_fDOM.p = hyst_plot(C3_storm1_Q, C3_storm1_fDOM, "C3", "fDOM", "1")
C3_storm1a_fDOM.p = hyst_plot(C3_storm1a_Q, C3_storm1a_fDOM, "C3", "fDOM", "1a")
C3_storm1b_fDOM.p = hyst_plot(C3_storm1b_Q, C3_storm1b_fDOM, "C3", "fDOM", "1b")
C3_storm2_fDOM.p = hyst_plot(C3_storm2_Q, C3_storm2_fDOM, "C3", "fDOM", "2")
C3_storm3_fDOM.p = hyst_plot(C3_storm3_Q, C3_storm3_fDOM, "C3", "fDOM", "3")
C3_storm4_fDOM.p = hyst_plot(C3_storm4_Q, C3_storm4_fDOM, "C3", "fDOM", "4")
C3_storm5_fDOM.p = hyst_plot(C3_storm5_Q, C3_storm5_fDOM, "C3", "fDOM", "5")

C3_storm1_turb.p = hyst_plot(C3_storm1_Q, C3_storm1_turb, "C3", "Turbidity", "1")
C3_storm1a_turb.p = hyst_plot(C3_storm1a_Q, C3_storm1a_turb, "C3", "Turbidity", "1a")
C3_storm1b_turb.p = hyst_plot(C3_storm1b_Q, C3_storm1b_turb, "C3", "Turbidity", "1b")
C3_storm2_turb.p = hyst_plot(C3_storm2_Q, C3_storm2_turb, "C3", "Turbidity", "2")
C3_storm3_turb.p = hyst_plot(C3_storm3_Q, C3_storm3_turb, "C3", "Turbidity", "3")
C3_storm4_turb.p = hyst_plot(C3_storm4_Q, C3_storm4_turb, "C3", "Turbidity", "4")
C3_storm5_turb.p = hyst_plot(C3_storm5_Q, C3_storm5_turb, "C3", "Turbidity", "5")

#### Multiplots of C3 storms ####

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

multiplot(C3_storm1_NO3.p, C3_storm1_fDOM.p, C3_storm1_SpCond.p, C3_storm1_turb.p,
          C3_storm1a_NO3.p, C3_storm1a_fDOM.p, C3_storm1a_SpCond.p, C3_storm1a_turb.p,
          C3_storm1b_NO3.p, C3_storm1b_fDOM.p, C3_storm1b_SpCond.p, C3_storm1b_turb.p,
          C3_storm2_NO3.p, C3_storm2_fDOM.p, C3_storm2_SpCond.p, C3_storm2_turb.p,
          C3_storm3_NO3.p, C3_storm3_fDOM.p, C3_storm3_SpCond.p, C3_storm3_turb.p,
          C3_storm4_NO3.p, C3_storm4_fDOM.p, C3_storm4_SpCond.p, C3_storm4_turb.p, 
          C3_storm5_NO3.p, C3_storm5_fDOM.p, C3_storm5_SpCond.p, C3_storm5_turb.p, cols=7)

# export pdf 20 x 30




#### plot P6 loops ####

P6_storm1_SpCond.p = hyst_plot(P6_storm1_Q, P6_storm1_SpCond, "P6", "SpCond", "1")
P6_storm2_SpCond.p = hyst_plot(P6_storm2_Q, P6_storm2_SpCond, "P6", "SpCond", "2")
P6_storm3_SpCond.p = hyst_plot(P6_storm3_Q, P6_storm3_SpCond, "P6", "SpCond", "3")
P6_storm4_SpCond.p = hyst_plot(P6_storm4_Q, P6_storm4_SpCond, "P6", "SpCond", "4")

P6_storm1_fDOM.p = hyst_plot(P6_storm1_Q, P6_storm1_fDOM, "P6", "fDOM", "1")
P6_storm2_fDOM.p = hyst_plot(P6_storm2_Q, P6_storm2_fDOM, "P6", "fDOM", "2")
P6_storm3_fDOM.p = hyst_plot(P6_storm3_Q, P6_storm3_fDOM, "P6", "fDOM", "3")
P6_storm4_fDOM.p = hyst_plot(P6_storm4_Q, P6_storm4_fDOM, "P6", "fDOM", "4")

P6_storm1_turb.p = hyst_plot(P6_storm1_Q, P6_storm1_turb, "P6", "Turbidity", "1")
P6_storm2_turb.p = hyst_plot(P6_storm2_Q, P6_storm2_turb, "P6", "Turbidity", "2")
P6_storm3_turb.p = hyst_plot(P6_storm3_Q, P6_storm3_turb, "P6", "Turbidity", "3")
P6_storm4_turb.p = hyst_plot(P6_storm4_Q, P6_storm4_turb, "P6", "Turbidity", "4")


#### Multiplots of P6 storms ####

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

multiplot(P6_storm1_fDOM.p, P6_storm1_SpCond.p, P6_storm1_turb.p,
          P6_storm2_fDOM.p, P6_storm2_SpCond.p, P6_storm2_turb.p,
          P6_storm3_fDOM.p, P6_storm3_SpCond.p, P6_storm3_turb.p, 
          P6_storm4_fDOM.p, P6_storm4_SpCond.p, P6_storm4_turb.p, cols=4)
# export pdf 15 x 20




#### plot C2 loops ####

C2_storm1_NO3.p = hyst_plot(C2_storm1_Q, C2_storm1_NO3, "C2", "NO3", "1")
C2_storm1a_NO3.p = hyst_plot(C2_storm1a_Q, C2_storm1a_NO3, "C2", "NO3", "1a")
C2_storm1b_NO3.p = hyst_plot(C2_storm1b_Q, C2_storm1b_NO3, "C2", "NO3", "1b")
C2_storm2_NO3.p = hyst_plot(C2_storm2_Q, C2_storm2_NO3, "C2", "NO3", "2")
C2_storm3_NO3.p = hyst_plot(C2_storm3_Q, C2_storm3_NO3, "C2", "NO3", "3")
C2_storm4_NO3.p = hyst_plot(C2_storm4_Q, C2_storm4_NO3, "C2", "NO3", "4")
C2_storm5_NO3.p = hyst_plot(C2_storm5_Q, C2_storm5_NO3, "C2", "NO3", "5")



C2_storm1_SpCond.p = hyst_plot(C2_storm1_Q, C2_storm1_SpCond, "C2", "SpCond", "1")
C2_storm1a_SpCond.p = hyst_plot(C2_storm1a_Q, C2_storm1a_SpCond, "C2", "SpCond", "1a")
C2_storm1b_SpCond.p = hyst_plot(C2_storm1b_Q, C2_storm1b_SpCond, "C2", "SpCond", "1b")
C2_storm2_SpCond.p = hyst_plot(C2_storm2_Q, C2_storm2_SpCond, "C2", "SpCond", "2")
C2_storm3_SpCond.p = hyst_plot(C2_storm3_Q, C2_storm3_SpCond, "C2", "SpCond", "3")
C2_storm4_SpCond.p = hyst_plot(C2_storm4_Q, C2_storm4_SpCond, "C2", "SpCond", "4")
C2_storm5_SpCond.p = hyst_plot(C2_storm5_Q, C2_storm5_SpCond, "C2", "SpCond", "5")

C2_storm1_fDOM.p = hyst_plot(C2_storm1_Q, C2_storm1_fDOM, "C2", "fDOM", "1")
C2_storm1a_fDOM.p = hyst_plot(C2_storm1a_Q, C2_storm1a_fDOM, "C2", "fDOM", "1a")
C2_storm1b_fDOM.p = hyst_plot(C2_storm1b_Q, C2_storm1b_fDOM, "C2", "fDOM", "1b")
C2_storm2_fDOM.p = hyst_plot(C2_storm2_Q, C2_storm2_fDOM, "C2", "fDOM", "2")
C2_storm3_fDOM.p = hyst_plot(C2_storm3_Q, C2_storm3_fDOM, "C2", "fDOM", "3")
C2_storm4_fDOM.p = hyst_plot(C2_storm4_Q, C2_storm4_fDOM, "C2", "fDOM", "4")
C2_storm5_fDOM.p = hyst_plot(C2_storm5_Q, C2_storm5_fDOM, "C2", "fDOM", "5")

C2_storm1_turb.p = hyst_plot(C2_storm1_Q, C2_storm1_turb, "C2", "Turbidity", "1")
C2_storm1a_turb.p = hyst_plot(C2_storm1a_Q, C2_storm1a_turb, "C2", "Turbidity", "1a")
C2_storm1b_turb.p = hyst_plot(C2_storm1b_Q, C2_storm1b_turb, "C2", "Turbidity", "1b")
C2_storm2_turb.p = hyst_plot(C2_storm2_Q, C2_storm2_turb, "C2", "Turbidity", "2")
C2_storm3_turb.p = hyst_plot(C2_storm3_Q, C2_storm3_turb, "C2", "Turbidity", "3")
C2_storm4_turb.p = hyst_plot(C2_storm4_Q, C2_storm4_turb, "C2", "Turbidity", "4")
C2_storm5_turb.p = hyst_plot(C2_storm5_Q, C2_storm5_turb, "C2", "Turbidity", "5")

#### Multiplots of C2 storms ####

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

multiplot(C2_storm1_NO3.p, C2_storm1_fDOM.p, C2_storm1_SpCond.p, C2_storm1_turb.p,
          C2_storm1a_NO3.p, C2_storm1a_fDOM.p, C2_storm1a_SpCond.p, C2_storm1a_turb.p,
          C2_storm1b_NO3.p, C2_storm1b_fDOM.p, C2_storm1b_SpCond.p, C2_storm1b_turb.p,
          C2_storm2_NO3.p, C2_storm2_fDOM.p, C2_storm2_SpCond.p, C2_storm2_turb.p,
          C2_storm3_NO3.p, C2_storm3_fDOM.p, C2_storm3_SpCond.p, C2_storm3_turb.p,
          C2_storm4_NO3.p, C2_storm4_fDOM.p, C2_storm4_SpCond.p, C2_storm4_turb.p, 
          C2_storm5_NO3.p, C2_storm5_fDOM.p, C2_storm5_SpCond.p, C2_storm5_turb.p, cols=7)

# export pdf 20 x 30




#### plot C4 loops ####

C4_storm1_SpCond.p = hyst_plot(C4_storm1_Q, C4_storm1_SpCond, "C4", "SpCond", "1")
C4_storm2_SpCond.p = hyst_plot(C4_storm2_Q, C4_storm2_SpCond, "C4", "SpCond", "2")
C4_storm3_SpCond.p = hyst_plot(C4_storm3_Q, C4_storm3_SpCond, "C4", "SpCond", "3")
C4_storm4_SpCond.p = hyst_plot(C4_storm4_Q, C4_storm4_SpCond, "C4", "SpCond", "4")

C4_storm1_fDOM.p = hyst_plot(C4_storm1_Q, C4_storm1_fDOM, "C4", "fDOM", "1")
C4_storm2_fDOM.p = hyst_plot(C4_storm2_Q, C4_storm2_fDOM, "C4", "fDOM", "2")
C4_storm3_fDOM.p = hyst_plot(C4_storm3_Q, C4_storm3_fDOM, "C4", "fDOM", "3")
C4_storm4_fDOM.p = hyst_plot(C4_storm4_Q, C4_storm4_fDOM, "C4", "fDOM", "4")

C4_storm1_turb.p = hyst_plot(C4_storm1_Q, C4_storm1_turb, "C4", "Turbidity", "1")
C4_storm2_turb.p = hyst_plot(C4_storm2_Q, C4_storm2_turb, "C4", "Turbidity", "2")
C4_storm3_turb.p = hyst_plot(C4_storm3_Q, C4_storm3_turb, "C4", "Turbidity", "3")
C4_storm4_turb.p = hyst_plot(C4_storm4_Q, C4_storm4_turb, "C4", "Turbidity", "4")


#### Multiplots of C4 storms ####

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

multiplot(C4_storm1_fDOM.p, C4_storm1_SpCond.p, C4_storm1_turb.p,
          C4_storm2_fDOM.p, C4_storm2_SpCond.p, C4_storm2_turb.p,
          C4_storm3_fDOM.p, C4_storm3_SpCond.p, C4_storm3_turb.p, 
          C4_storm4_fDOM.p, C4_storm4_SpCond.p, C4_storm4_turb.p, cols=4)
# export pdf 15 x 20





#### C2 and C3 example nitrate storms ####

C2_storm1a_Q_NO3 = left_join(C2_storm1a_Q, C2_storm1a_NO3, by="valuedatetime")
names(C2_storm1a_Q_NO3) = c("valuedatetime", "Q", "NO3")
C2_storm1a_Q_NO3$site.ID = "C2"

C3_storm3_Q_NO3 = left_join(C3_storm3_Q, C3_storm3_NO3, by="valuedatetime")
names(C3_storm3_Q_NO3) = c("valuedatetime", "Q", "NO3")
C3_storm3_Q_NO3$site.ID = "C3"

ex.storms = rbind(C2_storm1a_Q_NO3, C3_storm3_Q_NO3)

ex.storms$timestep = c(seq(1:(table(ex.storms$site.ID)[1])), seq(1:table(ex.storms$site.ID)[2]))
ex.storms$timestepLOG = log(ex.storms$timestep)

ggplot(data = ex.storms,
       aes(x=(ex.storms$Q), 
           y=(ex.storms$NO3),
           color = ex.storms$timestepLOG)) +
  geom_point(size=3) +
  facet_wrap("site.ID") +
  scale_colour_gradientn(colours = rainbow(20), name="") +
  theme_bw() +
  #theme(legend.position="none") + 
  theme(axis.text=element_text(size=12),
        axis.title=element_text(size=14,face="bold")) +
  ylab("Normalized Nitrate conc.")+
  xlab("Normalized Discharge") +
  ggtitle("")

####################### plot on log scale ####################### 
#### load data ####
C3_storm1_Q = read.csv("Stitched_data/storms/C3_storm1_Q.csv", row.names = 1) 
C3_storm1_NO3 = read.csv("Stitched_data/storms/C3_storm1_NO3.csv", row.names = 1) 
C3_storm1_SpCond = read.csv("Stitched_data/storms/C3_storm1_SpCond.csv", row.names = 1) 
C3_storm1_fDOM = read.csv("Stitched_data/storms/C3_storm1_fDOM.csv", row.names = 1) 
C3_storm1_turb = read.csv("Stitched_data/storms/C3_storm1_turb.csv", row.names = 1) 

C3_storm1a_Q = read.csv("Stitched_data/storms/C3_storm1a_Q.csv", row.names = 1) 
C3_storm1a_NO3 = read.csv("Stitched_data/storms/C3_storm1a_NO3.csv", row.names = 1) 
C3_storm1a_SpCond = read.csv("Stitched_data/storms/C3_storm1a_SpCond.csv", row.names = 1) 
C3_storm1a_fDOM = read.csv("Stitched_data/storms/C3_storm1a_fDOM.csv", row.names = 1) 
C3_storm1a_turb = read.csv("Stitched_data/storms/C3_storm1a_turb.csv", row.names = 1) 

C3_storm1b_Q = read.csv("Stitched_data/storms/C3_storm1b_Q.csv", row.names = 1) 
C3_storm1b_NO3 = read.csv("Stitched_data/storms/C3_storm1b_NO3.csv", row.names = 1) 
C3_storm1b_SpCond = read.csv("Stitched_data/storms/C3_storm1b_SpCond.csv", row.names = 1) 
C3_storm1b_fDOM = read.csv("Stitched_data/storms/C3_storm1b_fDOM.csv", row.names = 1) 
C3_storm1b_turb = read.csv("Stitched_data/storms/C3_storm1b_turb.csv", row.names = 1) 

C3_storm2_Q = read.csv("Stitched_data/storms/C3_storm2_Q.csv", row.names = 1) 
C3_storm2_NO3 = read.csv("Stitched_data/storms/C3_storm2_NO3.csv", row.names = 1) 
C3_storm2_SpCond = read.csv("Stitched_data/storms/C3_storm2_SpCond.csv", row.names = 1) 
C3_storm2_fDOM = read.csv("Stitched_data/storms/C3_storm2_fDOM.csv", row.names = 1) 
C3_storm2_turb = read.csv("Stitched_data/storms/C3_storm2_turb.csv", row.names = 1) 

C3_storm3_Q = read.csv("Stitched_data/storms/C3_storm3_Q.csv", row.names = 1) 
C3_storm3_NO3 = read.csv("Stitched_data/storms/C3_storm3_NO3.csv", row.names = 1) 
C3_storm3_SpCond = read.csv("Stitched_data/storms/C3_storm3_SpCond.csv", row.names = 1) 
C3_storm3_fDOM = read.csv("Stitched_data/storms/C3_storm3_fDOM.csv", row.names = 1) 
C3_storm3_turb = read.csv("Stitched_data/storms/C3_storm3_turb.csv", row.names = 1) 

C3_storm4_Q = read.csv("Stitched_data/storms/C3_storm4_Q.csv", row.names = 1) 
C3_storm4_NO3 = read.csv("Stitched_data/storms/C3_storm4_NO3.csv", row.names = 1) 
C3_storm4_SpCond = read.csv("Stitched_data/storms/C3_storm4_SpCond.csv", row.names = 1) 
C3_storm4_fDOM = read.csv("Stitched_data/storms/C3_storm4_fDOM.csv", row.names = 1) 
C3_storm4_turb = read.csv("Stitched_data/storms/C3_storm4_turb.csv", row.names = 1) 

C3_storm5_Q = read.csv("Stitched_data/storms/C3_storm5_Q.csv", row.names = 1) 
C3_storm5_NO3 = read.csv("Stitched_data/storms/C3_storm5_NO3.csv", row.names = 1) 
C3_storm5_SpCond = read.csv("Stitched_data/storms/C3_storm5_SpCond.csv", row.names = 1) 
C3_storm5_fDOM = read.csv("Stitched_data/storms/C3_storm5_fDOM.csv", row.names = 1) 
C3_storm5_turb = read.csv("Stitched_data/storms/C3_storm5_turb.csv", row.names = 1) 

##

P6_storm1_Q = read.csv("Stitched_data/storms/P6_storm1_Q.csv", row.names = 1) 
P6_storm1_SpCond = read.csv("Stitched_data/storms/P6_storm1_SpCond.csv", row.names = 1) 
P6_storm1_fDOM = read.csv("Stitched_data/storms/P6_storm1_fDOM.csv", row.names = 1) 
P6_storm1_turb = read.csv("Stitched_data/storms/P6_storm1_turb.csv", row.names = 1) 

P6_storm2_Q = read.csv("Stitched_data/storms/P6_storm2_Q.csv", row.names = 1) 
P6_storm2_SpCond = read.csv("Stitched_data/storms/P6_storm2_SpCond.csv", row.names = 1) 
P6_storm2_fDOM = read.csv("Stitched_data/storms/P6_storm2_fDOM.csv", row.names = 1) 
P6_storm2_turb = read.csv("Stitched_data/storms/P6_storm2_turb.csv", row.names = 1) 

P6_storm3_Q = read.csv("Stitched_data/storms/P6_storm3_Q.csv", row.names = 1) 
P6_storm3_SpCond = read.csv("Stitched_data/storms/P6_storm3_SpCond.csv", row.names = 1) 
P6_storm3_fDOM = read.csv("Stitched_data/storms/P6_storm3_fDOM.csv", row.names = 1) 
P6_storm3_turb = read.csv("Stitched_data/storms/P6_storm3_turb.csv", row.names = 1) 

P6_storm4_Q = read.csv("Stitched_data/storms/P6_storm4_Q.csv", row.names = 1) 
P6_storm4_SpCond = read.csv("Stitched_data/storms/P6_storm4_SpCond.csv", row.names = 1) 
P6_storm4_fDOM = read.csv("Stitched_data/storms/P6_storm4_fDOM.csv", row.names = 1) 
P6_storm4_turb = read.csv("Stitched_data/storms/P6_storm4_turb.csv", row.names = 1) 

##

C2_storm1_Q = read.csv("Stitched_data/storms/C2_storm1_Q.csv", row.names = 1) 
C2_storm1_NO3 = read.csv("Stitched_data/storms/C2_storm1_NO3.csv", row.names = 1) 
C2_storm1_SpCond = read.csv("Stitched_data/storms/C2_storm1_SpCond.csv", row.names = 1) 
C2_storm1_fDOM = read.csv("Stitched_data/storms/C2_storm1_fDOM.csv", row.names = 1) 
C2_storm1_turb = read.csv("Stitched_data/storms/C2_storm1_turb.csv", row.names = 1) 

C2_storm1a_Q = read.csv("Stitched_data/storms/C2_storm1a_Q.csv", row.names = 1) 
C2_storm1a_NO3 = read.csv("Stitched_data/storms/C2_storm1a_NO3.csv", row.names = 1) 
C2_storm1a_SpCond = read.csv("Stitched_data/storms/C2_storm1a_SpCond.csv", row.names = 1) 
C2_storm1a_fDOM = read.csv("Stitched_data/storms/C2_storm1a_fDOM.csv", row.names = 1) 
C2_storm1a_turb = read.csv("Stitched_data/storms/C2_storm1a_turb.csv", row.names = 1) 

C2_storm1b_Q = read.csv("Stitched_data/storms/C2_storm1b_Q.csv", row.names = 1) 
C2_storm1b_NO3 = read.csv("Stitched_data/storms/C2_storm1b_NO3.csv", row.names = 1) 
C2_storm1b_SpCond = read.csv("Stitched_data/storms/C2_storm1b_SpCond.csv", row.names = 1) 
C2_storm1b_fDOM = read.csv("Stitched_data/storms/C2_storm1b_fDOM.csv", row.names = 1) 
C2_storm1b_turb = read.csv("Stitched_data/storms/C2_storm1b_turb.csv", row.names = 1) 

C2_storm2_Q = read.csv("Stitched_data/storms/C2_storm2_Q.csv", row.names = 1) 
C2_storm2_NO3 = read.csv("Stitched_data/storms/C2_storm2_NO3.csv", row.names = 1) 
C2_storm2_SpCond = read.csv("Stitched_data/storms/C2_storm2_SpCond.csv", row.names = 1) 
C2_storm2_fDOM = read.csv("Stitched_data/storms/C2_storm2_fDOM.csv", row.names = 1) 
C2_storm2_turb = read.csv("Stitched_data/storms/C2_storm2_turb.csv", row.names = 1) 

C2_storm3_Q = read.csv("Stitched_data/storms/C2_storm3_Q.csv", row.names = 1) 
C2_storm3_NO3 = read.csv("Stitched_data/storms/C2_storm3_NO3.csv", row.names = 1) 
C2_storm3_SpCond = read.csv("Stitched_data/storms/C2_storm3_SpCond.csv", row.names = 1) 
C2_storm3_fDOM = read.csv("Stitched_data/storms/C2_storm3_fDOM.csv", row.names = 1) 
C2_storm3_turb = read.csv("Stitched_data/storms/C2_storm3_turb.csv", row.names = 1) 

C2_storm4_Q = read.csv("Stitched_data/storms/C2_storm4_Q.csv", row.names = 1) 
C2_storm4_NO3 = read.csv("Stitched_data/storms/C2_storm4_NO3.csv", row.names = 1) 
C2_storm4_SpCond = read.csv("Stitched_data/storms/C2_storm4_SpCond.csv", row.names = 1) 
C2_storm4_fDOM = read.csv("Stitched_data/storms/C2_storm4_fDOM.csv", row.names = 1) 
C2_storm4_turb = read.csv("Stitched_data/storms/C2_storm4_turb.csv", row.names = 1) 

C2_storm5_Q = read.csv("Stitched_data/storms/C2_storm5_Q.csv", row.names = 1) 
C2_storm5_NO3 = read.csv("Stitched_data/storms/C2_storm5_NO3.csv", row.names = 1) 
C2_storm5_SpCond = read.csv("Stitched_data/storms/C2_storm5_SpCond.csv", row.names = 1) 
C2_storm5_fDOM = read.csv("Stitched_data/storms/C2_storm5_fDOM.csv", row.names = 1) 
C2_storm5_turb = read.csv("Stitched_data/storms/C2_storm5_turb.csv", row.names = 1) 

##

C4_storm1_Q = read.csv("Stitched_data/storms/C4_storm1_Q.csv", row.names = 1) 
C4_storm1_SpCond = read.csv("Stitched_data/storms/C4_storm1_SpCond.csv", row.names = 1) 
C4_storm1_fDOM = read.csv("Stitched_data/storms/C4_storm1_fDOM.csv", row.names = 1) 
C4_storm1_turb = read.csv("Stitched_data/storms/C4_storm1_turb.csv", row.names = 1) 

C4_storm2_Q = read.csv("Stitched_data/storms/C4_storm2_Q.csv", row.names = 1) 
C4_storm2_SpCond = read.csv("Stitched_data/storms/C4_storm2_SpCond.csv", row.names = 1) 
C4_storm2_fDOM = read.csv("Stitched_data/storms/C4_storm2_fDOM.csv", row.names = 1) 
C4_storm2_turb = read.csv("Stitched_data/storms/C4_storm2_turb.csv", row.names = 1) 

C4_storm3_Q = read.csv("Stitched_data/storms/C4_storm3_Q.csv", row.names = 1) 
C4_storm3_SpCond = read.csv("Stitched_data/storms/C4_storm3_SpCond.csv", row.names = 1) 
C4_storm3_fDOM = read.csv("Stitched_data/storms/C4_storm3_fDOM.csv", row.names = 1) 
C4_storm3_turb = read.csv("Stitched_data/storms/C4_storm3_turb.csv", row.names = 1) 

C4_storm4_Q = read.csv("Stitched_data/storms/C4_storm4_Q.csv", row.names = 1) 
C4_storm4_SpCond = read.csv("Stitched_data/storms/C4_storm4_SpCond.csv", row.names = 1) 
C4_storm4_fDOM = read.csv("Stitched_data/storms/C4_storm4_fDOM.csv", row.names = 1) 
C4_storm4_turb = read.csv("Stitched_data/storms/C4_storm4_turb.csv", row.names = 1) 




#### fxn: plot hysteresis loop ####

hyst_plot = function(dat_Q, dat_response, site, response_var, storm_num) {
  dat.p = ggplot(data = dat_Q, 
                 aes(x=(dat_Q$datavalue), 
                     y=(dat_response$datavalue), 
                     color = as.numeric(dat_Q$valuedatetime))) +
    geom_point() +
    scale_colour_gradientn(colors = rainbow(3)) +
    theme_bw() +
    theme(legend.position="none") + 
    theme(axis.text=element_text(size=12),
          axis.title=element_text(size=14,face="bold")) +
    ylab(paste(site, response_var, "(Log scale)"))+
    xlab("Discharge (L/sec) (Log scale)") +
    ggtitle(paste("Storm", storm_num)) +
    coord_trans(x = 'log10', y = 'log10')
  return(dat.p)
}


#### plot C3 loops ####

C3_storm1_NO3.p = hyst_plot(C3_storm1_Q, C3_storm1_NO3, "C3", "NO3", "1")
C3_storm1a_NO3.p = hyst_plot(C3_storm1a_Q, C3_storm1a_NO3, "C3", "NO3", "1a")
C3_storm1b_NO3.p = hyst_plot(C3_storm1b_Q, C3_storm1b_NO3, "C3", "NO3", "1b")
C3_storm2_NO3.p = hyst_plot(C3_storm2_Q, C3_storm2_NO3, "C3", "NO3", "2")
C3_storm3_NO3.p = hyst_plot(C3_storm3_Q, C3_storm3_NO3, "C3", "NO3", "3")
C3_storm4_NO3.p = hyst_plot(C3_storm4_Q, C3_storm4_NO3, "C3", "NO3", "4")
C3_storm5_NO3.p = hyst_plot(C3_storm5_Q, C3_storm5_NO3, "C3", "NO3", "5")

C3_storm1_SpCond.p = hyst_plot(C3_storm1_Q, C3_storm1_SpCond, "C3", "SpCond", "1")
C3_storm1a_SpCond.p = hyst_plot(C3_storm1a_Q, C3_storm1a_SpCond, "C3", "SpCond", "1a")
C3_storm1b_SpCond.p = hyst_plot(C3_storm1b_Q, C3_storm1b_SpCond, "C3", "SpCond", "1b")
C3_storm2_SpCond.p = hyst_plot(C3_storm2_Q, C3_storm2_SpCond, "C3", "SpCond", "2")
C3_storm3_SpCond.p = hyst_plot(C3_storm3_Q, C3_storm3_SpCond, "C3", "SpCond", "3")
C3_storm4_SpCond.p = hyst_plot(C3_storm4_Q, C3_storm4_SpCond, "C3", "SpCond", "4")
C3_storm5_SpCond.p = hyst_plot(C3_storm5_Q, C3_storm5_SpCond, "C3", "SpCond", "5")

C3_storm1_fDOM.p = hyst_plot(C3_storm1_Q, C3_storm1_fDOM, "C3", "fDOM", "1")
C3_storm1a_fDOM.p = hyst_plot(C3_storm1a_Q, C3_storm1a_fDOM, "C3", "fDOM", "1a")
C3_storm1b_fDOM.p = hyst_plot(C3_storm1b_Q, C3_storm1b_fDOM, "C3", "fDOM", "1b")
C3_storm2_fDOM.p = hyst_plot(C3_storm2_Q, C3_storm2_fDOM, "C3", "fDOM", "2")
C3_storm3_fDOM.p = hyst_plot(C3_storm3_Q, C3_storm3_fDOM, "C3", "fDOM", "3")
C3_storm4_fDOM.p = hyst_plot(C3_storm4_Q, C3_storm4_fDOM, "C3", "fDOM", "4")
C3_storm5_fDOM.p = hyst_plot(C3_storm5_Q, C3_storm5_fDOM, "C3", "fDOM", "5")

C3_storm1_turb.p = hyst_plot(C3_storm1_Q, C3_storm1_turb, "C3", "Turbidity", "1")
C3_storm1a_turb.p = hyst_plot(C3_storm1a_Q, C3_storm1a_turb, "C3", "Turbidity", "1a")
C3_storm1b_turb.p = hyst_plot(C3_storm1b_Q, C3_storm1b_turb, "C3", "Turbidity", "1b")
C3_storm2_turb.p = hyst_plot(C3_storm2_Q, C3_storm2_turb, "C3", "Turbidity", "2")
C3_storm3_turb.p = hyst_plot(C3_storm3_Q, C3_storm3_turb, "C3", "Turbidity", "3")
C3_storm4_turb.p = hyst_plot(C3_storm4_Q, C3_storm4_turb, "C3", "Turbidity", "4")
C3_storm5_turb.p = hyst_plot(C3_storm5_Q, C3_storm5_turb, "C3", "Turbidity", "5")

#### Multiplots of C3 storms ####

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

multiplot(C3_storm1_NO3.p, C3_storm1_fDOM.p, C3_storm1_SpCond.p, C3_storm1_turb.p,
          C3_storm1a_NO3.p, C3_storm1a_fDOM.p, C3_storm1a_SpCond.p, C3_storm1a_turb.p,
          C3_storm1b_NO3.p, C3_storm1b_fDOM.p, C3_storm1b_SpCond.p, C3_storm1b_turb.p,
          C3_storm2_NO3.p, C3_storm2_fDOM.p, C3_storm2_SpCond.p, C3_storm2_turb.p,
          C3_storm3_NO3.p, C3_storm3_fDOM.p, C3_storm3_SpCond.p, C3_storm3_turb.p,
          C3_storm4_NO3.p, C3_storm4_fDOM.p, C3_storm4_SpCond.p, C3_storm4_turb.p, 
          C3_storm5_NO3.p, C3_storm5_fDOM.p, C3_storm5_SpCond.p, C3_storm5_turb.p, cols=7)
# export pdf 20 x 30




#### plot P6 loops ####

P6_storm1_SpCond.p = hyst_plot(P6_storm1_Q, P6_storm1_SpCond, "P6", "SpCond", "1")
P6_storm2_SpCond.p = hyst_plot(P6_storm2_Q, P6_storm2_SpCond, "P6", "SpCond", "2")
P6_storm3_SpCond.p = hyst_plot(P6_storm3_Q, P6_storm3_SpCond, "P6", "SpCond", "3")
P6_storm4_SpCond.p = hyst_plot(P6_storm4_Q, P6_storm4_SpCond, "P6", "SpCond", "4")

P6_storm1_fDOM.p = hyst_plot(P6_storm1_Q, P6_storm1_fDOM, "P6", "fDOM", "1")
P6_storm2_fDOM.p = hyst_plot(P6_storm2_Q, P6_storm2_fDOM, "P6", "fDOM", "2")
P6_storm3_fDOM.p = hyst_plot(P6_storm3_Q, P6_storm3_fDOM, "P6", "fDOM", "3")
P6_storm4_fDOM.p = hyst_plot(P6_storm4_Q, P6_storm4_fDOM, "P6", "fDOM", "4")

P6_storm1_turb.p = hyst_plot(P6_storm1_Q, P6_storm1_turb, "P6", "Turbidity", "1")
P6_storm2_turb.p = hyst_plot(P6_storm2_Q, P6_storm2_turb, "P6", "Turbidity", "2")
P6_storm3_turb.p = hyst_plot(P6_storm3_Q, P6_storm3_turb, "P6", "Turbidity", "3")
P6_storm4_turb.p = hyst_plot(P6_storm4_Q, P6_storm4_turb, "P6", "Turbidity", "4")


#### Multiplots of P6 storms ####

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

multiplot(P6_storm1_fDOM.p, P6_storm1_SpCond.p, P6_storm1_turb.p,
          P6_storm2_fDOM.p, P6_storm2_SpCond.p, P6_storm2_turb.p,
          P6_storm3_fDOM.p, P6_storm3_SpCond.p, P6_storm3_turb.p, 
          P6_storm4_fDOM.p, P6_storm4_SpCond.p, P6_storm4_turb.p, cols=4)
# export pdf 15 x 20





#### plot C2 loops ####

C2_storm1_NO3.p = hyst_plot(C2_storm1_Q, C2_storm1_NO3, "C2", "NO3", "1")
C2_storm1a_NO3.p = hyst_plot(C2_storm1a_Q, C2_storm1a_NO3, "C2", "NO3", "1a")
C2_storm1b_NO3.p = hyst_plot(C2_storm1b_Q, C2_storm1b_NO3, "C2", "NO3", "1b")
C2_storm2_NO3.p = hyst_plot(C2_storm2_Q, C2_storm2_NO3, "C2", "NO3", "2")
C2_storm3_NO3.p = hyst_plot(C2_storm3_Q, C2_storm3_NO3, "C2", "NO3", "3")
C2_storm4_NO3.p = hyst_plot(C2_storm4_Q, C2_storm4_NO3, "C2", "NO3", "4")
C2_storm5_NO3.p = hyst_plot(C2_storm5_Q, C2_storm5_NO3, "C2", "NO3", "5")

C2_storm1_SpCond.p = hyst_plot(C2_storm1_Q, C2_storm1_SpCond, "C2", "SpCond", "1")
C2_storm1a_SpCond.p = hyst_plot(C2_storm1a_Q, C2_storm1a_SpCond, "C2", "SpCond", "1a")
C2_storm1b_SpCond.p = hyst_plot(C2_storm1b_Q, C2_storm1b_SpCond, "C2", "SpCond", "1b")
C2_storm2_SpCond.p = hyst_plot(C2_storm2_Q, C2_storm2_SpCond, "C2", "SpCond", "2")
C2_storm3_SpCond.p = hyst_plot(C2_storm3_Q, C2_storm3_SpCond, "C2", "SpCond", "3")
C2_storm4_SpCond.p = hyst_plot(C2_storm4_Q, C2_storm4_SpCond, "C2", "SpCond", "4")
C2_storm5_SpCond.p = hyst_plot(C2_storm5_Q, C2_storm5_SpCond, "C2", "SpCond", "5")

C2_storm1_fDOM.p = hyst_plot(C2_storm1_Q, C2_storm1_fDOM, "C2", "fDOM", "1")
C2_storm1a_fDOM.p = hyst_plot(C2_storm1a_Q, C2_storm1a_fDOM, "C2", "fDOM", "1a")
C2_storm1b_fDOM.p = hyst_plot(C2_storm1b_Q, C2_storm1b_fDOM, "C2", "fDOM", "1b")
C2_storm2_fDOM.p = hyst_plot(C2_storm2_Q, C2_storm2_fDOM, "C2", "fDOM", "2")
C2_storm3_fDOM.p = hyst_plot(C2_storm3_Q, C2_storm3_fDOM, "C2", "fDOM", "3")
C2_storm4_fDOM.p = hyst_plot(C2_storm4_Q, C2_storm4_fDOM, "C2", "fDOM", "4")
C2_storm5_fDOM.p = hyst_plot(C2_storm5_Q, C2_storm5_fDOM, "C2", "fDOM", "5")

C2_storm1_turb.p = hyst_plot(C2_storm1_Q, C2_storm1_turb, "C2", "Turbidity", "1")
C2_storm1a_turb.p = hyst_plot(C2_storm1a_Q, C2_storm1a_turb, "C2", "Turbidity", "1a")
C2_storm1b_turb.p = hyst_plot(C2_storm1b_Q, C2_storm1b_turb, "C2", "Turbidity", "1b")
C2_storm2_turb.p = hyst_plot(C2_storm2_Q, C2_storm2_turb, "C2", "Turbidity", "2")
C2_storm3_turb.p = hyst_plot(C2_storm3_Q, C2_storm3_turb, "C2", "Turbidity", "3")
C2_storm4_turb.p = hyst_plot(C2_storm4_Q, C2_storm4_turb, "C2", "Turbidity", "4")
C2_storm5_turb.p = hyst_plot(C2_storm5_Q, C2_storm5_turb, "C2", "Turbidity", "5")

#### Multiplots of C2 storms ####

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

multiplot(C2_storm1_NO3.p, C2_storm1_fDOM.p, C2_storm1_SpCond.p, C2_storm1_turb.p,
          C2_storm1a_NO3.p, C2_storm1a_fDOM.p, C2_storm1a_SpCond.p, C2_storm1a_turb.p,
          C2_storm1b_NO3.p, C2_storm1b_fDOM.p, C2_storm1b_SpCond.p, C2_storm1b_turb.p,
          C2_storm2_NO3.p, C2_storm2_fDOM.p, C2_storm2_SpCond.p, C2_storm2_turb.p,
          C2_storm3_NO3.p, C2_storm3_fDOM.p, C2_storm3_SpCond.p, C2_storm3_turb.p,
          C2_storm4_NO3.p, C2_storm4_fDOM.p, C2_storm4_SpCond.p, C2_storm4_turb.p, 
          C2_storm5_NO3.p, C2_storm5_fDOM.p, C2_storm5_SpCond.p, C2_storm5_turb.p, cols=7)
# export pdf 20 x 30





#### plot C4 loops ####

C4_storm1_SpCond.p = hyst_plot(C4_storm1_Q, C4_storm1_SpCond, "C4", "SpCond", "1")
C4_storm2_SpCond.p = hyst_plot(C4_storm2_Q, C4_storm2_SpCond, "C4", "SpCond", "2")
C4_storm3_SpCond.p = hyst_plot(C4_storm3_Q, C4_storm3_SpCond, "C4", "SpCond", "3")
C4_storm4_SpCond.p = hyst_plot(C4_storm4_Q, C4_storm4_SpCond, "C4", "SpCond", "4")

C4_storm1_fDOM.p = hyst_plot(C4_storm1_Q, C4_storm1_fDOM, "C4", "fDOM", "1")
C4_storm2_fDOM.p = hyst_plot(C4_storm2_Q, C4_storm2_fDOM, "C4", "fDOM", "2")
C4_storm3_fDOM.p = hyst_plot(C4_storm3_Q, C4_storm3_fDOM, "C4", "fDOM", "3")
C4_storm4_fDOM.p = hyst_plot(C4_storm4_Q, C4_storm4_fDOM, "C4", "fDOM", "4")

C4_storm1_turb.p = hyst_plot(C4_storm1_Q, C4_storm1_turb, "C4", "Turbidity", "1")
C4_storm2_turb.p = hyst_plot(C4_storm2_Q, C4_storm2_turb, "C4", "Turbidity", "2")
C4_storm3_turb.p = hyst_plot(C4_storm3_Q, C4_storm3_turb, "C4", "Turbidity", "3")
C4_storm4_turb.p = hyst_plot(C4_storm4_Q, C4_storm4_turb, "C4", "Turbidity", "4")


#### Multiplots of C4 storms ####

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

multiplot(C4_storm1_fDOM.p, C4_storm1_SpCond.p, C4_storm1_turb.p,
          C4_storm2_fDOM.p, C4_storm2_SpCond.p, C4_storm2_turb.p,
          C4_storm3_fDOM.p, C4_storm3_SpCond.p, C4_storm3_turb.p, 
          C4_storm4_fDOM.p, C4_storm4_SpCond.p, C4_storm4_turb.p, cols=4)
# export pdf 15 x 20




####################### plot storms #######################

#### fxn: plot Q and response of storm ####

storm_plot = function(dat_Q, dat_response, site, response_var, storm_num) {

  par(mar=c(5,5,3,5), bty = "n")
  plot(dat_Q$datavalue ~ as.POSIXct(dat_Q$valuedatetime, tz="America/Anchorage"), 
       type="l", xlab="", ylab="Q (L/sec)",
       ylim = c(min(dat_Q$datavalue, na.rm=T),max(dat_Q$datavalue, na.rm=T)), 
       col="blue", main= paste("Storm", storm_num),xaxt="n")
 axis.POSIXct(1, dat_Q$valuedatetime,format="%b-%d", las=2)
  
  par(new = T)
  
  plot(dat_response$datavalue ~ as.POSIXct(dat_response$valuedatetime, tz="America/Anchorage"), 
       type="l", axes=F, xlab="", ylab="",
       ylim = c(min(dat_response$datavalue, na.rm=T),max(dat_response$datavalue, na.rm=T)*1.25),
       col="red")
  axis(side = 4)
  mtext(side = 4, line = 3, paste(site, response_var)) 
  
}



#### plot and save C3 storms ####


pdf("Output from analyses/24_25_CPCRW_2017/C3.storm.plots.pdf", width = 25, height =15, onefile=FALSE)

par(mfrow=c(4,7))

storm_plot(C3_storm1_Q, C3_storm1_NO3, "C3", "NO3", "1")
storm_plot(C3_storm1a_Q, C3_storm1a_NO3, "C3", "NO3", "1a")
storm_plot(C3_storm1b_Q, C3_storm1b_NO3, "C3", "NO3", "1b")
storm_plot(C3_storm2_Q, C3_storm2_NO3, "C3", "NO3", "2")
storm_plot(C3_storm3_Q, C3_storm3_NO3, "C3", "NO3", "3")
storm_plot(C3_storm4_Q, C3_storm4_NO3, "C3", "NO3", "4")
storm_plot(C3_storm5_Q, C3_storm5_NO3, "C3", "NO3", "5")

storm_plot(C3_storm1_Q, C3_storm1_fDOM, "C3", "fDOM", "1")
storm_plot(C3_storm1a_Q, C3_storm1a_fDOM, "C3", "fDOM", "1a")
storm_plot(C3_storm1b_Q, C3_storm1b_fDOM, "C3", "fDOM", "1b")
storm_plot(C3_storm2_Q, C3_storm2_fDOM, "C3", "fDOM", "2")
storm_plot(C3_storm3_Q, C3_storm3_fDOM, "C3", "fDOM", "3")
storm_plot(C3_storm4_Q, C3_storm4_fDOM, "C3", "fDOM", "4")
storm_plot(C3_storm5_Q, C3_storm5_fDOM, "C3", "fDOM", "5")

storm_plot(C3_storm1_Q, C3_storm1_SpCond, "C3", "SpCond", "1")
storm_plot(C3_storm1a_Q, C3_storm1a_SpCond, "C3", "SpCond", "1a")
storm_plot(C3_storm1b_Q, C3_storm1b_SpCond, "C3", "SpCond", "1b")
storm_plot(C3_storm2_Q, C3_storm2_SpCond, "C3", "SpCond", "2")
storm_plot(C3_storm3_Q, C3_storm3_SpCond, "C3", "SpCond", "3")
storm_plot(C3_storm4_Q, C3_storm4_SpCond, "C3", "SpCond", "4")
storm_plot(C3_storm5_Q, C3_storm5_SpCond, "C3", "SpCond", "5")

storm_plot(C3_storm1_Q, C3_storm1_turb, "C3", "Turbidity", "1")
storm_plot(C3_storm1a_Q, C3_storm1a_turb, "C3", "Turbidity", "1a")
storm_plot(C3_storm1b_Q, C3_storm1b_turb, "C3", "Turbidity", "1b")
storm_plot(C3_storm2_Q, C3_storm2_turb, "C3", "Turbidity", "2")
storm_plot(C3_storm3_Q, C3_storm3_turb, "C3", "Turbidity", "3")
storm_plot(C3_storm4_Q, C3_storm4_turb, "C3", "Turbidity", "4")
storm_plot(C3_storm5_Q, C3_storm5_turb, "C3", "Turbidity", "5")

dev.off()


#### plot and save C2 storms ####


pdf("Output from analyses/24_25_CPCRW_2017/C2.storm.plots.pdf", width = 25, height =15, onefile=FALSE)

layout.matrix <- matrix(c(1,7,14,21,
                          2,8,15,22,
                          3,9,16,23,
                          4,10,17,24,
                          5,11,18,25,
                          6,12,19,26,
                          0,13,20,27 ), nrow = 4, ncol = 7)
layout(layout.matrix)

storm_plot(C2_storm1_Q, C2_storm1_NO3, "C2", "NO3", "1")
storm_plot(C2_storm1a_Q, C2_storm1a_NO3, "C2", "NO3", "1a")
storm_plot(C2_storm1b_Q, C2_storm1b_NO3, "C2", "NO3", "1b")
storm_plot(C2_storm2_Q, C2_storm2_NO3, "C2", "NO3", "2")
storm_plot(C2_storm3_Q, C2_storm3_NO3, "C2", "NO3", "3")
storm_plot(C2_storm4_Q, C2_storm4_NO3, "C2", "NO3", "4")
#storm_plot(C2_storm5_Q, C2_storm5_NO3, "C2", "NO3", "5")

storm_plot(C2_storm1_Q, C2_storm1_fDOM, "C2", "fDOM", "1")
storm_plot(C2_storm1a_Q, C2_storm1a_fDOM, "C2", "fDOM", "1a")
storm_plot(C2_storm1b_Q, C2_storm1b_fDOM, "C2", "fDOM", "1b")
storm_plot(C2_storm2_Q, C2_storm2_fDOM, "C2", "fDOM", "2")
storm_plot(C2_storm3_Q, C2_storm3_fDOM, "C2", "fDOM", "3")
storm_plot(C2_storm4_Q, C2_storm4_fDOM, "C2", "fDOM", "4")
storm_plot(C2_storm5_Q, C2_storm5_fDOM, "C2", "fDOM", "5")

storm_plot(C2_storm1_Q, C2_storm1_SpCond, "C2", "SpCond", "1")
storm_plot(C2_storm1a_Q, C2_storm1a_SpCond, "C2", "SpCond", "1a")
storm_plot(C2_storm1b_Q, C2_storm1b_SpCond, "C2", "SpCond", "1b")
storm_plot(C2_storm2_Q, C2_storm2_SpCond, "C2", "SpCond", "2")
storm_plot(C2_storm3_Q, C2_storm3_SpCond, "C2", "SpCond", "3")
storm_plot(C2_storm4_Q, C2_storm4_SpCond, "C2", "SpCond", "4")
storm_plot(C2_storm5_Q, C2_storm5_SpCond, "C2", "SpCond", "5")

storm_plot(C2_storm1_Q, C2_storm1_turb, "C2", "Turbidity", "1")
storm_plot(C2_storm1a_Q, C2_storm1a_turb, "C2", "Turbidity", "1a")
storm_plot(C2_storm1b_Q, C2_storm1b_turb, "C2", "Turbidity", "1b")
storm_plot(C2_storm2_Q, C2_storm2_turb, "C2", "Turbidity", "2")
storm_plot(C2_storm3_Q, C2_storm3_turb, "C2", "Turbidity", "3")
storm_plot(C2_storm4_Q, C2_storm4_turb, "C2", "Turbidity", "4")
storm_plot(C2_storm5_Q, C2_storm5_turb, "C2", "Turbidity", "5")

dev.off()

#### plot and save P6 storms ####


pdf("Output from analyses/24_25_CPCRW_2017/P6.storm.plots.pdf", width = 20, height =10, onefile=FALSE)

par(mfrow=c(3,4))

storm_plot(P6_storm1_Q, P6_storm1_fDOM, "P6", "fDOM", "1")
storm_plot(P6_storm2_Q, P6_storm2_fDOM, "P6", "fDOM", "2")
storm_plot(P6_storm3_Q, P6_storm3_fDOM, "P6", "fDOM", "3")
storm_plot(P6_storm4_Q, P6_storm4_fDOM, "P6", "fDOM", "4")

storm_plot(P6_storm1_Q, P6_storm1_SpCond, "P6", "SpCond", "1")
storm_plot(P6_storm2_Q, P6_storm2_SpCond, "P6", "SpCond", "2")
storm_plot(P6_storm3_Q, P6_storm3_SpCond, "P6", "SpCond", "3")
storm_plot(P6_storm4_Q, P6_storm4_SpCond, "P6", "SpCond", "4")

storm_plot(P6_storm1_Q, P6_storm1_turb, "P6", "Turbidity", "1")
storm_plot(P6_storm2_Q, P6_storm2_turb, "P6", "Turbidity", "2")
storm_plot(P6_storm3_Q, P6_storm3_turb, "P6", "Turbidity", "3")
storm_plot(P6_storm4_Q, P6_storm4_turb, "P6", "Turbidity", "4")

dev.off()

#### plot and save C4 storms ####


pdf("Output from analyses/24_25_CPCRW_2017/C4.storm.plots.pdf", width = 20, height =10, onefile=FALSE)

par(mfrow=c(3,4))

storm_plot(C4_storm1_Q, C4_storm1_fDOM, "C4", "fDOM", "1")
storm_plot(C4_storm2_Q, C4_storm2_fDOM, "C4", "fDOM", "2")
storm_plot(C4_storm3_Q, C4_storm3_fDOM, "C4", "fDOM", "3")
storm_plot(C4_storm4_Q, C4_storm4_fDOM, "C4", "fDOM", "4")

storm_plot(C4_storm1_Q, C4_storm1_SpCond, "C4", "SpCond", "1")
storm_plot(C4_storm2_Q, C4_storm2_SpCond, "C4", "SpCond", "2")
storm_plot(C4_storm3_Q, C4_storm3_SpCond, "C4", "SpCond", "3")
storm_plot(C4_storm4_Q, C4_storm4_SpCond, "C4", "SpCond", "4")

storm_plot(C4_storm1_Q, C4_storm1_turb, "C4", "Turbidity", "1")
storm_plot(C4_storm2_Q, C4_storm2_turb, "C4", "Turbidity", "2")
storm_plot(C4_storm3_Q, C4_storm3_turb, "C4", "Turbidity", "3")
storm_plot(C4_storm4_Q, C4_storm4_turb, "C4", "Turbidity", "4")

dev.off()
