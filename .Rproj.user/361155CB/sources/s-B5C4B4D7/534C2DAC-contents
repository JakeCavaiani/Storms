### Read me ###
# the purpose of this script is to export NEON discharge and stream chemistry data 


# Important NOTES:
# Name: Water quality

#Description: In situ sensor-based specific conductivity, concentration of chlorophyll a, dissolved oxygen content, fDOM concentration, pH, and turbidity, available as one- or five-minute instantaneous measurements in surface water of lakes, wadeable streams, and non-wadeable streams.

#NEON Science Team Supplier: Aquatic Instrument System

#Abstract: Water quality is measured once per minute at stream sensor sets and once per 5 minutes on buoys at lake and river sites. It is reported as 1- or 5-minute instantaneous measurements.

#Latency: Data collected in any given month are published during the second full week of the following month.

#Brief Design Description: The water quality sondes are deployed at stream sensor sets and lake and river buoys. At stream sites, the sondes are affixed to a post at a static depth relative to the stream bottom. The upstream sensor set #1 (S1) collects specific conductance, dissolved oxygen, pH, chlorophyll, and turbidity, but no fDOM. The downstream sensor set #2 (S2) collects specific conductance, dissolved oxygen, pH, chlorophyll, turbidity and fDOM. The buoy-deployed multisondes collect specific conductance, dissolved oxygen, pH, chlorophyll, turbidity, fDOM, and depth. At all but the Flint River, GA (FLNT) buoys, the water quality multisonde is fixed to a profiling winch to collect data from multiple depths every 4 hours and from 0.5 m parked depth when not profiling. Due to the high velocity of the Flint River, there are two sondes. One is deployed at a fixed depth of 0.5 m below the water surface and one monitors water pumped from two depths, which are reported with the data.

#Brief Study Area Description: S1 (upstream) and S2 (downstream) sensor sets are at all wadeable stream sites within NEON. Buoys are deployed at all lake and large river sites within NEON.

#Sensor(s): YSI EXO2 Multiparameter Sonde; YSI EXO turbidity sensor; YSI EXO total algae PC sensor; YSI EXO pH sensor; YSI EXO dissolved oxygen sensor; YSI EXO fDOm sensor; YSI EXO conductivity and temperature sensor; YSI EXO central wiper


# Step 1: import raw data files which is site, datetime, absolute pressure and water level
# Step 2: Clean errant points within the data that could be due to installation/decommission or gaps in data
# Step 3: Write final output of cleaned site, datetime, absolute pressure and water level

# KING = Kings Creek - Prairie 
# MCRA = McRae Creek - PNW
# SYCA = Sycamore creek - desert
# OKSR = Oksrukuyik Creek Arctic
# CUPE = Rio Cupeyes - PR 

### load packages ### 
library(tidyverse)
library(lubridate)
library(data.table)
library(rio)
library(ggplot2)
library(scales)
library(psych)
library(here)
library(googledrive)
library(readxl)
library(cowplot)
library(zoo)
library(readr)
library(dplyr)
library(RColorBrewer)
library(gridExtra)
library(ggpmisc)
library(here)

# load packages
library(neonUtilities)
library(raster)

# Set global option to NOT convert all character variables to factors
options(stringsAsFactors=F)

# Load in Continuous Discharge for each site
KING_Q <- loadByProduct(dpID = "DP4.00130.001",
                        site = c("KING"),
                        package = "basic")
MCRA_Q <- loadByProduct(dpID = "DP4.00130.001",
                        site = c("MCRA"),
                        package = "basic")
SYCA_Q <- loadByProduct(dpID = "DP4.00130.001",
                        site = c("SYCA"),
                        package = "basic")
OKSR_Q <- loadByProduct(dpID = "DP4.00130.001",
                               site = c("OKSR"),
                               package = "basic")
CUPE_Q <- loadByProduct(dpID = "DP4.00130.001",
                        site = c("CUPE"),
                        package = "basic")
# Making CSV # 
#KING
names(KING_Q)
View(KING_Q$csd_continuousDischarge)
list2env(KING_Q, .GlobalEnv)

write.csv(KING_Q$csd_continuousDischarge, 
          "~/Documents/NEON/KING/ContinuousDischarge.csv", 
          row.names=F)
#MCRA
names(MCRA_Q)
View(MCRA_Q$csd_continuousDischarge)
list2env(MCRA_Q, .GlobalEnv)

write.csv(MCRA_Q$csd_continuousDischarge, 
          "~/Documents/NEON/MCRA/ContinuousDischarge.csv", 
          row.names=F)
#SYCA
names(SYCA_Q)
View(SYCA_Q$csd_continuousDischarge)
list2env(SYCA_Q, .GlobalEnv)

write.csv(SYCA_Q$csd_continuousDischarge, 
          "~/Documents/NEON/SYCA/ContinuousDischarge.csv", 
          row.names=F)

#OKSR
names(OKSR_Q)
View(OKSR_Q$csd_continuousDischarge)
list2env(OKSR_Q, .GlobalEnv)

write.csv(OKSR_Q$csd_continuousDischarge, 
          "~/Documents/NEON/OKSR/ContinuousDischarge.csv", 
          row.names=F)
View(OKSR_Q$variables_00130)

#CUPE
names(CUPE_Q)
View(CUPE_Q$csd_continuousDischarge)
list2env(CUPE_Q, .GlobalEnv)

write.csv(CUPE_Q$csd_continuousDischarge, 
          "~/Documents/NEON/CUPE/ContinuousDischarge.csv", 
          row.names=F)
# clean columns to just get date and discharge
#King
KING_Q$csd_continuousDischarge <- KING_Q$csd_continuousDischarge[,-c(2,3,5,6,7,8,9,10,11,13,14,15,16,17,18,19)] # clean rows just to have datetime and site and discharge
KING_final_Q <- KING_Q$csd_continuousDischarge
names(KING_final_Q) <- c("Site", "DateTime", "Discharge")
write.csv(KING_final_Q, 
          "~/Documents/NEON/KING/FinalDischarge.csv", 
          row.names=F)
KING_Q_2019 <-  KING_final_Q %>% subset(KING_final_Q$DateTime > "2019-01-01" & KING_final_Q$DateTime < "2019-12-31")
KING_Q_2020 <-  KING_final_Q %>% subset(KING_final_Q$DateTime > "2020-01-01" & KING_final_Q$DateTime < "2020-12-31")
View(KING_Q_2020)

#MCRA
MCRA_Q$csd_continuousDischarge <- MCRA_Q$csd_continuousDischarge[,-c(2,3,5,6,7,8,9,10,11,13,14,15,16,17,18,19)] # clean rows just to have datetime and site and discharge
MCRA_final_Q <- MCRA_Q$csd_continuousDischarge
names(MCRA_final_Q) <- c("Site", "DateTime", "Discharge")
write.csv(MCRA_final_Q, 
          "~/Documents/NEON/MCRA/FinalDischarge.csv", 
          row.names=F)
str(MCRA_final_Q)
MCRA_Q_2018 <-  MCRA_final_Q %>% subset(MCRA_final_Q$DateTime > "2018-01-01" & MCRA_final_Q$DateTime < "2018-12-31")
MCRA_Q_2019 <-  MCRA_final_Q %>% subset(MCRA_final_Q$DateTime > "2019-01-01" & MCRA_final_Q$DateTime < "2019-12-31")
MCRA_Q_2020 <-  MCRA_final_Q %>% subset(MCRA_final_Q$DateTime > "2020-01-01" & MCRA_final_Q$DateTime < "2020-12-31")
View(MCRA_Q_2020)

#SYCA
SYCA_Q$csd_continuousDischarge <- SYCA_Q$csd_continuousDischarge[,-c(2,3,5,6,7,8,9,10,11,13,14,15,16,17,18,19)] # clean rows just to have datetime and site and discharge
SYCA_final_Q <- SYCA_Q$csd_continuousDischarge
names(SYCA_final_Q) <- c("Site", "DateTime", "Discharge")

write.csv(SYCA_final_Q, 
          "~/Documents/NEON/SYCA/FinalDischarge.csv", 
          row.names=F)
SYCA_Q_2019 <-  SYCA_final_Q %>% subset(SYCA_final_Q$DateTime > "2019-01-01" & SYCA_final_Q$DateTime < "2019-12-31")
SYCA_Q_2020 <-  SYCA_final_Q %>% subset(SYCA_final_Q$DateTime > "2020-01-01" & SYCA_final_Q$DateTime < "2020-12-31")
View(SYCA_Q_2020)

#OKSR
OKSR_Q$csd_continuousDischarge <- OKSR_Q$csd_continuousDischarge[,-c(2,3,5,6,7,8,9,10,11,13,14,15,16,17,18,19)] # clean rows just to have datetime and site and discharge
OKSR_final_Q <- OKSR_Q$csd_continuousDischarge
names(OKSR_final_Q) <- c("Site", "DateTime", "Discharge")

OKSR_Q_2019 <-  OKSR_final_Q %>% subset(OKSR_final_Q$DateTime > "2019-01-01" & OKSR_final_Q$DateTime < "2019-12-31")
OKSR_Q_2020 <-  OKSR_final_Q %>% subset(OKSR_final_Q$DateTime > "2020-01-01" & OKSR_final_Q$DateTime < "2020-12-31")
View(OKSR_Q_2020)

write.csv(OKSR_final_Q, 
          "~/Documents/NEON/OKSR/FinalDischarge.csv", 
          row.names=F)

#CUPE
CUPE_Q$csd_continuousDischarge <- CUPE_Q$csd_continuousDischarge[,-c(2,3,5,6,7,8,9,10,11,13,14,15,16,17,18,19)] # clean rows just to have datetime and site and discharge
CUPE_final_Q <- CUPE_Q$csd_continuousDischarge
names(CUPE_final_Q) <- c("Site", "DateTime", "Discharge")

CUPE_Q_2019 <-  CUPE_final_Q %>% subset(CUPE_final_Q$DateTime > "2019-01-01" & CUPE_final_Q$DateTime < "2019-12-31")
CUPE_Q_2020 <-  CUPE_final_Q %>% subset(CUPE_final_Q$DateTime > "2020-01-01" & CUPE_final_Q$DateTime < "2020-12-31")
View(CUPE_Q_2020)

write.csv(CUPE_final_Q, 
          "~/Documents/NEON/CUPE/FinalDischarge.csv", 
          row.names=F)
# Plot Q #

# KING #
ggplot(aes(x = DateTime, y = Discharge), data = KING_Q_2019) +
  geom_line(color="#A6CEE3", size=1.25) +
  theme_classic() +
  ggtitle("KING measured Q") +
  xlab("Date") +
  ylab("Discharge (L/s)") +
  xlab("") +
  ylim(0, 500)

# MCRA #
ggplot(aes(x = DateTime, y = Discharge), data = MCRA_Q_2019) +
  geom_line(color="#A6CEE3", size=1.25) +
  theme_classic() +
  ggtitle("MCRA measured Q") +
  xlab("Date") +
  ylab("Discharge (L/s)") +
  xlab("") +
  ylim(0, 500)

# SYCA #
ggplot(aes(x = DateTime, y = Discharge), data = SYCA_Q_2019) +
  geom_line(color="#A6CEE3", size=1.25) +
  theme_classic() +
  ggtitle("SYCA measured Q") +
  xlab("Date") +
  ylab("Discharge (L/s)") +
  xlab("") 

# OKSR #
ggplot(aes(x = DateTime, y = Discharge), data = OKSR_Q_2019) +
  geom_line(color="#A6CEE3", size=1.25) +
  theme_classic() +
  ggtitle("SYCA measured Q") +
  xlab("Date") +
  ylab("Discharge (L/s)") +
  xlab("") 

# CUPE #
ggplot(aes(x = DateTime, y = Discharge), data = CUPE_Q_2019) +
  geom_line(color="#A6CEE3", size=1.25) +
  theme_classic() +
  ggtitle("SYCA measured Q") +
  xlab("Date") +
  ylab("Discharge (L/s)") +
  xlab("") 

# KING #
ggplot(aes(x = DateTime, y = Discharge), data = KING_Q_2020) +
  geom_line(color="#A6CEE3", size=1.25) +
  theme_classic() +
  ggtitle("KING measured Q") +
  xlab("Date") +
  ylab("Discharge (L/s)") +
  xlab("") +
  ylim(0, 500)

# MCRA #
ggplot(aes(x = DateTime, y = Discharge), data = MCRA_Q_2020) +
  geom_line(color="#A6CEE3", size=1.25) +
  theme_classic() +
  ggtitle("MCRA measured Q") +
  xlab("Date") +
  ylab("Discharge (L/s)") +
  xlab("") +
  ylim(0, 500)

# SYCA #
ggplot(aes(x = DateTime, y = Discharge), data = SYCA_Q_2020) +
  geom_line(color="#A6CEE3", size=1.25) +
  theme_classic() +
  ggtitle("SYCA measured Q") +
  xlab("Date") +
  ylab("Discharge (L/s)") +
  xlab("") 

# OKSR #
ggplot(aes(x = DateTime, y = Discharge), data = OKSR_Q_2020) +
  geom_line(color="#A6CEE3", size=1.25) +
  theme_classic() +
  ggtitle("SYCA measured Q") +
  xlab("Date") +
  ylab("Discharge (L/s)") +
  xlab("") 

# CUPE #
ggplot(aes(x = DateTime, y = Discharge), data = CUPE_Q_2020) +
  geom_line(color="#A6CEE3", size=1.25) +
  theme_classic() +
  ggtitle("SYCA measured Q") +
  xlab("Date") +
  ylab("Discharge (L/s)") +
  xlab("") 


# Load in water quality at each site #
KING_WQ <- loadByProduct(dpID = "DP1.20288.001",
                        startdate = "2019-01",
                        site = c("KING"),
                        package = "basic")
MCRA_WQ <- loadByProduct(dpID = "DP1.20288.001",
                        startdate = "2019-01",
                        site = c("MCRA"),
                        package = "basic")
SYCA_WQ <- loadByProduct(dpID = "DP1.20288.001",
                        startdate = "2019-01",
                        site = c("SYCA"),
                        package = "basic")
OKSR_WQ <- loadByProduct(dpID = "DP1.20288.001",
                        startdate = "2019-01",
                        site = c("OKSR"),
                        package = "basic")
CUPE_WQ <- loadByProduct(dpID = "DP1.20288.001",
                        startdate = "2019-01",
                        site = c("CUPE"),
                        package = "basic")

# Load in NO3 at each site #
KING_NO3 <- loadByProduct(dpID = "DP1.20033.001",
                         startdate = "2019-01",
                         site = c("KING"),
                         package = "basic")
MCRA_NO3 <- loadByProduct(dpID = "DP1.20033.001",
                         startdate = "2019-01",
                         site = c("MCRA"),
                         package = "basic")
SYCA_NO3 <- loadByProduct(dpID = "DP1.20033.001",
                         startdate = "2019-01",
                         site = c("SYCA"),
                         package = "basic")
OKSR_NO3 <- loadByProduct(dpID = "DP1.20033.001",
                         startdate = "2019-01",
                         site = c("OKSR"),
                         package = "basic")
CUPE_NO3 <- loadByProduct(dpID = "DP1.20033.001",
                         startdate = "2019-01",
                         site = c("CUPE"),
                         package = "basic")
# KING #
names(KING_WQ)
View(KING_WQ$waq_instantaneous)
View(KING_WQ$variables_20288)
list2env(KING_WQ, .GlobalEnv)

names(KING_NO3)
View(KING_NO3$NSW_15_minute)
View(KING_NO3$variables_20033)
list2env(KING_NO3, .GlobalEnv)

write.csv(KING_WQ$waq_instantaneous, 
          "~/Documents/NEON/KING/WaterQuality.csv", 
          row.names=F)


KING.SpCond <- subset(KING_WQ$waq_instantaneous, select = c("startDateTime", "specificConductance" ))
KING.Turb <- subset(KING_WQ$waq_instantaneous, select = c("startDateTime", "turbidity"))
KING.fDOM <- subset(KING_WQ$waq_instantaneous, select = c("startDateTime", "fDOM"))
KING.NO3 <- subset(KING_NO3$NSW_15_minute, select = c("startDateTime", "surfWaterNitrateMean"))

names(KING.SpCond) <- c("DateTime", "SpCond")
names(KING.Turb) <- c("DateTime", "Turb")
names(KING.fDOM) <- c("DateTime", "fDOM")
names(KING.NO3) <- c("DateTime", "NO3")

KING.SpCond$DateTime <- round_date(KING.SpCond$DateTime, unit="1 mins") # rounding to nearest whole minute
KING.Turb$DateTime <- round_date(KING.Turb$DateTime, unit="1 mins") # rounding to nearest whole minute
KING.fDOM$DateTime <- round_date(KING.fDOM$DateTime, unit="1 mins") # rounding to nearest whole minute

KING.SpCond.2019 <-  KING.SpCond %>% subset(KING.SpCond$DateTime > "2019-01-01" & KING.SpCond$DateTime < "2019-12-31")
KING.Turb.2019 <-  KING.Turb %>% subset(KING.Turb$DateTime > "2019-01-01" & KING.Turb$Turb < "2019-12-31")
KING.fDOM.2019 <-  KING.fDOM %>% subset(KING.fDOM$DateTime > "2019-01-01" & KING.fDOM$fDOM < "2019-12-31")
KING.NO3.2019 <-  KING.NO3 %>% subset(KING.NO3$DateTime > "2019-01-01" & KING.NO3$NO3 < "2019-12-31")

KING.SpCond.Q.2019 = left_join(KING_Q_2019, KING.SpCond.2019, by="DateTime")
KING.Turb.Q.2019 = left_join(KING.SpCond.Q.2019, KING.Turb.2019, by="DateTime")
KING.fDOM.Q.2019 = left_join(KING.Turb.Q.2019, KING.fDOM.2019, by="DateTime")
KING.WQ.2019 = left_join(KING.fDOM.Q.2019, KING.NO3.2019, by="DateTime")

write.csv(KING.WQ.2019, 
          "~/Documents/NEON/KING/WaterQuality2019.csv", 
          row.names=F)

# MCRA #
names(MCRA_WQ)
View(MCRA_WQ$waq_instantaneous)
list2env(MCRA_WQ, .GlobalEnv)

names(MCRA_NO3)
View(MCRA_NO3$NSW_15_minute)
View(MCRA_NO3$variables_20033)
list2env(MCRA_NO3, .GlobalEnv)

write.csv(MCRA_WQ$waq_instantaneous, 
          "~/Documents/NEON/MCRA/WaterQuality.csv", 
          row.names=F)
MCRA.SpCond <- subset(MCRA_WQ$waq_instantaneous, select = c("startDateTime", "specificConductance" ))
MCRA.Turb <- subset(MCRA_WQ$waq_instantaneous, select = c("startDateTime", "turbidity"))
MCRA.fDOM <- subset(MCRA_WQ$waq_instantaneous, select = c("startDateTime", "fDOM"))
MCRA.NO3 <- subset(MCRA_NO3$NSW_15_minute, select = c("startDateTime", "surfWaterNitrateMean"))

names(MCRA.SpCond) <- c("DateTime", "SpCond")
names(MCRA.Turb) <- c("DateTime", "Turb")
names(MCRA.fDOM) <- c("DateTime", "fDOM")
names(MCRA.NO3) <- c("DateTime", "NO3")

MCRA.SpCond.2019 <-  MCRA.SpCond %>% subset(MCRA.SpCond$DateTime > "2019-01-01" & MCRA.SpCond$DateTime < "2019-12-31")
MCRA.Turb.2019 <-  MCRA.Turb %>% subset(MCRA.Turb$DateTime > "2019-01-01" & MCRA.Turb$Turb < "2019-12-31")
MCRA.fDOM.2019 <-  MCRA.fDOM %>% subset(MCRA.fDOM$DateTime > "2019-01-01" & MCRA.fDOM$fDOM < "2019-12-31")
MCRA.NO3.2019 <-  MCRA.NO3 %>% subset(MCRA.NO3$DateTime > "2019-01-01" & MCRA.NO3$NO3 < "2019-12-31")

MCRA.SpCond.Q.2019 = left_join(MCRA_Q_2019, MCRA.SpCond.2019, by="DateTime")
MCRA.Turb.Q.2019 = left_join(MCRA.SpCond.Q.2019, MCRA.Turb.2019, by="DateTime")
MCRA.fDOM.Q.2019 = left_join(MCRA.Turb.Q.2019, MCRA.fDOM.2019, by="DateTime")
MCRA.WQ.2019 = left_join(MCRA.fDOM.Q.2019, MCRA.NO3.2019, by="DateTime")

write.csv(MCRA.WQ.2019, 
          "~/Documents/NEON/MCRA/WaterQuality2019.csv", 
          row.names=F)
# SYCA #
names(SYCA_WQ)
View(SYCA_WQ$waq_instantaneous)
list2env(SYCA_WQ, .GlobalEnv)

names(SYCA_NO3)
View(SYCA_NO3$NSW_15_minute)
View(SYCA_NO3$variables_20033)
list2env(SYCA_NO3, .GlobalEnv)

write.csv(SYCA_WQ$waq_instantaneous, 
          "~/Documents/NEON/SYCA/WaterQuality.csv", 
          row.names=F)
SYCA.SpCond <- subset(SYCA_WQ$waq_instantaneous, select = c("startDateTime", "specificConductance" ))
SYCA.Turb <- subset(SYCA_WQ$waq_instantaneous, select = c("startDateTime", "turbidity"))
SYCA.fDOM <- subset(SYCA_WQ$waq_instantaneous, select = c("startDateTime", "fDOM"))
SYCA_NO3 <- subset(SYCA_NO3$NSW_15_minute, select = c("startDateTime", "surfWaterNitrateMean"))

names(SYCA.SpCond) <- c("DateTime", "SpCond")
names(SYCA.Turb) <- c("DateTime", "Turb")
names(SYCA.fDOM) <- c("DateTime", "fDOM")
names(SYCA_NO3) <- c("DateTime", "NO3")

SYCA.SpCond$DateTime <- round_date(SYCA.SpCond$DateTime, unit="1 mins") # rounding to nearest whole minute
SYCA.Turb$DateTime <- round_date(SYCA.Turb$DateTime, unit="1 mins") # rounding to nearest whole minute
SYCA.fDOM$DateTime <- round_date(SYCA.fDOM$DateTime, unit="1 mins") # rounding to nearest whole minute

names(SYCA.SpCond) <- c("DateTime", "SpCond")
names(SYCA.Turb) <- c("DateTime", "Turb")
names(SYCA.fDOM) <- c("DateTime", "fDOM")
names(SYCA_NO3) <- c("DateTime", "NO3")

SYCA.SpCond.Q = left_join(SYCA_final_Q, SYCA.SpCond, by="DateTime")
SYCA.Turb.Q = left_join(SYCA.SpCond.Q, SYCA.Turb, by="DateTime")
SYCA.fDOM.Q = left_join(SYCA.Turb.Q, SYCA.fDOM, by="DateTime")
SYCA.WQ = left_join(SYCA.fDOM.Q, SYCA_NO3, by="DateTime")

write.csv(SYCA.WQ, 
          "~/Documents/NEON/SYCA/WaterQuality.csv", 
          row.names=F)

SYCA.SpCond.2019 <-  SYCA.SpCond %>% subset(SYCA.SpCond$DateTime > "2019-01-01" & SYCA.SpCond$DateTime < "2019-12-31")
SYCA.Turb.2019 <-  SYCA.Turb %>% subset(SYCA.Turb$DateTime > "2019-01-01" & SYCA.Turb$Turb < "2019-12-31")
SYCA.fDOM.2019 <-  SYCA.fDOM %>% subset(SYCA.fDOM$DateTime > "2019-01-01" & SYCA.fDOM$fDOM < "2019-12-31")
SYCA.NO3.2019 <-  SYCA_NO3 %>% subset(SYCA_NO3$DateTime > "2019-01-01" & SYCA_NO3$NO3 < "2019-12-31")

SYCA.SpCond.Q.2019 = left_join(SYCA_Q_2019, SYCA.SpCond.2019, by="DateTime")
SYCA.Turb.Q.2019 = left_join(SYCA.SpCond.Q.2019, SYCA.Turb.2019, by="DateTime")
SYCA.fDOM.Q.2019 = left_join(SYCA.Turb.Q.2019, SYCA.fDOM.2019, by="DateTime")
SYCA.WQ.2019 = left_join(SYCA.fDOM.Q.2019, SYCA.NO3.2019, by="DateTime")

write.csv(SYCA.WQ.2019, 
          "~/Documents/NEON/SYCA/WaterQuality2019.csv", 
          row.names=F)

# OKSR #
names(OKSR_WQ)
View(OKSR_WQ$waq_instantaneous)
list2env(OKSR_WQ, .GlobalEnv)

names(OKSR_NO3)
View(OKSR_NO3$NSW_15_minute)
View(OKSR_NO3$variables_20033)
list2env(OKSR_NO3, .GlobalEnv)

write.csv(OKSR_WQ$waq_instantaneous, 
          "~/Documents/NEON/OKSR/WaterQuality.csv", 
          row.names=F)
OKSR.SpCond <- subset(OKSR_WQ$waq_instantaneous, select = c("startDateTime", "specificConductance" ))
OKSR.Turb <- subset(OKSR_WQ$waq_instantaneous, select = c("startDateTime", "turbidity"))
OKSR.fDOM <- subset(OKSR_WQ$waq_instantaneous, select = c("startDateTime", "fDOM"))
OKSR.NO3 <- subset(OKSR_NO3$NSW_15_minute, select = c("startDateTime", "surfWaterNitrateMean"))

names(OKSR.SpCond) <- c("DateTime", "SpCond")
names(OKSR.Turb) <- c("DateTime", "Turb")
names(OKSR.fDOM) <- c("DateTime", "fDOM")
names(OKSR.NO3) <- c("DateTime", "NO3")

OKSR.SpCond$DateTime <- round_date(OKSR.SpCond$DateTime, unit="1 mins") # rounding to nearest whole minute
OKSR.Turb$DateTime <- round_date(OKSR.Turb$DateTime, unit="1 mins") # rounding to nearest whole minute
OKSR.fDOM$DateTime <- round_date(OKSR.fDOM$DateTime, unit="1 mins") # rounding to nearest whole minute

names(OKSR.SpCond) <- c("DateTime", "SpCond")
names(OKSR.Turb) <- c("DateTime", "Turb")
names(OKSR.fDOM) <- c("DateTime", "fDOM")
names(OKSR_NO3) <- c("DateTime", "NO3")

OKSR.SpCond.Q = left_join(OKSR_final_Q, OKSR.SpCond, by="DateTime")
OKSR.Turb.Q = left_join(OKSR.SpCond.Q, OKSR.Turb, by="DateTime")
OKSR.fDOM.Q = left_join(OKSR.Turb.Q, OKSR.fDOM, by="DateTime")
OKSR.WQ = left_join(OKSR.fDOM.Q, OKSR.NO3, by="DateTime")

write.csv(OKSR.WQ, 
          "~/Documents/NEON/OKSR/WaterQuality.csv", 
          row.names=F)

OKSR.SpCond.2019 <-  OKSR.SpCond %>% subset(OKSR.SpCond$DateTime > "2019-01-01" & OKSR.SpCond$DateTime < "2019-12-31")
OKSR.Turb.2019 <-  OKSR.Turb %>% subset(OKSR.Turb$DateTime > "2019-01-01" & OKSR.Turb$Turb < "2019-12-31")
OKSR.fDOM.2019 <-  OKSR.fDOM %>% subset(OKSR.fDOM$DateTime > "2019-01-01" & OKSR.fDOM$fDOM < "2019-12-31")
OKSR.NO3.2019 <-  OKSR.NO3 %>% subset(OKSR.NO3$DateTime > "2019-01-01" & OKSR.NO3$NO3 < "2019-12-31")

OKSR.SpCond.Q.2019 = left_join(OKSR_Q_2019, OKSR.SpCond.2019, by="DateTime")
OKSR.Turb.Q.2019 = left_join(OKSR.SpCond.Q.2019, OKSR.Turb.2019, by="DateTime")
OKSR.fDOM.Q.2019 = left_join(OKSR.Turb.Q.2019, OKSR.fDOM.2019, by="DateTime")
OKSR.WQ.2019 = left_join(OKSR.fDOM.Q.2019, OKSR.NO3.2019, by="DateTime")

write.csv(OKSR.WQ.2019, 
          "~/Documents/NEON/OKSR/WaterQuality2019.csv", 
          row.names=F)

# CUPE #
names(CUPE_WQ)
View(CUPE_WQ$waq_instantaneous)
list2env(CUPE_WQ, .GlobalEnv)

names(CUPE_NO3)
View(CUPE_NO3$NSW_15_minute)
View(CUPE_NO3$variables_20033)
list2env(CUPE_NO3, .GlobalEnv)

write.csv(CUPE_WQ$waq_instantaneous, 
          "~/Documents/NEON/CUPE/WaterQuality.csv", 
          row.names=F)

CUPE.SpCond <- subset(CUPE_WQ$waq_instantaneous, select = c("startDateTime", "specificConductance" ))
CUPE.Turb <- subset(CUPE_WQ$waq_instantaneous, select = c("startDateTime", "turbidity"))
CUPE.fDOM <- subset(CUPE_WQ$waq_instantaneous, select = c("startDateTime", "fDOM"))
CUPE.NO3 <- subset(CUPE_NO3$NSW_15_minute, select = c("startDateTime", "surfWaterNitrateMean"))


names(CUPE.SpCond) <- c("DateTime", "SpCond")
names(CUPE.Turb) <- c("DateTime", "Turb")
names(CUPE.fDOM) <- c("DateTime", "fDOM")
names(CUPE.NO3) <- c("DateTime", "NO3")

CUPE.SpCond$DateTime <- round_date(CUPE.SpCond$DateTime, unit="1 mins") # rounding to nearest whole minute
CUPE.Turb$DateTime <- round_date(CUPE.Turb$DateTime, unit="1 mins") # rounding to nearest whole minute
CUPE.fDOM$DateTime <- round_date(CUPE.fDOM$DateTime, unit="1 mins") # rounding to nearest whole minute

names(CUPE.SpCond) <- c("DateTime", "SpCond")
names(CUPE.Turb) <- c("DateTime", "Turb")
names(CUPE.fDOM) <- c("DateTime", "fDOM")
names(CUPE_NO3) <- c("DateTime", "NO3")

CUPE.SpCond.Q = left_join(CUPE_final_Q, CUPE.SpCond, by="DateTime")
CUPE.Turb.Q = left_join(CUPE.SpCond.Q, CUPE.Turb, by="DateTime")
CUPE.fDOM.Q = left_join(CUPE.Turb.Q, CUPE.fDOM, by="DateTime")
CUPE.WQ = left_join(CUPE.fDOM.Q, CUPE.NO3, by="DateTime")

write.csv(CUPE.WQ, 
          "~/Documents/NEON/CUPE/WaterQuality.csv", 
          row.names=F)

CUPE.SpCond.2019 <-  CUPE.SpCond %>% subset(CUPE.SpCond$DateTime > "2019-01-01" & CUPE.SpCond$DateTime < "2019-12-31")
CUPE.Turb.2019 <-  CUPE.Turb %>% subset(CUPE.Turb$DateTime > "2019-01-01" & CUPE.Turb$Turb < "2019-12-31")
CUPE.fDOM.2019 <-  CUPE.fDOM %>% subset(CUPE.fDOM$DateTime > "2019-01-01" & CUPE.fDOM$fDOM < "2019-12-31")
CUPE.NO3.2019 <-  CUPE.NO3 %>% subset(CUPE.NO3$DateTime > "2019-01-01" & CUPE.NO3$NO3 < "2019-12-31")

CUPE.SpCond.Q.2019 = left_join(CUPE_Q_2019, CUPE.SpCond.2019, by="DateTime")
CUPE.Turb.Q.2019 = left_join(CUPE.SpCond.Q.2019, CUPE.Turb.2019, by="DateTime")
CUPE.fDOM.Q.2019 = left_join(CUPE.Turb.Q.2019, CUPE.fDOM.2019, by="DateTime")
CUPE.WQ.2019 = left_join(CUPE.fDOM.Q.2019, CUPE.NO3.2019, by="DateTime")

write.csv(CUPE.WQ.2019, 
          "~/Documents/NEON/CUPE/WaterQuality2019.csv", 
          row.names=F)

