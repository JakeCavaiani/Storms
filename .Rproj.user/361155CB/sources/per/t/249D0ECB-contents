### Plotting from Rmd ###

## Data: Hysteresis index generated by JSC

# 
library(here)
library(tidyverse)
library(boot)
library(broom)
library(purrr)
library(viridis)
library(readr)
library(RColorBrewer)
library(ggplot2)
library(gridExtra)
library(lubridate)
library(ggpmisc)
library(ggpubr)
library(ggExtra)
library(MuMIn)
library(raster)
#

##########################################################################################################
####################################### coef plots #######################################################
vn = expression(paste(N*O[3]^"-"))
m1 <- lm(Hyst_index ~ StormPrecip + PrecipWeek + PrecipMonth + TimeSinceChena, 
         data = HI_FI_NO3)
a <- dwplot(m1,
       dot_args = list(color = "red", size = 4 ), # color for the dot
       whisker_args = list(color = "black", size = 0.75),   # color for the whisker
       vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
  xlab("Coefficient") + 
  ggtitle(vn) +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))

m2 <- lm(Hyst_index ~ StormPrecip + PrecipWeek + PrecipMonth + Intensity + TempWeek + TimeSinceChena, 
         data = fDOM_data)
b <- dwplot(m2,
       dot_args = list(color = "blue", size = 4 ), # color for the dot
       whisker_args = list(color = "black", size = 0.75),   # color for the whisker
       vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
  xlab("Coefficient") + 
  ggtitle("fDOM") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))
b

m3 <- lm(beta ~ StormPrecip + PrecipWeek + PrecipMonth + Intensity + TempWeek + TimeSinceChena, 
         data = NO3_data_beta)
c <- dwplot(m3,
            dot_args = list(color = "red", size = 4 ), # color for the dot
            whisker_args = list(color = "black", size = 0.75),   # color for the whisker
            vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
  xlab("Coefficient") + 
  ggtitle(vn) +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))

m4 <- lm(beta ~ StormPrecip + PrecipWeek + PrecipMonth + Intensity + TempWeek + TimeSinceChena, 
         data = fDOM_data_beta)
d <- dwplot(m4,
            dot_args = list(color = "blue", size = 4 ), # color for the dot
            whisker_args = list(color = "black", size = 0.75),   # color for the whisker
            vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
  xlab("Coefficient") + 
  ggtitle("fDOM") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))

ggarrange(a,c, 
          b,d,
          labels = "HI", hjust = -4,
          ncol = 2, nrow = 2)

# SPC #
m1 <- lm(Hyst_index ~ StormPrecip + PrecipWeek + PrecipMonth + TimeSinceChena, 
         data = SPC_data)
a <- dwplot(m1,
            dot_args = list(color = "red", size = 4 ), # color for the dot
            whisker_args = list(color = "black", size = 0.75),   # color for the whisker
            vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
  xlab("Coefficient") + 
  ggtitle("SPC") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))
a

m2 <- lm(beta ~ StormPrecip + PrecipWeek + PrecipMonth + TimeSinceChena, 
         data = SPC_data_beta)
b <- dwplot(m2,
            dot_args = list(color = "blue", size = 4 ), # color for the dot
            whisker_args = list(color = "black", size = 0.75),   # color for the whisker
            vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
  xlab("Coefficient") + 
  ggtitle("SPC") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))
b

# Turb #
m1 <- lm(Hyst_index ~ StormPrecip + PrecipWeek + PrecipMonth + TimeSinceChena, 
         data = turb_data)
a <- dwplot(m1,
            dot_args = list(color = "red", size = 4 ), # color for the dot
            whisker_args = list(color = "black", size = 0.75),   # color for the whisker
            vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
  xlab("Coefficient") + 
  ggtitle("Turb") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))
a

m2 <- lm(beta ~ StormPrecip + PrecipWeek + PrecipMonth + TimeSinceChena, 
         data = turb_data_beta)
b <- dwplot(m2,
            dot_args = list(color = "blue", size = 4 ), # color for the dot
            whisker_args = list(color = "black", size = 0.75),   # color for the whisker
            vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
  xlab("Coefficient") + 
  ggtitle("Turb") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))
b


#
fDOM_data_high <- filter(fDOM_data, fDOM_data$pf == "high")
fDOM_data_medium <- filter(fDOM_data, fDOM_data$pf == "medium")

m10 <- lm(Hyst_index ~ StormPrecip + PrecipWeek + PrecipMonth + Intensity + TempWeek + TimeSinceChena, 
         data = fDOM_data_medium)

dwplot(m10,
       dot_args = list(color = "red", size = 4 ), # color for the dot
       whisker_args = list(color = "black", size = 0.75),   # color for the whisker
       vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
  xlab("Coefficient") + 
  ggtitle("fDOM") +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))

NO3_data_high <- filter(NO3_data, NO3_data$pf == "high")
NO3_data_medium <- filter(NO3_data, NO3_data$pf == "medium")

m2 <- lm(Hyst_index ~ StormPrecip + PrecipWeek + PrecipMonth + Intensity + TempWeek + TimeSinceChena, 
         data = NO3_data_medium)

dwplot(m2,
       dot_args = list(color = "red", size = 4 ), # color for the dot
       whisker_args = list(color = "black", size = 0.75),   # color for the whisker
       vline = geom_vline(xintercept = 0, colour = "grey50", linetype = 2)) +
  xlab("Coefficient") + 
  ggtitle(vn) +
  theme_classic() +
  theme(plot.title = element_text(hjust = 0.5))

### Modelling ####
##Predictors against Response #
# need to run 09_script so you can get to antecedent_HI_FI_1_0 dataframe # 
# By response and year #
antecedent_HI_FI_1_0 %>% ggplot(aes(StormPrecip, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(year),
             cols = vars(response_var)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. StormPrecip") +
  theme_bw()

which(antecedent_HI_FI_1_0$Intensity > 3)
antecedent_HI_FI_1_0[c(259:261,521:524), 21] <- NA
antecedent_HI_FI_1_0 %>% ggplot(aes(Intensity, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(year),
             cols = vars(response_var)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. Intensity") +
  theme_bw()
  
antecedent_HI_FI_1_0 %>% ggplot(aes(StormTemp, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(year),
             cols = vars(response_var)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. StormTemp") +
  theme_bw()
  
antecedent_HI_FI_1_0 %>% ggplot(aes(PrecipWeek, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(year),
             cols = vars(response_var)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. PrecipWeek") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(PrecipMonth, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(year),
             cols = vars(response_var)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. PrecipMonth") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(TempWeek, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(year),
             cols = vars(response_var)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. TempWeek") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(TimeSinceChena, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(year),
             cols = vars(response_var)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. TimeSinceChena") +
  theme_bw()

# By site #
antecedent_HI_FI_1_0 %>% ggplot(aes(StormPrecip, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. StormPrecip") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(Intensity, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. Intensity") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(StormTemp, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. StormTemp") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(PrecipWeek, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. PrecipWeek") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(PrecipMonth, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. PrecipMonth") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(TempWeek, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. TempWeek") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(TimeSinceChena, Hyst_index)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Hysteresis Index") +
  ggtitle("HI vs. TimeSinceChena") +
  theme_bw()

### BETA ### 
antecedent_HI_FI_1_0 %>% ggplot(aes(StormPrecip, beta)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("BETA") +
  ggtitle("BETA vs. StormPrecip") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(Intensity, beta)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("BETA") +
  ggtitle("BETA vs. Intensity") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(StormTemp, beta)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("BETA") +
  ggtitle("BETA vs. StormTemp") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(PrecipWeek, beta)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("BETA") +
  ggtitle("BETA vs. PrecipWeek") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(PrecipMonth, beta)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("BETA") +
  ggtitle("BETA vs. PrecipMonth") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(TempWeek, beta)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("BETA") +
  ggtitle("BETA vs. TempWeek") +
  theme_bw()

antecedent_HI_FI_1_0 %>% ggplot(aes(TimeSinceChena, beta)) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  facet_grid(rows=vars(response_var),
             cols = vars(site.ID)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("BETA") +
  ggtitle("BETA vs. TimeSinceChena") +
  theme_bw()
  
# Catchment Characteristics #
# Need to run 09_script to get to the CV_all_model and the NO3_CV dataframe #
# CVhi ~ pf*meanfDOM + burn*meanfDOM + (1|year) # this is the proposed model 

# NO3
NO3.CV %>% ggplot(aes(x = meanfDOM, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. fDOM")

NO3.CV %>% ggplot(aes(x = pf, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. pf")

NO3.CV %>% ggplot(aes(x = burn, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. burn")

#fDOM
fDOM.CV %>% ggplot(aes(x = meanfDOM, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. fDOM")


fDOM.CV %>% ggplot(aes(x = pf, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. pf")

fDOM.CV %>% ggplot(aes(x = burn, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. burn")

#SPC
SPC.CV %>% ggplot(aes(x = meanfDOM, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. fDOM")


SPC.CV %>% ggplot(aes(x = pf, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. pf")

SPC.CV %>% ggplot(aes(x = burn, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. burn")

#Turb
turb.CV %>% ggplot(aes(x = meanfDOM, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. fDOM")


turb.CV %>% ggplot(aes(x = pf, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. pf")

turb.CV %>% ggplot(aes(x = burn, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV Hysteresis Index") +
  ggtitle("HI vs. burn")

############################################################################################################
################################ HI vs. FI ###############################################################

names(HI_FI_NO3)[24] <- 'PF Extent'
names(HI_FI_fDOM)[24] <- 'PF Extent'
names(HI_FI_SPC)[24] <- 'PF Extent'
names(HI_FI_turb)[24] <- 'PF Extent'
HI_FI_NO3.p = 
  ggplot(HI_FI_NO3, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = `PF Extent`), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle(vn)+ 
  ylab("") +
  xlab("") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20)) 
HI_FI_NO3.p

HI_FI_fDOM.p = 
  ggplot(HI_FI_fDOM, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = `PF Extent`), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("fDOM")+ 
  xlab("") +
  ylab("") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20)) 
HI_FI_fDOM.p

HI_FI_SPC.p = 
  ggplot(HI_FI_SPC, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = `PF Extent`), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("SPC")+
  xlab("") + 
  ylab("") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20)) 
HI_FI_SPC.p

HI_FI_turb.p = 
  ggplot(HI_FI_turb, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = `PF Extent`), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("Turbidity")+ 
  xlab("") +
  ylab("") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20)) 
HI_FI_turb.p

ggarrange(HI_FI_NO3.p, HI_FI_fDOM.p, 
          HI_FI_SPC.p, HI_FI_turb.p, 
          ncol=2, nrow=2, common.legend = TRUE, legend="bottom")

############################################################################################################
################################ Hysteresis ###############################################################
############################################################################################################
### Storms #### 
# Read in FRCH storm 14 2019 fDOM 
FRCH_storm14_10_01_Q <- read_csv("~/Documents/Storms/Storm_Events/2019/FRCH/FRCH_storm14_10_01_Q.csv")
FRCH_storm14_10_01_fDOM <- read_csv("~/Documents/Storms/Storm_Events/2019/FRCH/FRCH_storm14_10_01_fDOM.csv")

# Read in MOOS storm 2018 8b fDOM
MOOS_storm7_08_27_Q <- read_csv("~/Documents/Storms/Storm_Events/2021/MOOS/MOOS_storm7_08_27_Q.csv")
MOOS_storm7_08_27_fDOM <- read_csv("~/Documents/Storms/Storm_Events/2021/MOOS/MOOS_storm7_08_27_fDOM.csv")

ggplot(FRCH_storm14_10_01_Q, aes(valuedatetime, datavalue)) +
  geom_point() +
  geom_point(aes(FRCH_storm14_10_01_fDOM$valuedatetime, FRCH_storm14_10_01_fDOM$datavalue, color = "brown"))

# normalize data #
dfList <- Filter(function(x) is(x, "data.frame"), mget(ls()))

for(i in 1:length(dfList)) {
  dfList[[i]][["datavalue"]] = 
    (dfList[[i]][["datavalue"]] - min(dfList[[i]][["datavalue"]], na.rm=T)) / (max(dfList[[i]][["datavalue"]], na.rm=T) - min(dfList[[i]][["datavalue"]], na.rm=T))
}
list2env(dfList ,.GlobalEnv)

#### fxn: plot hysteresis loop #
hyst_plot = function(dat_Q, dat_response, site, response_var, storm_num) {
  dat.p = ggplot(data = dat_Q, 
                 aes(x=(dat_Q$datavalue), 
                     y=(dat_response$datavalue), 
                     color = as.numeric(dat_Q$valuedatetime))) +
    geom_point() +
    scale_colour_gradientn(colors = rainbow(3)) +
    theme_classic() +
    theme(legend.position="none") + 
    theme(axis.text=element_text(size=20),
          axis.title=element_text(size=20,face="bold")) +
    ylab("Moderate PF fDOM")+
    xlab("Normalized Discharge") +
    ggtitle("")
  return(dat.p)
}

FRCH_storm14_10_01_fDOM.p = hyst_plot(FRCH_storm14_10_01_Q, FRCH_storm14_10_01_fDOM, "FRCH", "fDOM", "1001")
MOOS_storm7_08_27_fDOM.p = hyst_plot(MOOS_storm7_08_27_Q, MOOS_storm7_08_27_fDOM, "MOOS", "fDOM", "0827")

multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
  library(grid)
  
  # Make a list from the ... arguments and plotlist
  plots <- c(list(...), plotlist)
  
  numPlots = length(plots)
  
  # If layout is NULL, then use 'cols' to determine layout
  if (is.null(layout)) {
    # Make the panel
    # ncol: Number of columns of plots
    # nrow: Number of rows needed, calculated from # of cols
    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
                     ncol = cols, nrow = ceiling(numPlots/cols))
  }
  
  if (numPlots==1) {
    print(plots[[1]])
    
  } else {
    # Set up the page
    grid.newpage()
    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
    
    # Make each plot, in the correct location
    for (i in 1:numPlots) {
      # Get the i,j matrix positions of the regions that contain this subplot
      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
      
      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
                                      layout.pos.col = matchidx$col))
    }
  }
}

multiplot(FRCH_storm14_10_01_fDOM.p)
multiplot(MOOS_storm7_08_27_fDOM.p)
  



#


### Summary stats of storms ####
# run 09_modelling cont. script to get the HI/FI dataframes 

# this is telling me what percentage of storms fall in each quadrant and tells me how many cross 0 which are non-significant

#NO3
table(sign(HI_FI_NO3$Hyst_index))
which(HI_FI_NO3$HI_ymin < 0 & HI_FI_NO3$HI_ymax > 0 & HI_FI_NO3$Hyst_index > 0)
which(HI_FI_NO3$HI_ymin < 0 & HI_FI_NO3$HI_ymax > 0 & HI_FI_NO3$Hyst_index < 0)
table(sign(HI_FI_NO3$beta))

#fDOM
table(sign(HI_FI_fDOM$Hyst_index))
which(HI_FI_fDOM$HI_ymin < 0 & HI_FI_fDOM$HI_ymax > 0 & HI_FI_fDOM$Hyst_index > 0)
which(HI_FI_fDOM$HI_ymin < 0 & HI_FI_fDOM$HI_ymax > 0 & HI_FI_fDOM$Hyst_index < 0)
table(sign(HI_FI_fDOM$beta))

#SPC
table(sign(HI_FI_SPC$Hyst_index))
which(HI_FI_SPC$HI_ymin < 0 & HI_FI_SPC$HI_ymax > 0 & HI_FI_SPC$Hyst_index > 0)
which(HI_FI_SPC$HI_ymin < 0 & HI_FI_SPC$HI_ymax > 0 & HI_FI_SPC$Hyst_index < 0)
table(sign(HI_FI_SPC$beta))

#Turb
table(sign(HI_FI_turb$Hyst_index))
which(HI_FI_turb$HI_ymin < 0 & HI_FI_turb$HI_ymax > 0 & HI_FI_turb$Hyst_index > 0)
which(HI_FI_turb$HI_ymin < 0 & HI_FI_turb$HI_ymax > 0 & HI_FI_turb$Hyst_index < 0)
table(sign(HI_FI_turb$beta))



MOOS <- subset(HI_FI_NO3, site.ID == "MOOS")
HI_FI_NO3.p = 
  ggplot(MOOS, aes(beta, Hyst_index)) + geom_point(aes(colour=factor(year)), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("NO3-")+ 
  ylab("HI") +
  xlab("BETA") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20)) 
HI_FI_NO3.p




df %>% group_by(id) %>%  
  mutate(pos = sum(ff>0),
         neg = sum(ff<0))

table(sign(HI_FI_fDOM$Hyst_index))
#### marginal plots ####
# run 09_modelling cont. script to get the HI/FI plots out 
HI_FI_NO3.p = 
  ggplot(HI_FI_NO3, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") + theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("NO3-")+ 
  ylab("HI") +
  xlab("FI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20),legend.position = "none") 


ggMarginal(HI_FI_NO3.p, groupColour = TRUE, groupFill = TRUE) 

HI_FI_fDOM.p = 
  ggplot(HI_FI_fDOM, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") + theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("fDOM")+ 
  xlab("FI") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") 


ggMarginal(HI_FI_fDOM.p, groupColour = TRUE, groupFill = TRUE)

HI_FI_SPC.p = 
  ggplot(HI_FI_SPC, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") + theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("SPC")+ 
  xlab("FI") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") 


ggMarginal(HI_FI_SPC.p, groupColour = TRUE, groupFill = TRUE)

HI_FI_Turb.p = 
  ggplot(HI_FI_turb, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") + theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("Turb")+ 
  xlab("FI") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") 


ggMarginal(HI_FI_Turb.p, groupColour = TRUE, groupFill = TRUE)




HI_FI_NO3.p.beta = 
  ggplot(HI_FI_NO3, aes(beta, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") + theme_bw() +
  geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle(vn)+ 
  xlab("BETA") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")+
  labs(tag = "A)")


a <- ggMarginal(HI_FI_NO3.p.beta, groupColour = TRUE, groupFill = TRUE)

View(HI_FI_fDOM)
HI_FI_NO3$pf2 <- NA
HI_FI_NO3[c(1:16,27:56,62:69,85:109,128:144,169:178,185:191), 27] <- "Moderate"
HI_FI_NO3[c(17:26,57:61,70:84,110:127,145:168,179:184,192:202), 27] <- "High"

HI_FI_NO3.p.beta = 
  ggplot(HI_FI_NO3, aes(beta, Hyst_index)) + geom_point(aes(colour=factor(pf2), shape = site.ID), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") + theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle(vn)+ 
  xlab("BETA") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") 


a <- ggMarginal(HI_FI_NO3.p.beta, groupColour = TRUE, groupFill = TRUE)

ggsave(filename="HI_Beta.pdf",
       plot=a, 
       height=8, width=8,
       unit="in")

HI_FI_fDOM.p.beta = 
  ggplot(HI_FI_fDOM, aes(beta, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") + theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("fDOM")+ 
  xlab("BETA") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")+
  labs(tag = "B)") 
HI_FI_fDOM.p.beta

b <- ggMarginal(HI_FI_fDOM.p.beta, groupColour = TRUE, groupFill = TRUE) 

ggsave(filename="HI_Beta_fDOM.pdf",
       plot=b, 
       height=8, width=8,
       unit="in")


View(HI_FI_fDOM)
HI_FI_fDOM$pf2 <- NA
HI_FI_fDOM[c(1:18,30:56,63:72,87:112,130:142,163:180,185:189), 27] <- "Moderate"
HI_FI_fDOM[c(19:29,57:62,73:86,113:129,143:162,181:184,190:202), 27] <- "High"

which(HI_FI_fDOM$site.ID == "MOOS" | HI_FI_fDOM$site.ID == "VAUL")
HI_FI_fDOM$carbon <- NA
HI_FI_fDOM[c(9:18,46:56,73:79,104:112,143:154,171:180,190:195), 28] <- "High"
HI_FI_fDOM[c(1:8,19:45,57:72,80:103,113:142,155:170,181:189,196:202), 28] <- "Low"

HI_FI_fDOM.p.beta = 
  ggplot(HI_FI_fDOM, aes(beta, Hyst_index)) + geom_point(aes(colour=factor(pf2), shape = site.ID), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") + theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("fDOM")+ 
  xlab("BETA") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20)) 
HI_FI_fDOM.p.beta

ggMarginal(HI_FI_fDOM.p.beta, groupColour = TRUE, groupFill = TRUE) 

HI_FI_fDOM.p.beta = 
  ggplot(HI_FI_fDOM, aes(beta, Hyst_index)) + geom_point(aes(colour=factor(carbon), shape = site.ID), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") + theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("fDOM")+ 
  xlab("BETA") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20),legend.position = "none") 
HI_FI_fDOM.p.beta

ggMarginal(HI_FI_fDOM.p.beta, groupColour = TRUE, groupFill = TRUE) 

HI_FI_SPC.p.beta = 
  ggplot(HI_FI_SPC, aes(beta, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") + theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("SPC")+ 
  xlab("BETA") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")+
  labs(tag = "C)") 


c <- ggMarginal(HI_FI_SPC.p.beta, groupColour = TRUE, groupFill = TRUE) 


ggsave(filename="HI_Beta_SPC.pdf",
       plot=c, 
       height=8, width=8,
       unit="in")

HI_FI_Turb.p.beta = 
  ggplot(HI_FI_turb, aes(beta, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") + theme_bw() +
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("Turb")+ 
  xlab("BETA") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")+
  labs(tag = "D)") 


d <- ggMarginal(HI_FI_Turb.p.beta, groupColour = TRUE, groupFill = TRUE) 

ggsave(filename="HI_Beta_Turb.pdf",
       plot=d, 
       height=8, width=8,
       unit="in")

ggarrange(a,b, 
          c,d,
          ncol = 2, nrow = 2)


ggsave("~/Documents/Storms/Output_from_analysis/From_07_Modelling/Results_figures/TKH_Figures_meeting/HI_FI_BETA/FINAL_HI_BETA.pdf", width = 10, height = 10, device = "pdf")

ggsave(nameofplot, path = here("Storms", "Output_from_analysis", "From_07_Modelling", "Results_figures", "TKH_Figures_meeting", "HI_FI_BETA", file = "FINAL_HI_BETA.pdf", width= ))


### FOR TKH ####
# legend modification #
HI_FI_NO3.p.beta = 
  ggplot(HI_FI_NO3, aes(Beta_index, Hyst_index)) + 
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1) + 
  geom_errorbarh(aes(xmin=Beta_ymin, xmax=Beta_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  geom_point(aes(colour=factor(site.ID), shape = pf), size = 4) +
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +
  theme_bw()+
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle(vn)+ 
  xlab("BETA") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20)) + 
  labs(tag = "A)") +
  scale_shape_discrete(labels = c("High", "Moderate")) +
  theme(legend.title = element_blank(), legend.position = "left")

HI_FI_NO3.p.beta

HI_FI_fDOM.p.beta = 
  ggplot(HI_FI_fDOM, aes(Beta_index, Hyst_index)) + 
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_errorbarh(aes(xmin=Beta_ymin, xmax=Beta_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  theme_bw()+
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("fDOM")+ 
  xlab("BETA") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20)) + 
  labs(tag = "B)") +
  scale_shape_discrete(labels = c("High", "Moderate")) +
  theme(legend.title = element_blank(), legend.position = "left") 

HI_FI_fDOM.p.beta

HI_FI_SPC.p.beta = 
  ggplot(HI_FI_SPC, aes(Beta_index, Hyst_index)) + 
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1) +
  geom_errorbarh(aes(xmin=Beta_ymin, xmax=Beta_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  geom_point(aes(colour=factor(site.ID), shape = pf), size = 3)+
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  theme_bw()+
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("SPC")+ 
  xlab("BETA") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20)) + 
  labs(tag = "C)") +
  scale_shape_discrete(labels = c("High", "Moderate")) +
  theme(legend.title = element_blank(), legend.position = "left") 

HI_FI_SPC.p.beta

HI_FI_Turb.p.beta = 
  ggplot(HI_FI_turb, aes(Beta_index, Hyst_index)) + 
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1) +
  geom_errorbarh(aes(xmin=Beta_ymin, xmax=Beta_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
  geom_point(aes(colour=factor(site.ID), shape = pf), size = 4) +
  geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
  theme_bw()+
  ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
  ggtitle("Turb")+ 
  xlab("BETA") +
  ylab("HI") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20)) + 
  labs(tag = "D)") +
  scale_shape_discrete(labels = c("High", "Moderate")) +
  theme(legend.title = element_blank(), legend.position = "left") 

HI_FI_Turb.p.beta

a <- ggMarginal(HI_FI_NO3.p.beta + theme(legend.position = "left"), groupColour = TRUE, groupFill = TRUE) 

b <- ggMarginal(HI_FI_fDOM.p.beta, groupColour = TRUE, groupFill = TRUE) 

c <- ggMarginal(HI_FI_SPC.p.beta, groupColour = TRUE, groupFill = TRUE) 

d <- ggMarginal(HI_FI_Turb.p.beta, groupColour = TRUE, groupFill = TRUE) 


e <- ggarrange(a, b,
               c, d)
get_legend()
e

ggsave(filename="TKH_HI_Beta.pdf",
       plot=e, 
       height=10, width=10,
       unit="in")

### Time Series ### 
HI.fDOM.doy.pl <-
  ggplot(HI_FI_fDOM, aes(doy, Hyst_index)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  ylab("fDOM\nHysteresis Index") +
  xlab("day of year") +
  facet_grid(rows=vars(year)) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size=20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )

HI.fDOM.doy.pl

HI.NO3.doy.pl <-
  ggplot(HI_FI_NO3, aes(doy, Hyst_index)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  ylab(expression(atop(N*O[3]^"-", "Hysteresis Index"))) +
  xlab("day of year") +
  facet_grid(rows=vars(year)) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size=20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )

HI.NO3.doy.pl

HI.SPC.doy.pl <-
  ggplot(HI_FI_SPC, aes(doy, Hyst_index)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  ylab("SPC\nHysteresis Index") +
  xlab("day of year") +
  facet_grid(rows=vars(year)) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size=20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )

HI.SPC.doy.pl

HI.turb.doy.pl <-
  ggplot(HI_FI_turb, aes(doy, Hyst_index)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+ 
  geom_point(aes(color = site.ID), size = 2) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  ylab("TURB\nHysteresis Index") +
  xlab("day of year") +
  facet_grid(rows=vars(year)) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size=20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )

HI.turb.doy.pl
#### 2018 #### 
MOOSstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2018/All_Sites/", 
                                  recursive=F, 
                                  pattern="MOOS", 
                                  full.names=TRUE)

MOOS_storms<-do.call("rbind", lapply(MOOSstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

MOOS_storms$storm.num = c(rep("storm1", 58),
                          rep("storm10", 432),
                          rep("storm11a", 74),
                          rep("storm11b", 36),
                          rep("storm12", 310),
                          rep("storm2a", 74),
                          rep("storm2b", 162),
                          rep("storm2c", 192),
                          rep("storm3", 240),
                          rep("storm4", 244),
                          rep("storm5", 276),
                          rep("storm6", 332),
                          rep("storm7", 124),
                          rep("storm8a", 80),
                          rep("storm8b", 96),
                          rep("storm9", 108))

MOOS_storms$DateTime <- ymd_hms(MOOS_storms$DateTime)

MOOS_storms_fDOM <- MOOS_storms[, c(2,4,6,11)]

ggplot(data = MOOS_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

ggplot(data = MOOS_storms_fDOM, 
                         aes(x = Q, 
                             y = fDOM.QSU,
                             color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_fDOM <- MOOS_storms_fDOM %>% filter(storm.num != "storm1" & storm.num != "storm4") # removing storm 3 and 4 due to lack of Q increase
MOOS_storms_fDOM <- subset(MOOS_storms_fDOM, MOOS_storms_fDOM$fDOM.QSU > 50)
moos.2018.fdom <- ggplot(data = MOOS_storms_fDOM, 
                         aes(x = Q, 
                             y = fDOM.QSU,
                             color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_NO3 <- MOOS_storms[, c(2,4,7,11)]

ggplot(data = MOOS_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

MOOS_storms_NO3 <- subset(MOOS_storms_NO3, MOOS_storms_NO3$nitrateuM > 18)
MOOS_storms_NO3 <- subset(MOOS_storms_NO3, MOOS_storms_NO3$nitrateuM < 45)
MOOS_storms_NO3 <- MOOS_storms_NO3 %>% filter(storm.num != "storm1" & storm.num != "storm4") # removing storm 3 and 4 due to lack of Q increase

moos.2018.no3 <- ggplot(data = MOOS_storms_NO3, 
                        aes(x = Q, 
                            y = nitrateuM,
                            color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_SPC <- MOOS_storms[, c(2,4,8,11)]

ggplot(data = MOOS_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

MOOS_storms_SPC <- subset(MOOS_storms_SPC, MOOS_storms_SPC$SpCond.uScm > 70)
MOOS_storms_SPC <- MOOS_storms_SPC %>% filter(storm.num != "storm1" & storm.num != "storm4") # removing storm 3 and 4 due to lack of Q increase


moos.2018.spc <- ggplot(data = MOOS_storms_SPC, 
                        aes(x = Q, 
                            y = SpCond.uScm,
                            color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 




MOOS_storms_Turb <- MOOS_storms[, c(2,4,9,11)]

ggplot(data = MOOS_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

MOOS_storms_Turb <- subset(MOOS_storms_Turb, MOOS_storms_Turb$Turbidity.FNU < 1000)
MOOS_storms_Turb <- MOOS_storms_Turb %>% filter(storm.num != "storm1" & storm.num != "storm4") # removing storm 3 and 4 due to lack of Q increase


moos.2018.turb <- ggplot(data = MOOS_storms_Turb, 
                         aes(x = Q, 
                             y = Turbidity.FNU,
                             color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

# FRCH # 
FRCHstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2018/All_Sites/", 
                                  recursive=F, 
                                  pattern="FRCH", 
                                  full.names=TRUE)

FRCH_storms<-do.call("rbind", lapply(FRCHstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

FRCH_storms$storm.num = c(rep("storm1", 142),
                          rep("storm10", 704),
                          rep("storm11a", 91),
                          rep("storm11b", 264),
                          rep("storm2a", 230),
                          rep("storm2b", 190),
                          rep("storm3", 212),
                          rep("storm4a", 72),
                          rep("storm4b", 383),
                          rep("storm5", 331),
                          rep("storm6", 303),
                          rep("storm7", 119),
                          rep("storm8a", 79),
                          rep("storm8b", 95),
                          rep("storm9", 115)) # naming each storm by the number of storm 

FRCH_storms$DateTime <- ymd_hms(FRCH_storms$DateTime)

FRCH_storms_fDOM <- FRCH_storms[, c(2,4,6,11)]

ggplot(data = FRCH_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_fDOM <- subset(FRCH_storms_fDOM, FRCH_storms_fDOM$fDOM.QSU > 25)
FRCH_storms_fDOM <- FRCH_storms_fDOM %>% filter(storm.num != "storm1" & storm.num != "storm4b" & storm.num != "storm11b") # removing storm 7 8,9,9b due to lack of Q increase

frch.2018.fdom <- ggplot(data = FRCH_storms_fDOM, 
                         aes(x = Q, 
                             y = fDOM.QSU,
                             color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_NO3 <- FRCH_storms[, c(2,4,7,11)]

ggplot(data = FRCH_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

ggplot(data = FRCH_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

FRCH_storms_NO3 <- subset(FRCH_storms_NO3, FRCH_storms_NO3$nitrateuM > 15)
FRCH_storms_NO3 <- FRCH_storms_NO3 %>% filter(storm.num != "storm1" & storm.num != "storm4b" & storm.num != "storm11b") # removing storm 7 8,9,9b due to lack of Q increase

frch.2018.no3 <- ggplot(data = FRCH_storms_NO3, 
                        aes(x = Q, 
                            y = nitrateuM,
                            color = storm.num)) +
  geom_point() +
  theme_bw() 

FRCH_storms_SPC <- FRCH_storms[, c(2,4,8,11)]


ggplot(data = FRCH_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_SPC <- subset(FRCH_storms_SPC, FRCH_storms_SPC$SpCond.uScm > 15)
FRCH_storms_SPC <- FRCH_storms_SPC %>% filter(storm.num != "storm1" & storm.num != "storm4b" & storm.num != "storm11b") # removing storm 7 8,9,9b due to lack of Q increase

frch.2018.spc <- ggplot(data = FRCH_storms_SPC, 
                        aes(x = Q, 
                            y = SpCond.uScm,
                            color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_Turb <- FRCH_storms[, c(2,4,9,11)]

ggplot(data = FRCH_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_Turb <- subset(FRCH_storms_Turb, FRCH_storms_Turb$Turbidity.FNU > 15)
FRCH_storms_Turb <- subset(FRCH_storms_Turb, FRCH_storms_Turb$Turbidity.FNU < 200)

FRCH_storms_Turb <- FRCH_storms_Turb %>% filter(storm.num != "storm1" & storm.num != "storm4b" & storm.num != "storm11b") # removing storm 7 8,9,9b due to lack of Q increase


frch.2018.turb <- ggplot(data = FRCH_storms_Turb, 
                         aes(x = Q, 
                             y = Turbidity.FNU,
                             color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

# CARI # 
CARIstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2018/All_Sites/", 
                                  recursive=F, 
                                  pattern="CARI", 
                                  full.names=TRUE)

CARI_storms<-do.call("rbind", lapply(CARIstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

CARI_storms$storm.num = c(rep("storm1", 4769),
                          rep("storm10", 3739),
                          rep("storm11", 2879),
                          rep("storm12a", 6299),
                          rep("storm12b", 7762),
                          rep("storm2", 2729),
                          rep("storm3", 1776),
                          rep("storm4a", 1229),
                          rep("storm4b", 2729),
                          rep("storm5a", 1169),
                          rep("storm5b", 1829),
                          rep("storm5c", 8639),
                          rep("storm6", 9684),
                          rep("storm7", 2519),
                          rep("storm8", 2879),
                          rep("storm9", 5399))

CARI_storms$DateTime <- ymd_hms(CARI_storms$DateTime)

CARI_storms_fDOM <- CARI_storms[, c(2,4,5,10)]

CARI_storms_fDOM$DateTime = lubridate::round_date(CARI_storms_fDOM$DateTime, "15 minutes") 
CARI_storms_fDOM <- CARI_storms_fDOM[!duplicated(CARI_storms_fDOM$DateTime), ]


ggplot(data = CARI_storms_fDOM, 
       aes(x = Discharge, 
           y = fDOM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_fDOM <- subset(CARI_storms_fDOM, CARI_storms_fDOM$fDOM > 10)
CARI_storms_fDOM <- CARI_storms_fDOM %>% filter(storm.num != "storm2" & storm.num != "storm7")  #removing storm 1:3 due to lack of Q increase

cari.2018.fdom <- ggplot(data = CARI_storms_fDOM, 
                         aes(x = Discharge, 
                             y = fDOM,
                             color = storm.num)) +
  geom_point() +
  theme_bw() 

CARI_storms_NO3 <- CARI_storms[, c(2,4,6,10)]

ggplot(data = CARI_storms_NO3, 
       aes(x = Discharge, 
           y = NO3,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)


CARI_storms_NO3 <- CARI_storms_NO3 %>% filter(storm.num != "storm2" & storm.num != "storm7" & storm.num != "storm3" & storm.num != "storm5") # removing storm 1:3 due to lack of Q increase

cari.2018.no3 <-ggplot(data = CARI_storms_NO3, 
                       aes(x = Discharge, 
                           y = NO3,
                           color = storm.num)) +
  geom_point() +
  theme_bw() 

CARI_storms_SPC <- CARI_storms[, c(2,4,7,10)]
CARI_storms_SPC$DateTime = lubridate::round_date(CARI_storms_SPC$DateTime, "15 minutes") 
CARI_storms_SPC <- CARI_storms_SPC[!duplicated(CARI_storms_SPC$DateTime), ]

ggplot(data = CARI_storms_SPC, 
       aes(x = Discharge, 
           y = SpCond,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_SPC <- CARI_storms_SPC %>% filter(storm.num != "storm2" & storm.num != "storm7" & storm.num != "storm3" & storm.num != "storm5") # removing storm 1:3 due to lack of Q increase

cari.2018.spc <- ggplot(data = CARI_storms_SPC, 
                        aes(x = Discharge, 
                            y = SpCond,
                            color = storm.num)) +
  geom_point() +
  theme_bw() 

CARI_storms_Turb <- CARI_storms[, c(2,4,8,10)]
CARI_storms_Turb$DateTime = lubridate::round_date(CARI_storms_Turb$DateTime, "15 minutes") 
CARI_storms_Turb <- CARI_storms_Turb[!duplicated(CARI_storms_Turb$DateTime), ]


ggplot(data = CARI_storms_Turb, 
       aes(x = Discharge, 
           y = Turb,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_Turb <- subset(CARI_storms_Turb, CARI_storms_Turb$Turb < 200)
CARI_storms_Turb <- CARI_storms_Turb %>% filter(storm.num != "storm2" & storm.num != "storm7" & storm.num != "storm3" & storm.num != "storm5") # removing storm 1:3 due to lack of Q increase

cari.2018.turb <- ggplot(data = CARI_storms_Turb, 
                         aes(x = Discharge, 
                             y = Turb,
                             color = storm.num)) +
  geom_point() +
  theme_bw() 

#### 2019 ####
MOOSstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2019/All_Sites/", 
                                  recursive=F, 
                                  pattern="MOOS", 
                                  full.names=TRUE)

MOOS_storms<-do.call("rbind", lapply(MOOSstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

MOOS_storms$storm.num = c(rep("storm1", 702),
                          rep("storm3", 250),
                          rep("storm4", 256),
                          rep("storm5", 266),
                          rep("storm6a", 114),
                          rep("storm6b", 95),
                          rep("storm6c", 223),
                          rep("storm6d", 479),
                          rep("storm7a", 166),
                          rep("storm7b", 84),
                          rep("storm7c", 430),
                          rep("storm8", 174),
                          rep("storm9", 530))

MOOS_storms$DateTime <- ymd_hms(MOOS_storms$DateTime)

MOOS_storms_fDOM <- MOOS_storms[, c(3,4,6,11)]

ggplot(data = MOOS_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

moos.2019.fdom <- ggplot(data = MOOS_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU.mn,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_fDOM <- MOOS_storms_fDOM %>% filter(storm.num != "storm3" & storm.num != "storm4") # removing storm 3 and 4 due to lack of Q increase

moos.2019.fdom <- ggplot(data = MOOS_storms_fDOM, 
                         aes(x = Q, 
                             y = fDOM.QSU.mn,
                             color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_NO3 <- MOOS_storms[, c(3,4,7,11)]

ggplot(data = MOOS_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

MOOS_storms_NO3 <- subset(MOOS_storms_NO3, MOOS_storms_NO3$nitrateuM > 18)
MOOS_storms_NO3 <- subset(MOOS_storms_NO3, MOOS_storms_NO3$nitrateuM < 45)

moos.2019.no3 <- ggplot(data = MOOS_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_SPC <- MOOS_storms[, c(3,4,8,11)]

ggplot(data = MOOS_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

MOOS_storms_SPC <- subset(MOOS_storms_SPC, MOOS_storms_SPC$SpCond.uScm.mn > 70)


moos.2019.spc <- ggplot(data = MOOS_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm.mn,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_SPC <- MOOS_storms_SPC %>% filter(storm.num != "storm3" & storm.num != "storm4") # removing storm 3 and 4 due to lack of Q increase

moos.2019.spc <- ggplot(data = MOOS_storms_SPC, 
                        aes(x = Q, 
                            y = SpCond.uScm.mn,
                            color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_Turb <- MOOS_storms[, c(3,4,9,11)]

ggplot(data = MOOS_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

MOOS_storms_Turb <- MOOS_storms_Turb %>% filter(storm.num != "storm3" & storm.num != "storm4") # removing storm 3 and 4 due to lack of Q increase


moos.2019.turb <- ggplot(data = MOOS_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU.mn,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

# FRCH # 
FRCHstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2019/All_Sites/", 
                                  recursive=F, 
                                  pattern="FRCH", 
                                  full.names=TRUE)

FRCH_storms<-do.call("rbind", lapply(FRCHstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

FRCH_storms$storm.num = c(rep("storm1", 993),
                          rep("storm10a", 121),
                          rep("storm10b", 95),
                          rep("storm10c", 207),
                          rep("storm11", 479),
                          rep("storm12a", 183),
                          rep("storm12b", 67),
                          rep("storm12c", 511),
                          rep("storm12d", 99),
                          rep("storm12e", 127),
                          rep("storm13", 391),
                          rep("storm14", 631),
                          rep("storm2", 165),
                          rep("storm3", 201),
                          rep("storm4", 193),
                          rep("storm5", 229),
                          rep("storm6", 257),
                          rep("storm7", 133),
                          rep("storm8", 105),
                          rep("storm9a", 61),
                          rep("storm9b", 149))

FRCH_storms$DateTime <- ymd_hms(FRCH_storms$DateTime)

FRCH_storms_fDOM <- FRCH_storms[, c(3,4,6,11)]

ggplot(data = FRCH_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

frch.2019.fdom <- ggplot(data = FRCH_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU.mn,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_fDOM <- FRCH_storms_fDOM %>% filter(storm.num != "storm6" & storm.num != "storm7" & storm.num != "storm8" & storm.num != "storm9a" & storm.num != "storm9b") # removing storm 7 8,9,9b due to lack of Q increase

frch.2019.fdom <- ggplot(data = FRCH_storms_fDOM, 
                         aes(x = Q, 
                             y = fDOM.QSU.mn,
                             color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_NO3 <- FRCH_storms[, c(3,4,7,11)]

ggplot(data = FRCH_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

ggplot(data = FRCH_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

which(FRCH_storms_NO3$nitrateuM > 60)
FRCH_storms_NO3 <- FRCH_storms_NO3[-c(92,104,1368:1372,1374,1449:1451,1744,1745,2080:2087,2158,2160,2322),] # removing outliers 

frch.2019.no3 <- ggplot(data = FRCH_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

FRCH_storms_SPC <- FRCH_storms[, c(3,4,8,11)]


ggplot(data = FRCH_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_SPC <- FRCH_storms_SPC %>% filter(storm.num != "storm6" & storm.num != "storm7" & storm.num != "storm8" & storm.num != "storm9a" & storm.num != "storm9b") # removing storm 7 8,9,9b due to lack of Q increase

frch.2019.spc <- ggplot(data = FRCH_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm.mn,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_Turb <- FRCH_storms[, c(3,4,9,11)]

ggplot(data = FRCH_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_Turb <- FRCH_storms_Turb %>% filter(storm.num != "storm6" & storm.num != "storm7" & storm.num != "storm8" & storm.num != "storm9a" & storm.num != "storm9b") # removing storm 7 8,9,9b due to lack of Q increase

frch.2019.turb <- ggplot(data = FRCH_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU.mn,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 


# POKE # 
POKEstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2019/All_Sites/", 
                                  recursive=F, 
                                  pattern="POKE", 
                                  full.names=TRUE)

POKE_storms<-do.call("rbind", lapply(POKEstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

POKE_storms$storm.num = c(rep("storm1", 103),
                          rep("storm2", 91),
                          rep("storm3", 147),
                          rep("storm4", 115),
                          rep("storm5a", 87),
                          rep("storm5b", 239),
                          rep("storm5c", 111),
                          rep("storm5d", 99),
                          rep("storm6a", 51),
                          rep("storm6b", 227),
                          rep("storm7", 267),
                          rep("storm8", 95),
                          rep("storm9", 211))

POKE_storms$DateTime <- ymd_hms(POKE_storms$DateTime)

POKE_storms_fDOM <- POKE_storms[, c(3,4,6,11)]

ggplot(data = POKE_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

poke.2019.fdom <- ggplot(data = POKE_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU.mn,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

POKE_storms_fDOM <- POKE_storms_fDOM %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm4" & storm.num != "storm8") # removing storm 1:4,8 due to lack of Q increase

poke.2019.fdom <- ggplot(data = POKE_storms_fDOM, 
                         aes(x = Q, 
                             y = fDOM.QSU.mn,
                             color = storm.num)) +
  geom_point() +
  theme_bw() 

POKE_storms_NO3 <- POKE_storms[, c(3,4,7,11)]

ggplot(data = POKE_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

POKE_storms_NO3 <- POKE_storms_NO3 %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm4" & storm.num != "storm8") # removing storm 1:4,8 due to lack of Q increase

poke.2019.no3 <- ggplot(data = POKE_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

POKE_storms_SPC <- POKE_storms[, c(3,4,8,11)]

ggplot(data = POKE_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

POKE_storms_SPC <- POKE_storms_SPC %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm4" & storm.num != "storm8") # removing storm 1:4,8 due to lack of Q increase


poke.2019.spc <- ggplot(data = POKE_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

POKE_storms_Turb <- POKE_storms[, c(3,4,9,11)]

ggplot(data = POKE_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

POKE_storms_Turb <- POKE_storms_Turb %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm4" & storm.num != "storm8") # removing storm 1:4,8 due to lack of Q increase

poke.2019.turb <- ggplot(data = POKE_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

# VAUL # 
VAULstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2019/All_Sites/", 
                                  recursive=F, 
                                  pattern="VAUL", 
                                  full.names=TRUE)

VAUL_storms<-do.call("rbind", lapply(VAULstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

VAUL_storms$storm.num = c(rep("storm1", 191),
                          rep("storm2", 207),
                          rep("storm3", 191),
                          rep("storm4a", 83),
                          rep("storm4b", 219),
                          rep("storm4c", 707),
                          rep("storm5", 275),
                          rep("storm6", 263),
                          rep("storm7", 107),
                          rep("storm8a", 167),
                          rep("storm8b", 223),
                          rep("storm8c", 479))

VAUL_storms$DateTime <- ymd_hms(VAUL_storms$DateTime)

VAUL_storms_fDOM <- VAUL_storms[, c(3,4,6,11)]

ggplot(data = VAUL_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_fDOM <- VAUL_storms_fDOM %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm7") # removing storm 1:3,7 due to lack of Q increase

vaul.2019.fdom <- ggplot(data = VAUL_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

VAUL_storms_NO3 <- VAUL_storms[, c(3,4,7,11)]

ggplot(data = VAUL_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_NO3 <- subset(VAUL_storms_NO3, VAUL_storms_NO3$nitrateuM < 50)

VAUL_storms_NO3 <- VAUL_storms_NO3 %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm7") # removing storm 1:3,7 due to lack of Q increase

vaul.2019.no3 <- ggplot(data = VAUL_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

VAUL_storms_SPC <- VAUL_storms[, c(3,4,8,11)]

ggplot(data = VAUL_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_SPC <- VAUL_storms_SPC %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm7") # removing storm 1:3,7 due to lack of Q increase

vaul.2019.spc <- ggplot(data = VAUL_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

VAUL_storms_Turb <- VAUL_storms[, c(3,4,9,11)]

ggplot(data = VAUL_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_Turb <- subset(VAUL_storms_Turb, VAUL_storms_Turb$Turbidity.FNU.mn < 500)
VAUL_storms_Turb <- VAUL_storms_Turb %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm7") # removing storm 1:3,7 due to lack of Q increase

vaul.2019.turb <- ggplot(data = VAUL_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

# STRT # 
STRTstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2019/All_Sites/", 
                                  recursive=F, 
                                  pattern="STRT", 
                                  full.names=TRUE)

STRT_storms<-do.call("rbind", lapply(STRTstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

STRT_storms$storm.num = c(rep("storm1", 638),
                          rep("storm2", 274),
                          rep("storm3a", 1035),
                          rep("storm3b", 286),
                          rep("storm3c", 174),
                          rep("storm4", 466),
                          rep("storm5", 98),
                          rep("storm6", 246),
                          rep("storm7", 218),
                          rep("storm7b", 266),
                          rep("storm7c", 258))
STRT_storms$DateTime <- ymd_hms(STRT_storms$DateTime)

STRT_storms_fDOM <- STRT_storms[, c(3,4,6,11)]

ggplot(data = STRT_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

strt.2019.fdom <- ggplot(data = STRT_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU.mn,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

STRT_storms_NO3 <- STRT_storms[, c(3,4,7,11)]

ggplot(data = STRT_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

strt.2019.no3 <- ggplot(data = STRT_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

STRT_storms_SPC <- STRT_storms[, c(3,4,8,11)]

ggplot(data = STRT_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

strt.2019.spc <- ggplot(data = STRT_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm.mn,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

STRT_storms_Turb <- STRT_storms[, c(3,4,9,11)]

ggplot(data = STRT_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU.mn,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

strt.2019.turb <- ggplot(data = STRT_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU.mn,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw()

# CARI # 
CARIstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2019/All_Sites/", 
                                  recursive=F, 
                                  pattern="CARI", 
                                  full.names=TRUE)

CARI_storms<-do.call("rbind", lapply(CARIstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

CARI_storms$storm.num = c(rep("storm1", 371),
                          rep("storm2", 143),
                          rep("storm3", 72),
                          rep("storm4", 0),
                          rep("storm5", 135),
                          rep("storm6a", 83),
                          rep("storm6b", 235),
                          rep("storm6c", 426),
                          rep("storm6d", 135),
                          rep("storm7a", 51),
                          rep("storm7b", 217),
                          rep("storm8", 267))
CARI_storms$DateTime <- ymd_hms(CARI_storms$DateTime)

CARI_storms_fDOM <- CARI_storms[, c(2,4,6,10)]

ggplot(data = CARI_storms_fDOM, 
       aes(x = Discharge, 
           y = fDOM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_fDOM <- subset(CARI_storms_fDOM, CARI_storms_fDOM$fDOM < 200)
CARI_storms_fDOM <- CARI_storms_fDOM %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm5") # removing storm 1:3 due to lack of Q increase

cari.2019.fdom <- ggplot(data = CARI_storms_fDOM, 
       aes(x = Discharge, 
           y = fDOM,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

CARI_storms_NO3 <- CARI_storms[, c(2,4,5,10)]

 ggplot(data = CARI_storms_NO3, 
       aes(x = Discharge, 
           y = NO3,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_NO3 <- subset(CARI_storms_NO3, CARI_storms_NO3$NO3 < 50)
CARI_storms_NO3 <- CARI_storms_NO3 %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm5") # removing storm 1:3 due to lack of Q increase

cari.2019.no3 <-ggplot(data = CARI_storms_NO3, 
       aes(x = Discharge, 
           y = NO3,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

CARI_storms_SPC <- CARI_storms[, c(2,4,7,10)]

ggplot(data = CARI_storms_SPC, 
       aes(x = Discharge, 
           y = SpCond,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_SPC <- CARI_storms_SPC %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm5") # removing storm 1:3 due to lack of Q increase

cari.2019.spc <- ggplot(data = CARI_storms_SPC, 
       aes(x = Discharge, 
           y = SpCond,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

CARI_storms_Turb <- CARI_storms[, c(2,4,8,10)]

ggplot(data = CARI_storms_Turb, 
       aes(x = Discharge, 
           y = Turb,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_Turb <- subset(CARI_storms_Turb, CARI_storms_Turb$Turb < 200)
CARI_storms_Turb <- CARI_storms_Turb %>% filter(storm.num != "storm1" & storm.num != "storm2" & storm.num != "storm3" & storm.num != "storm5") # removing storm 1:3 due to lack of Q increase

cari.2019.turb <- ggplot(data = CARI_storms_Turb, 
       aes(x = Discharge, 
           y = Turb,
           color = storm.num)) +
  geom_point() +
  theme_bw() 

multiplot(STRT_storm6_09_20_NO3.p,
          CARI_storm6b_08_03_NO3.p)


#### 2020 ####
MOOSstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2020/AllSites/", 
                                  recursive=F, 
                                  pattern="MOOS", 
                                  full.names=TRUE)

MOOS_storms<-do.call("rbind", lapply(MOOSstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

MOOS_storms$storm.num = c(rep("storm1", 691),
                          rep("storm2", 327),
                          rep("storm3", 129),
                          rep("storm4", 321),
                          rep("storm5", 252),
                          rep("storm6a", 108),
                          rep("storm6b", 288),
                          rep("storm7a", 276),
                          rep("storm7b", 186),
                          rep("storm8", 195),
                          rep("storm9", 405))

MOOS_storms$DateTime <- ymd_hms(MOOS_storms$DateTime)

MOOS_storms_fDOM <- MOOS_storms[, c(3,4,6,11)]

ggplot(data = MOOS_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

MOOS_storms_fDOM <- subset(MOOS_storms_fDOM, MOOS_storms_fDOM$fDOM.QSU > 10)

moos.2020.fdom <- ggplot(data = MOOS_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_NO3 <- MOOS_storms[, c(3,4,7,11)]

ggplot(data = MOOS_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

MOOS_storms_NO3 <- subset(MOOS_storms_NO3, MOOS_storms_NO3$nitrateuM > 18)
MOOS_storms_NO3 <- subset(MOOS_storms_NO3, MOOS_storms_NO3$nitrateuM < 45)
MOOS_storms_NO3 <- MOOS_storms_NO3 %>% filter(storm.num != "storm9") # removing storm 9 due errant nitrate data

moos.2020.no3 <- ggplot(data = MOOS_storms_NO3, 
aes(x = Q, 
    y = nitrateuM,
    color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_SPC <- MOOS_storms[, c(3,4,8,11)]

ggplot(data = MOOS_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

MOOS_storms_SPC <- subset(MOOS_storms_SPC, MOOS_storms_SPC$SpCond.uScm > 50)


moos.2020.spc <- ggplot(data = MOOS_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_Turb <- MOOS_storms[, c(3,4,9,11)]

ggplot(data = MOOS_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)


moos.2020.turb <- ggplot(data = MOOS_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

# FRCH # 
FRCHstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2020/AllSites/", 
                                  recursive=F, 
                                  pattern="FRCH", 
                                  full.names=TRUE)

FRCH_storms<-do.call("rbind", lapply(FRCHstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

FRCH_storms$storm.num = c(rep("storm1", 487),
                          rep("storm10a", 255),
                          rep("storm10b", 439),
                          rep("storm11", 91),
                          rep("storm12", 67),
                          rep("storm13", 211),
                          rep("storm2", 123),
                          rep("storm3a", 163),
                          rep("storm3b", 435),
                          rep("storm3c", 159),
                          rep("storm4a", 187),
                          rep("storm4b", 203),
                          rep("storm5", 62),
                          rep("storm6", 103),
                          rep("storm7", 339),
                          rep("storm8", 383),
                          rep("storm9a", 139),
                          rep("storm9b", 289))

FRCH_storms$DateTime <- ymd_hms(FRCH_storms$DateTime)

FRCH_storms_fDOM <- FRCH_storms[, c(3,4,6,11)]

ggplot(data = FRCH_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_fDOM <- subset(FRCH_storms_fDOM, FRCH_storms_fDOM$fDOM.QSU > 20)

frch.2020.fdom <- ggplot(data = FRCH_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_fDOM <- FRCH_storms_fDOM %>% filter(storm.num != "storm5") # removing storm 5 due no response in Q 

frch.2020.fdom <- ggplot(data = FRCH_storms_fDOM, 
                         aes(x = Q, 
                             y = fDOM.QSU,
                             color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_NO3 <- FRCH_storms[, c(3,4,7,11)]

ggplot(data = FRCH_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_NO3 <- subset(FRCH_storms_NO3, FRCH_storms_NO3$nitrateuM > 12)
FRCH_storms_NO3 <- subset(FRCH_storms_NO3, FRCH_storms_NO3$nitrateuM < 60)
FRCH_storms_NO3 <- FRCH_storms_NO3 %>% filter(storm.num != "storm5") # removing storm 5 due no response in Q 

frch.2020.no3 <- ggplot(data = FRCH_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_SPC <- FRCH_storms[, c(3,4,8,11)]

ggplot(data = FRCH_storms_SPC, 
       aes(x = Q, 
           y = SpCond.µS.cm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_SPC <- subset(FRCH_storms_SPC, FRCH_storms_SPC$SpCond.µS.cm > 20)
FRCH_storms_SPC <- FRCH_storms_SPC %>% filter(storm.num != "storm5") # removing storm 5 due no response in Q 


frch.2020.spc <- ggplot(data = FRCH_storms_SPC, 
       aes(x = Q, 
           y = SpCond.µS.cm,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_Turb <- FRCH_storms[, c(3,4,9,11)]

ggplot(data = FRCH_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_Turb <- FRCH_storms_Turb %>% filter(storm.num != "storm5") # removing storm 5 due no response in Q 

frch.2020.turb <- ggplot(data = FRCH_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 


# POKE # 
POKEstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2020/AllSites/", 
                                  recursive=F, 
                                  pattern="POKE", 
                                  full.names=TRUE)

POKE_storms<-do.call("rbind", lapply(POKEstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

POKE_storms$storm.num = c(rep("storm1", 95),
                          rep("storm10", 99),
                          rep("storm11", 199),
                          rep("storm12", 307),
                          rep("storm13", 87),
                          rep("storm14", 383),
                          rep("storm15", 335),
                          rep("storm16", 95),
                          rep("storm17", 119),
                          rep("storm18", 95),
                          rep("storm19", 135),
                          rep("storm2", 87),
                          rep("storm20", 139),
                          rep("storm21", 219),
                          rep("storm22a", 107),
                          rep("storm3", 120),
                          rep("storm4a", 98),
                          rep("storm4b", 95),
                          rep("storm4c", 159),
                          rep("storm5", 219),
                          rep("storm6", 95),
                          rep("storm7", 127),
                          rep("storm8", 135),
                          rep("storm9", 263))

POKE_storms$DateTime <- ymd_hms(POKE_storms$DateTime)

POKE_storms_fDOM <- POKE_storms[, c(3,4,6,11)]

ggplot(data = POKE_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.RFU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

POKE_storms_fDOM <- POKE_storms_fDOM %>% filter(storm.num != "storm1" & storm.num != "storm6" & storm.num != "storm10" & storm.num != "storm16") # removing storm 5 due no response in Q 

poke.2020.fdom <- ggplot(data = POKE_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.RFU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

POKE_storms_NO3 <- POKE_storms[, c(3,4,7,11)]

ggplot(data = POKE_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

POKE_storms_NO3 <- subset(POKE_storms_NO3, POKE_storms_NO3$nitrateuM > 20)
POKE_storms_NO3 <- subset(POKE_storms_NO3, POKE_storms_NO3$nitrateuM < 40)
POKE_storms_NO3 <- POKE_storms_NO3 %>% filter(storm.num != "storm1" & storm.num != "storm6" & storm.num != "storm10" & storm.num != "storm16") # removing storm 5 due no response in Q 


poke.2020.no3 <- ggplot(data = POKE_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

POKE_storms_SPC <- POKE_storms[, c(3,4,8,11)]

ggplot(data = POKE_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

POKE_storms_SPC <- POKE_storms_SPC %>% filter(storm.num != "storm1" & storm.num != "storm6" & storm.num != "storm10" & storm.num != "storm16") # removing storm 5 due no response in Q 


poke.2020.spc <- ggplot(data = POKE_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

POKE_storms_Turb <- POKE_storms[, c(3,4,9,11)]

ggplot(data = POKE_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

POKE_storms_Turb <- POKE_storms_Turb %>% filter(storm.num != "storm1" & storm.num != "storm6" & storm.num != "storm10" & storm.num != "storm16") # removing storm 5 due no response in Q 

poke.2020.turb <- ggplot(data = POKE_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

# VAUL # 
VAULstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2020/AllSites/", 
                                  recursive=F, 
                                  pattern="VAUL", 
                                  full.names=TRUE)

VAUL_storms<-do.call("rbind", lapply(VAULstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

VAUL_storms$storm.num = c(rep("storm10", 195),
                          rep("storm11", 400),
                          rep("storm12", 171),
                          rep("storm13", 319),
                          rep("storm14", 211),
                          rep("storm1a", 111),
                          rep("storm1b", 234),
                          rep("storm1c", 406),
                          rep("storm2", 182),
                          rep("storm3", 310),
                          rep("storm4", 318),
                          rep("storm5", 198),
                          rep("storm6a", 107),
                          rep("storm6b", 511),
                          rep("storm7", 284),
                          rep("storm8", 91),
                          rep("storm9", 91))

VAUL_storms$DateTime <- ymd_hms(VAUL_storms$DateTime)

VAUL_storms_fDOM <- VAUL_storms[, c(3,4,6,11)]

ggplot(data = VAUL_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_fDOM <- subset(VAUL_storms_fDOM, VAUL_storms_fDOM$fDOM.QSU < 500)
VAUL_storms_fDOM <- subset(VAUL_storms_fDOM, VAUL_storms_fDOM$fDOM.QSU > 30)

VAUL_storms_fDOM <- VAUL_storms_fDOM %>% filter(storm.num != "storm2" & storm.num != "storm5" & storm.num != "storm8" & storm.num != "storm9") # removing storm 2,5,8,9 due no response in Q 


vaul.2020.fdom <- ggplot(data = VAUL_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

VAUL_storms_NO3 <- VAUL_storms[, c(3,4,7,11)]

ggplot(data = VAUL_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_NO3 <- subset(VAUL_storms_NO3, VAUL_storms_NO3$nitrateuM < 100)
VAUL_storms_NO3 <- subset(VAUL_storms_NO3, VAUL_storms_NO3$nitrateuM > 10)
VAUL_storms_NO3 <- VAUL_storms_NO3 %>% filter(storm.num != "storm2" & storm.num != "storm5" & storm.num != "storm8" & storm.num != "storm9") # removing storm 2,5,8,9 due no response in Q 

vaul.2020.no3 <- ggplot(data = VAUL_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

VAUL_storms_SPC <- VAUL_storms[, c(3,4,8,11)]

ggplot(data = VAUL_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_SPC <- VAUL_storms_SPC %>% filter(storm.num != "storm2" & storm.num != "storm5" & storm.num != "storm8" & storm.num != "storm9") # removing storm 2,5,8,9 due no response in Q 


vaul.2020.spc <- ggplot(data = VAUL_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

VAUL_storms_Turb <- VAUL_storms[, c(3,4,9,11)]

ggplot(data = VAUL_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_Turb <- subset(VAUL_storms_Turb, VAUL_storms_Turb$Turbidity.FNU > 0)
VAUL_storms_Turb <- VAUL_storms_Turb %>% filter(storm.num != "storm2" & storm.num != "storm5" & storm.num != "storm8" & storm.num != "storm9") # removing storm 2,5,8,9 due no response in Q 

vaul.2020.turb <- ggplot(data = VAUL_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

# STRT # 
STRTstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2020/AllSites/", 
                                  recursive=F, 
                                  pattern="STRT", 
                                  full.names=TRUE)

STRT_storms<-do.call("rbind", lapply(STRTstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

STRT_storms$storm.num = c(rep("storm10", 247),
                          rep("storm1a", 108),
                          rep("storm1b", 162),
                          rep("storm1c", 106),
                          rep("storm1d", 87),
                          rep("storm1e", 445),
                          rep("storm2", 167),
                          rep("storm3", 387),
                          rep("storm4a", 141),
                          rep("storm4b", 323),
                          rep("storm5", 239),
                          rep("storm6", 123),
                          rep("storm7a", 99),
                          rep("storm7b", 96),
                          rep("storm8", 83),
                          rep("storm9a", 295),
                          rep("storm9b", 135),
                          rep("storm9c", 483))

STRT_storms$DateTime <- ymd_hms(STRT_storms$DateTime)

STRT_storms_fDOM <- STRT_storms[, c(3,4,6,11)]

ggplot(data = STRT_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

STRT_storms_fDOM <- subset(STRT_storms_fDOM, STRT_storms_fDOM$fDOM.QSU > 10)
STRT_storms_fDOM <- STRT_storms_fDOM %>% filter(storm.num != "storm10") # removing storm 10 due no response in Q 

strt.2020.fdom <- ggplot(data = STRT_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

STRT_storms_NO3 <- STRT_storms[, c(3,4,7,11)]

ggplot(data = STRT_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

STRT_storms_NO3 <- subset(STRT_storms_NO3, STRT_storms_NO3$nitrateuM > 10)
STRT_storms_NO3 <- STRT_storms_NO3 %>% filter(storm.num != "storm10") # removing storm 10 due no response in Q 


strt.2020.no3 <- ggplot(data = STRT_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

STRT_storms_SPC <- STRT_storms[, c(3,4,8,11)]

ggplot(data = STRT_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

STRT_storms_SPC <- subset(STRT_storms_SPC, STRT_storms_SPC$SpCond.uScm > 50)
STRT_storms_SPC <- STRT_storms_SPC %>% filter(storm.num != "storm10") # removing storm 10 due no response in Q 

strt.2020.spc <- ggplot(data = STRT_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

STRT_storms_Turb <- STRT_storms[, c(3,4,9,11)]

ggplot(data = STRT_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

STRT_storms_Turb <- subset(STRT_storms_Turb, STRT_storms_Turb$Turbidity.FNU > 10)
STRT_storms_Turb <- STRT_storms_Turb %>% filter(storm.num != "storm10") # removing storm 10 due no response in Q 


strt.2020.turb <- ggplot(data = STRT_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw()

# CARI # 
CARIstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2020/AllSites/", 
                                  recursive=F, 
                                  pattern="CARI", 
                                  full.names=TRUE)

CARI_storms<-do.call("rbind", lapply(CARIstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

CARI_storms$storm.num = c(rep("storm1", 5012),
                          rep("storm2a", 3118),
                          rep("storm2b", 2878),
                          rep("storm2c", 4678),
                          rep("storm3", 8399),
                          rep("storm4", 4678),
                          rep("storm5", 6598),
                          rep("storm6", 5518),
                          rep("storm7", 9238),
                          rep("storm8a", 3358),
                          rep("storm8b", 14398),
                          rep("storm9", 2998))

CARI_storms$DateTime <- ymd_hms(CARI_storms$DateTime)

CARI_storms_fDOM <- CARI_storms[, c(3,4,5,10)]

ggplot(data = CARI_storms_fDOM, 
       aes(x = Discharge, 
           y = fDOM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

cari.2020.fdom <- ggplot(data = CARI_storms_fDOM, 
       aes(x = Discharge, 
           y = fDOM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

CARI_storms_NO3 <- CARI_storms[, c(3,4,6,10)]

ggplot(data = CARI_storms_NO3, 
       aes(x = Discharge, 
           y = NO3,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_NO3 <- subset(CARI_storms_NO3, CARI_storms_NO3$NO3 < 30)


cari.2020.no3 <- ggplot(data = CARI_storms_NO3, 
       aes(x = Discharge, 
           y = NO3,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

CARI_storms_SPC <- CARI_storms[, c(3,4,7,10)]
CARI_storms_SPC <- CARI_storms_SPC[!duplicated(CARI_storms_SPC$DateTime), ] # removing duplicates


ggplot(data = CARI_storms_SPC, 
       aes(x = Discharge, 
           y = SpCond,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

cari.2020.spc <- ggplot(data = CARI_storms_SPC, 
       aes(x = Discharge, 
           y = SpCond,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

CARI_storms_Turb <- CARI_storms[, c(3,4,8,10)]
CARI_storms_Turb <- CARI_storms_Turb[!duplicated(CARI_storms_Turb$DateTime), ] # removing duplicates


ggplot(data = CARI_storms_Turb, 
       aes(x = Discharge, 
           y = Turb,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_Turb <- subset(CARI_storms_Turb, CARI_storms_Turb$Turb < 200)


cari.2020.turb <- ggplot(data = CARI_storms_Turb, 
       aes(x = Discharge, 
           y = Turb,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

#### 2021 ####
MOOSstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2021/All_Sites/", 
                                  recursive=F, 
                                  pattern="MOOS", 
                                  full.names=TRUE)

MOOS_storms<-do.call("rbind", lapply(MOOSstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

MOOS_storms$storm.num = c(rep("storm1", 575),
                          rep("storm2", 755),
                          rep("storm3a", 347),
                          rep("storm3b", 1079),
                          rep("storm4a", 503),
                          rep("storm4b", 743),
                          rep("storm5a", 371),
                          rep("storm5b", 575),
                          rep("storm6", 383),
                          rep("storm7", 779))

MOOS_storms$DateTime <- ymd_hms(MOOS_storms$DateTime)

MOOS_storms_fDOM <- MOOS_storms[, c(2,3,6,11)]

ggplot(data = MOOS_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

moos.2021.fdom <- ggplot(data = MOOS_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_SPC <- MOOS_storms[, c(2,3,8,11)]

ggplot(data = MOOS_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

moos.2021.spc <- ggplot(data = MOOS_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

MOOS_storms_Turb <- MOOS_storms[, c(2,3,9,11)]

ggplot(data = MOOS_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)


moos.2021.turb <- ggplot(data = MOOS_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw()

# FRCH #
FRCHstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2021/All_Sites/", 
                                  recursive=F, 
                                  pattern="FRCH", 
                                  full.names=TRUE)

FRCH_storms<-do.call("rbind", lapply(FRCHstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

FRCH_storms$storm.num = c(rep("storm1", 892),
                          rep("storm2", 1228),
                          rep("storm3", 940),
                          rep("storm4", 988),
                          rep("storm5a", 868),
                          rep("storm5b", 1096),
                          rep("storm6a", 652),
                          rep("storm6b", 1252),
                          rep("storm7", 736),
                          rep("storm8", 1720))
FRCH_storms$DateTime <- ymd_hms(FRCH_storms$DateTime)

FRCH_storms_fDOM <- FRCH_storms[, c(2,3,6,11)]

ggplot(data = FRCH_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_fDOM <- subset(FRCH_storms_fDOM, FRCH_storms_fDOM$fDOM.QSU > 0)
FRCH_storms_fDOM <- FRCH_storms_fDOM %>% filter(storm.num != "storm3") # removing storm 10 due no response in Q 


frch.2021.fdom <- ggplot(data = FRCH_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_NO3 <- FRCH_storms[, c(2,3,7,11)]

ggplot(data = FRCH_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_NO3 <- subset(FRCH_storms_NO3, FRCH_storms_NO3$nitrateuM > 0)

frch.2021.no3 <- ggplot(data = FRCH_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_SPC <- FRCH_storms[, c(2,3,8,11)]

ggplot(data = FRCH_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)


frch.2021.spc <- ggplot(data = FRCH_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

FRCH_storms_Turb <- FRCH_storms[, c(2,3,9,11)]

ggplot(data = FRCH_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

FRCH_storms_Turb <- subset(FRCH_storms_Turb, FRCH_storms_Turb$Turbidity.FNU <150)


frch.2021.turb <- ggplot(data = FRCH_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

grid.arrange(frch.2018.fdom, frch.2019.fdom, frch.2020.fdom, frch.2021.fdom,
             frch.2018.no3, frch.2019.no3, frch.2020.no3, frch.2021.no3,
             frch.2018.spc, frch.2019.spc, frch.2020.spc, frch.2021.spc,
             frch.2018.turb, frch.2019.turb, frch.2020.turb, frch.2021.turb,
             ncol = 4, nrow = 4)

# POKE # 
POKEstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2021/All_Sites/", 
                                  recursive=F, 
                                  pattern="POKE", 
                                  full.names=TRUE)

POKE_storms<-do.call("rbind", lapply(POKEstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

POKE_storms$storm.num = c(rep("storm1", 235),
                          rep("storm2", 191),
                          rep("storm3", 167),
                          rep("storm4", 575),
                          rep("storm5", 1106),
                          rep("storm6", 479),
                          rep("storm7a", 1355),
                          rep("storm7b", 791),
                          rep("storm7c", 299),
                          rep("storm7d", 443))

POKE_storms$DateTime <- ymd_hms(POKE_storms$DateTime)

POKE_storms_fDOM <- POKE_storms[, c(2,3,6,11)]

ggplot(data = POKE_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

poke.2021.fdom <- ggplot(data = POKE_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

POKE_storms_NO3 <- POKE_storms[, c(2,3,7,11)]

ggplot(data = POKE_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

POKE_storms_NO3 <- subset(POKE_storms_NO3, POKE_storms_NO3$nitrateuM > 0)
POKE_storms_NO3 <- POKE_storms_NO3 %>% filter(storm.num != "storm2") # removing storm 10 due no response in Q 


poke.2021.no3 <- ggplot(data = POKE_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

POKE_storms_SPC <- POKE_storms[, c(2,3,8,11)]

ggplot(data = POKE_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

poke.2021.spc <- ggplot(data = POKE_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

POKE_storms_Turb <- POKE_storms[, c(2,3,9,11)]

ggplot(data = POKE_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

poke.2021.turb <- ggplot(data = POKE_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 



# VAUL # 
VAULstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2021/All_Sites/", 
                                  recursive=F, 
                                  pattern="VAUL", 
                                  full.names=TRUE)

VAUL_storms<-do.call("rbind", lapply(VAULstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

VAUL_storms$storm.num = c(rep("storm1a", 1127),
                          rep("storm1b", 1379),
                          rep("storm2", 203),
                          rep("storm3", 2004),
                          rep("storm4a", 1283),
                          rep("storm4b", 959),
                          rep("storm5a", 996),
                          rep("storm5b", 1151))
VAUL_storms$DateTime <- ymd_hms(VAUL_storms$DateTime)

VAUL_storms_fDOM <- VAUL_storms[, c(2,3,6,11)]

ggplot(data = VAUL_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_fDOM <- subset(VAUL_storms_fDOM, VAUL_storms_fDOM$fDOM.QSU > 0)
VAUL_storms_fDOM <- VAUL_storms_fDOM %>% filter(storm.num != "storm1a" & storm.num != "storm2") # removing storm 1a due ro missing data and 2  due no response in Q 

vaul.2021.fdom <- ggplot(data = VAUL_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

VAUL_storms_NO3 <- VAUL_storms[, c(2,3,7,11)]

ggplot(data = VAUL_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_NO3 <- subset(VAUL_storms_NO3, VAUL_storms_NO3$nitrateuM < 100)
VAUL_storms_NO3 <- subset(VAUL_storms_NO3, VAUL_storms_NO3$nitrateuM > 10)
VAUL_storms_NO3 <- VAUL_storms_NO3 %>% filter(storm.num != "storm2") # removing storm 2 due no response in Q 

vaul.2021.no3 <- ggplot(data = VAUL_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

VAUL_storms_SPC <- VAUL_storms[, c(2,3,8,11)]

ggplot(data = VAUL_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_SPC <- VAUL_storms_SPC %>% filter(storm.num != "storm1a" & storm.num != "storm2") # removing storm 1a due ro missing data and 2  due no response in Q 

vaul.2021.spc <- ggplot(data = VAUL_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

VAUL_storms_Turb <- VAUL_storms[, c(2,3,9,11)]

ggplot(data = VAUL_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

VAUL_storms_Turb <- subset(VAUL_storms_Turb, VAUL_storms_Turb$Turbidity.FNU > 10)
VAUL_storms_Turb <- VAUL_storms_Turb %>% filter(storm.num != "storm1a" & storm.num != "storm2") # removing storm 1a due ro missing data and 2  due no response in Q 

vaul.2021.turb <- ggplot(data = VAUL_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 


# STRT # 
STRTstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2021/All_Sites/", 
                                  recursive=F, 
                                  pattern="STRT", 
                                  full.names=TRUE)

STRT_storms<-do.call("rbind", lapply(STRTstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

STRT_storms$storm.num = c(rep("storm1a", 661),
                          rep("storm1b", 853),
                          rep("storm2a", 373),
                          rep("storm2b", 721),
                          rep("storm3", 469))

STRT_storms$DateTime <- ymd_hms(STRT_storms$DateTime)

STRT_storms_fDOM <- STRT_storms[, c(2,3,6,11)]

ggplot(data = STRT_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

strt.2021.fdom <- ggplot(data = STRT_storms_fDOM, 
       aes(x = Q, 
           y = fDOM.QSU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

STRT_storms_NO3 <- STRT_storms[, c(2,3,7,11)]

 ggplot(data = STRT_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

 strt.2021.no3 <- ggplot(data = STRT_storms_NO3, 
       aes(x = Q, 
           y = nitrateuM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

STRT_storms_SPC <- STRT_storms[, c(2,3,8,11)]

ggplot(data = STRT_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

strt.2021.spc <- ggplot(data = STRT_storms_SPC, 
       aes(x = Q, 
           y = SpCond.uScm,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

STRT_storms_Turb <- STRT_storms[, c(2,3,9,11)]

ggplot(data = STRT_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)


strt.2021.turb <- ggplot(data = STRT_storms_Turb, 
       aes(x = Q, 
           y = Turbidity.FNU,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw()


# CARI # 
CARIstorm_file_list <- list.files(path="~/Documents/Storms/Storm_Events/2021/All_Sites/", 
                                  recursive=F, 
                                  pattern="CARI", 
                                  full.names=TRUE)

CARI_storms<-do.call("rbind", lapply(CARIstorm_file_list, 
                                     read.csv, 
                                     check.names = FALSE,
                                     stringsAsFactors=FALSE, 
                                     header=T, blank.lines.skip = TRUE, fill=TRUE))

CARI_storms$storm.num = c(rep("storm1", 2519),
                          rep("storm10", 3659),
                          rep("storm2", 2099),
                          rep("storm3", 2399),
                          rep("storm4", 1919),
                          rep("storm5", 5939),
                          rep("storm6", 5916),
                          rep("storm7", 6566),
                          rep("storm8", 4859),
                          rep("storm9", 1619))

CARI_storms$DateTime <- ymd_hms(CARI_storms$DateTime)

CARI_storms_fDOM <- CARI_storms[, c(2,4,5,10)]

ggplot(data = CARI_storms_fDOM, 
       aes(x = Discharge, 
           y = fDOM,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_fDOM <- CARI_storms_fDOM %>% filter(storm.num != "storm2" & storm.num != "storm9") # removing storm 2,9 due no response in Q 

cari.2021.fdom <- ggplot(data = CARI_storms_fDOM, 
       aes(x = Discharge, 
           y = fDOM,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

CARI_storms_NO3 <- CARI_storms[, c(2,4,6,10)]

ggplot(data = CARI_storms_NO3, 
       aes(x = Discharge, 
           y = NO3,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_NO3 <- CARI_storms_NO3 %>% filter(storm.num != "storm2" & storm.num != "storm9") # removing storm 2,9 due no response in Q 

cari.2021.no3 <- ggplot(data = CARI_storms_NO3, 
       aes(x = Discharge, 
           y = NO3,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

CARI_storms_SPC <- CARI_storms[, c(2,4,7,10)]

ggplot(data = CARI_storms_SPC, 
       aes(x = Discharge, 
           y = SpCond,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_SPC <- CARI_storms_SPC %>% filter(storm.num != "storm2" & storm.num != "storm9") # removing storm 2,9 due no response in Q 


cari.2021.spc <- ggplot(data = CARI_storms_SPC, 
       aes(x = Discharge, 
           y = SpCond,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

CARI_storms_Turb <- CARI_storms[, c(2,4,8,10)]

ggplot(data = CARI_storms_Turb, 
       aes(x = Discharge, 
           y = Turb,
           color = storm.num)) +
  geom_point() +
  theme_bw() +
  facet_wrap(~storm.num)

CARI_storms_Turb <- subset(CARI_storms_Turb, CARI_storms_Turb$Turb < 100)
CARI_storms_Turb <- subset(CARI_storms_Turb, CARI_storms_Turb$Turb > 0)
CARI_storms_Turb <- CARI_storms_Turb %>% filter(storm.num != "storm2" & storm.num != "storm9") # removing storm 2,9 due no response in Q 


cari.2021.turb <- ggplot(data = CARI_storms_Turb, 
       aes(x = Discharge, 
           y = Turb,
           color = storm.num)) +
  geom_point(aes(alpha = as.numeric(DateTime))) +
  theme_bw() 

a <- ggplot() +
  theme_classic()

grid.arrange(frch.2018.fdom, frch.2019.fdom, frch.2020.fdom, frch.2021.fdom,
             frch.2018.no3, frch.2019.no3, frch.2020.no3, frch.2021.no3,
             frch.2018.spc, frch.2019.spc, frch.2020.spc, frch.2021.spc,
             frch.2018.turb, frch.2019.turb, frch.2020.turb, frch.2021.turb,
             ncol = 4, nrow = 4)

grid.arrange(moos.2018.fdom, moos.2019.fdom, moos.2020.fdom, moos.2021.fdom,
             moos.2018.no3, moos.2019.no3, moos.2020.no3, a,
             moos.2018.spc, moos.2019.spc, moos.2020.spc, moos.2021.spc,
             moos.2018.turb, moos.2019.turb, moos.2020.turb, moos.2021.turb,
             ncol = 4, nrow = 4)

grid.arrange(cari.2018.fdom, cari.2019.fdom, cari.2020.fdom, cari.2021.fdom,
             cari.2018.no3, cari.2019.no3, cari.2020.no3, cari.2021.no3,
             cari.2018.spc, cari.2019.spc, cari.2020.spc, cari.2021.spc,
             cari.2018.turb, cari.2019.turb, cari.2020.turb, cari.2021.turb,
             ncol = 4, nrow = 4)

grid.arrange(poke.2019.no3, poke.2020.no3, poke.2021.no3,
             poke.2019.fdom, poke.2020.fdom, poke.2021.fdom,
             poke.2019.spc, poke.2020.spc, poke.2021.spc,
             poke.2019.turb, poke.2020.turb, poke.2021.turb,
             ncol = 3, nrow = 4)

grid.arrange(vaul.2019.no3, vaul.2020.no3, vaul.2021.no3,
             vaul.2019.fdom, vaul.2020.fdom, vaul.2021.fdom,
             vaul.2019.spc, vaul.2020.spc, vaul.2021.spc,
             vaul.2019.turb, vaul.2020.turb, vaul.2021.turb,
             ncol = 3, nrow = 4)

grid.arrange(strt.2019.no3, strt.2020.no3, strt.2021.no3,
             strt.2019.fdom, strt.2020.fdom, strt.2021.fdom,
             strt.2019.spc, strt.2020.spc, strt.2021.spc,
             strt.2019.turb, strt.2020.turb, strt.2021.turb,
             ncol = 3, nrow = 4)



############################################################################################################
################################ Time Series ###############################################################
############################################################################################################
#### 2018 ####
brewer.pal(n = 8, name = "Dark2")
FRCH_chem_2018 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2018.csv", 
                           col_types = cols(fDOM.QSU = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                            Turbidity.FNU = col_double()))
FRCH_Q <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2018/FRCH/FRCH.Q.csv")
MOOS_Q <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2018/MOOS/MOOS.Q.csv")
MOOS_chem_2018 <- read_csv("~/Documents/Storms/Q_Chem/MOOS/MOOS_chem_2018.csv", 
                           col_types = cols(fDOM.QSU = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                            Turbidity.FNU = col_double()))

CARI_2018 <- read_csv("~/Documents/NEON/CARI/WaterQuality2018.csv", 
                      col_types = cols(Discharge = col_double(), 
                                       fDOM = col_double(), NO3 = col_double(), 
                                       SpCond = col_double(), Turb = col_double()))
attributes(CARI_2018$DateTime)$tzone <- "America/Anchorage"

CARI_2018$day = format(as.POSIXct(CARI_2018$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
attributes(CARI_2018$DateTime)$tzone <- 'America/Anchorage'
CARI_2018$day = as.POSIXct(CARI_2018$day, "%Y-%m-%d", tz="America/Anchorage")

names(CARI_2018) <- c("DateTime", "Site", "Q", "nitrateuM", "fDOM.QSU", "SpCond.uScm", "Turbidity.FNU", "day")
CARI_2018 <- CARI_2018[, c(1,2,3,8,5,4,6,7)]

par(mfrow=c(5,1))

POKE.st <- read_csv("~/Documents/DoD_2018/RainGauge/POKE.RainGauge.2018.csv")
attributes(POKE.st$DateTime)$tzone <- 'America/Anchorage'

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(10,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)

par(new = T)
plot(MOOS_Q$Q ~ MOOS_Q$DateTime, type="l", lwd = 2, xlab="", ylab="Q (L/sec)", col = "#6A3D9A",
     xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(0,5000))
lines(FRCH_Q$Q  ~ FRCH_Q$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
lines(CARI_2018$Q ~ CARI_2018$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("MOOS", "FRCH", "CARI"),
       col=c("#6A3D9A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(10,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
par(new = T)

plot(MOOS_chem_2018$nitrateuM  ~ MOOS_chem_2018$DateTime, type="l", lwd = 2, xlab="", ylab=vn, col="#6A3D9A",
      xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2018$nitrateuM ~ FRCH_chem_2018$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
lines(CARI_2018$nitrateuM ~ CARI_2018$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("MOOS", "FRCH", "CARI"),
       col=c("#6A3D9A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(10,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
par(new = T)

plot(MOOS_chem_2018$fDOM.QSU  ~ MOOS_chem_2018$DateTime, type="l", lwd = 2, xlab="", ylab="fDOM", col="#6A3D9A",
     xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2018$fDOM.QSU ~ FRCH_chem_2018$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
lines(CARI_2018$fDOM.QSU ~ CARI_2018$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("MOOS", "FRCH", "CARI"),
       col=c("#6A3D9A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(10,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
par(new = T)

plot(MOOS_chem_2018$SpCond.uScm  ~ MOOS_chem_2018$DateTime, type="l", lwd = 2, xlab="", ylab="SPC", col="#6A3D9A",
     xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2018$SpCond.uScm ~ FRCH_chem_2018$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
lines(CARI_2018$SpCond.uScm ~ CARI_2018$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("MOOS", "FRCH", "CARI"),
       col=c("#6A3D9A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(10,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
par(new = T)

plot(MOOS_chem_2018$Turbidity.FNU  ~ MOOS_chem_2018$DateTime, type="l", lwd = 2, xlab="", ylab="Turb", col="#6A3D9A",
     xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(0,1000))
lines(FRCH_chem_2018$Turbidity.FNU ~ FRCH_chem_2018$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
lines(CARI_2018$Turbidity.FNU ~ CARI_2018$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2018-05-29 0:00:00","2018-10-31 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("MOOS", "FRCH", "CARI"),
       col=c("#6A3D9A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

chem_2018 <- rbind(FRCH_chem_2018, MOOS_chem_2018, CARI_2018)

ggplot(data = chem_2018, 
       aes(x = Site, y = fDOM.QSU, fill = as.factor(Site))) +
geom_boxplot() +
  theme_classic()

chem_2018$year <- "2018"
#

#### 2019 #### 
Q_2019 <- read_csv("~/Documents/DoD_Discharge/Predicted_Discharge/2019/Q_2019.csv")
FRCH_Q_2019 <-  subset(Q_2019, Site == "FRCH")
FRCH_Q_2019 <- FRCH_Q_2019[-15720, ] # removing errant point/date format
MOOS_Q_2019 <-  subset(Q_2019, Site == "MOOS")
POKE_Q_2019 <-  subset(Q_2019, Site == "POKE")
STRT_Q_2019 <-  subset(Q_2019, Site == "STRT")
VAUL_Q_2019 <-  subset(Q_2019, Site == "VAUL")

FRCH_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2019.csv", 
                           col_types = cols(nitrateuM = col_double(), 
                                            SpCond.uScm.mn = col_double(), Turbidity.FNU.mn = col_double()))
#names(FRCH_chem_2020) <- c("Site", "DateTime", "Q", "day", "fDOM.QSU", "nitrateuM", "SpCond.uScm", "Turbidity.FNU")
MOOS_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/MOOS/MOOS_chem_2019.csv")
MOOS_chem_2019 <- MOOS_chem_2019[-c(13798:13800), ]
POKE_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/POKE/POKE_chem_2019.csv", 
                           col_types = cols(fDOM.QSU.mn = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm.mn = col_double(), 
                                            Turbidity.FNU.mn = col_double()))
STRT_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/STRT/STRT_chem_2019.csv")
STRT_chem_2019 <- STRT_chem_2019[-c(13862:13863), ]
VAUL_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/VAUL/VAUL_chem_2019.csv")

CARI_2019 <- read_csv("~/Documents/NEON/CARI/WaterQuality2019.csv", 
                      col_types = cols(Discharge = col_double(), 
                                       fDOM = col_double(), NO3 = col_double(), 
                                       SpCond = col_double(), Turb = col_double()))
attributes(CARI_2019$DateTime)$tzone <- "America/Anchorage"

CARI_2019$day = format(as.POSIXct(CARI_2019$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
attributes(CARI_2019$DateTime)$tzone <- 'America/Anchorage'
CARI_2019$day = as.POSIXct(CARI_2019$day, "%Y-%m-%d", tz="America/Anchorage")

names(CARI_2019) <- c("DateTime", "Site", "Q", "nitrateuM", "fDOM.QSU", "SpCond.uScm", "Turbidity.FNU", "day")
CARI_2019 <- CARI_2019[, c(2, 1, 3, 8, 5,4,6,7)]


FRCH.st <- read_csv("~/Documents/DoD_2019/RainGauge/FRCH.RainGauge.2019.csv")
attributes(FRCH.st$Datetime)$tzone <- 'America/Anchorage'
VAUL.st <- read_csv("~/Documents/DoD_2019/RainGauge/VAUL.RainGauge.2019.csv")
attributes(VAUL.st$DateTime)$tzone <- 'America/Anchorage'
POKE.st <- read_csv("~/Documents/DoD_2019/RainGauge/POKE.RainGauge.2019.csv")
attributes(POKE.st$DateTime)$tzone <- 'America/Anchorage'

plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$Datetime, type="h",
     xlim = as.POSIXct(c("2019-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
     ylim = c(20,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
par(new = T)


plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(20,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)

par(new = T)
plot(STRT_Q_2019$Q ~ STRT_Q_2019$DateTime, type="l", lwd = 2, xlab="", ylab="Q (L/sec)", col = "#66C2A5",
     xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"),
     ylim =c(0,7500))
lines(MOOS_Q_2019$Q  ~ MOOS_Q_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(POKE_Q_2019$Q  ~ POKE_Q_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(VAUL_Q_2019$Q  ~ VAUL_Q_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH_Q_2019$Q ~ FRCH_Q_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(CARI_2019$Q ~ CARI_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(20,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
par(new = T)

plot(STRT_chem_2019$nitrateuM ~ STRT_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="Nitrate (µM)", col = "#66C2A5",
     xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(0,50))
lines(MOOS_chem_2019$nitrateuM  ~ MOOS_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2019$nitrateuM  ~ POKE_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2019$nitrateuM  ~ VAUL_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2019$nitrateuM ~ FRCH_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(CARI_2019$nitrateuM ~ CARI_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(20,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
par(new = T)

plot(STRT_chem_2019$fDOM.QSU.mn ~ STRT_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="fDOM", col = "#66C2A5",
     xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(0, 300))
lines(MOOS_chem_2019$fDOM.QSU.mn  ~ MOOS_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2019$fDOM.QSU.mn  ~ POKE_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2019$fDOM.QSU.mn  ~ VAUL_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2019$fDOM.QSU.mn ~ FRCH_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(CARI_2019$fDOM.QSU ~ CARI_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(20,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
par(new = T)

plot(STRT_chem_2019$SpCond.uScm.mn ~ STRT_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="SPC", col = "#66C2A5",
     xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(0,200))
lines(MOOS_chem_2019$SpCond.uScm.mn  ~ MOOS_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2019$SpCond.uScm.mn  ~ POKE_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2019$SpCond.uScm.mn  ~ VAUL_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2019$SpCond.uScm.mn ~ FRCH_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(CARI_2019$SpCond.uScm ~ CARI_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(20,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
par(new = T)

plot(STRT_chem_2019$Turbidity.FNU.mn ~ STRT_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="Turb", col = "#66C2A5",
     xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"),
     ylim = c(0,200))
lines(MOOS_chem_2019$Turbidity.FNU.mn  ~ MOOS_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2019$Turbidity.FNU.mn  ~ POKE_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2019$Turbidity.FNU.mn  ~ VAUL_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2019$Turbidity.FNU.mn ~ FRCH_chem_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
lines(CARI_2019$Turbidity.FNU ~ CARI_2019$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2019-04-29 0:00:00","2019-10-31 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)


names(CARI_2019) <- c("Site", "DateTime", "Q", "day", "fDOM.QSU.mn", "nitrateuM", "SpCond.uScm.mn", "Turbidity.FNU.mn")

VAUL_chem_2019$nitrateuM <- NA
VAUL_chem_2019 <- VAUL_chem_2019[,c(1,2,3,4,5,8,6,7)]

chem_2019 <- rbind(FRCH_chem_2019, MOOS_chem_2019, CARI_2019, POKE_chem_2019, STRT_chem_2019, VAUL_chem_2019)
chem_2019$year <- "2019"
chem_2019 <- chem_2019[, c(2, 1, 3, 4, 5,6,7,8,9)]

names(chem_2019) <- c("DateTime", "Site", "Q", "day", "fDOM.QSU", "nitrateuM", "SpCond.uScm", "Turbidity.FNU", "year")

chem_2019 <- chem_2019[(-38604), ]

ggplot(data = chem_2019, 
       aes(x = Site, y = fDOM.QSU, fill = as.factor(Site))) +
  geom_boxplot() +
  theme_classic()

chem_2018_2019 <- rbind(chem_2018, chem_2019)

ggplot(data = chem_2018_2019, 
       aes(x = Site, y = fDOM.QSU, fill = as.factor(year))) +
  geom_boxplot() +
  theme_classic()


#### 2020 ####
FRCH_chem_2020 <- read_csv("Q_Chem/FRCH/FRCH_chem_2020.csv")
names(FRCH_chem_2020) <- c("Site", "DateTime", "Q", "day", "fDOM.QSU", "nitrateuM", "SpCond.uScm", "Turbidity.FNU")
MOOS_chem_2020 <- read_csv("Q_Chem/MOOS/MOOS_chem_2020.csv")
POKE_chem_2020 <- read_csv("Q_Chem/POKE/POKE_chem_2020.csv")
colnames(POKE_chem_2020)[colnames(POKE_chem_2020) == 'fDOM.RFU'] <- 'fDOM.QSU'
STRT_chem_2020 <- read_csv("Q_Chem/STRT/STRT_chem_2020.csv")
VAUL_chem_2020 <- read_csv("Q_Chem/VAUL/VAUL_chem_2020.csv")

CARI_2020 <- read_csv("~/Documents/NEON/CARI/WaterQuality2020.csv", 
                      col_types = cols(Discharge = col_double(), 
                                       fDOM = col_double(), NO3 = col_double(), 
                                       SpCond = col_double(), Turb = col_double()))
attributes(CARI_2020$DateTime)$tzone <- "America/Anchorage"

CARI_2020$day = format(as.POSIXct(CARI_2020$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
attributes(CARI_2020$DateTime)$tzone <- 'America/Anchorage'
CARI_2020$day = as.POSIXct(CARI_2020$day, "%Y-%m-%d", tz="America/Anchorage")

names(CARI_2020) <- c("DateTime", "Site", "Q", "nitrateuM", "fDOM.QSU", "SpCond.uScm", "Turbidity.FNU", "day")
CARI_2020 <- CARI_2020[, c(2, 1, 3, 8, 5,4,6,7)]


FRCH.st <- read_csv("~/Documents/DoD_2020/RainGauge/FRCH.RainGauge.2020.csv")
attributes(FRCH.st$DateTime)$tzone <- 'America/Anchorage'
STRT.st <- read_csv("~/Documents/DoD_2020/RainGauge/STRT.RainGauge.2020.csv")
attributes(STRT.st$DateTime)$tzone <- 'America/Anchorage'
VAUL.st <- read_csv("~/Documents/DoD_2020/RainGauge/VAUL.RainGauge.2020.csv")
attributes(VAUL.st$DateTime)$tzone <- 'America/Anchorage'
POKE.st <- read_csv("~/Documents/DoD_2020/RainGauge/POKE.RainGauge.2020.csv")
attributes(POKE.st$DateTime)$tzone <- 'America/Anchorage'

plot(FRCH.st$inst_rainfall_mm ~ FRCH.st$DateTime, type="h",
     xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
     ylim = c(20,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
par(new = T)

which(STRT_chem_2020$Q > 6000)
STRT_chem_2020 <- STRT_chem_2020[-674,]

brewer.pal(n = 12, name = "Paired")
brewer.pal(n = 6, name = "Dark2")
brewer.pal(n = 11, name = "PuOr")
brewer.pal(n = 11, name = "Spectral")

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
     ylim = c(20,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)

par(new = T)
plot(STRT_chem_2020$Q ~ STRT_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="Q (L/sec)", col = "#66C2A5",
     xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"),
     ylim = c(0,8000))
lines(MOOS_chem_2020$Q  ~ MOOS_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2020$Q  ~ POKE_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2020$Q  ~ VAUL_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2020$Q ~ FRCH_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(CARI_2020$Q ~ CARI_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(STRT_chem_2020$nitrateuM ~ STRT_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="Nitrate (µM)", col = "#66C2A5",
     xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(MOOS_chem_2020$nitrateuM  ~ MOOS_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2020$nitrateuM  ~ POKE_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2020$nitrateuM  ~ VAUL_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2020$nitrateuM ~ FRCH_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(CARI_2020$nitrateuM ~ CARI_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(STRT_chem_2020$fDOM.QSU ~ STRT_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="fDOM (QSU)", col = "#66C2A5",
     xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(MOOS_chem_2020$fDOM.QSU  ~ MOOS_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2020$fDOM.QSU  ~ POKE_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2020$fDOM.QSU  ~ VAUL_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2020$fDOM.QSU ~ FRCH_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(CARI_2020$fDOM.QSU ~ CARI_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(STRT_chem_2020$SpCond.uScm ~ STRT_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="SPC (µS/cm)", col = "#66C2A5",
     xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(MOOS_chem_2020$SpCond.uScm  ~ MOOS_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2020$SpCond.uScm  ~ POKE_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2020$SpCond.uScm  ~ VAUL_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2020$SpCond.uScm ~ FRCH_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(CARI_2020$SpCond.uScm ~ CARI_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(STRT_chem_2020$Turbidity.FNU ~ STRT_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="Turbidity (FNU)", col = "#66C2A5",
     xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(MOOS_chem_2020$Turbidity.FNU ~ MOOS_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2020$Turbidity.FNU  ~ POKE_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2020$Turbidity.FNU  ~ VAUL_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2020$Turbidity.FNU ~ FRCH_chem_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
lines(CARI_2020$Turbidity.FNU ~ CARI_2020$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2020-06-01 0:00:00","2020-10-15 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)


chem_2020 <- rbind(FRCH_chem_2020, MOOS_chem_2020, CARI_2020, POKE_chem_2020, STRT_chem_2020, VAUL_chem_2020)
chem_2020$year <- "2020"
chem_2020 <- chem_2020[, c(2, 1, 3, 4, 5,6,7,8,9)]
chem_2020 <- chem_2020[-60733,]
chem_2020 <- chem_2020[-31425,]


ggplot(data = chem_2020, 
       aes(x = Site, y = fDOM.QSU, fill = as.factor(Site))) +
  geom_boxplot() +
  theme_classic()

chem_2018_2019_2020 <- rbind(chem_2018, chem_2019, chem_2020)

ggplot(data = chem_2018_2019_2020, 
       aes(x = Site, y = fDOM.QSU, fill = as.factor(year))) +
  geom_boxplot() +
  theme_classic()


#### 2021 ####
FRCH_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2021.csv")
MOOS_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/MOOS/MOOS_chem_2021.csv")
POKE_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/POKE/POKE_chem_2021.csv")
STRT_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/STRT/STRT_chem_2021.csv")
VAUL_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/VAUL/VAUL_chem_2021.csv")

CARI_2021 <- read_csv("~/Documents/NEON/CARI/WaterQuality2021.csv", 
                      col_types = cols(Discharge = col_double(), 
                                       fDOM = col_double(), NO3 = col_double(), 
                                       SpCond = col_double(), Turb = col_double()))
attributes(CARI_2021$DateTime)$tzone <- "America/Anchorage"

CARI_2021$day = format(as.POSIXct(CARI_2021$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
attributes(CARI_2021$DateTime)$tzone <- 'America/Anchorage'
CARI_2021$day = as.POSIXct(CARI_2021$day, "%Y-%m-%d", tz="America/Anchorage")

names(CARI_2021) <- c("DateTime", "Site", "Q", "nitrateuM", "fDOM.QSU", "SpCond.uScm", "Turbidity.FNU", "day")
CARI_2021 <- CARI_2021[, c(2, 1, 3, 8, 5,4,6,7)]


POKE.st <- read_csv("~/Documents/DoD_2021/RainGauge/POKE.RainGauge.2021.csv")
attributes(POKE.st$DateTime)$tzone <- 'America/Anchorage'

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h",
     xlim = as.POSIXct(c("2021-05-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"),
     ylim = c(20,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)
par(mfrow=c(1,1))
par(new = T)

plot(POKE.st$inst_rainfall_mm ~ POKE.st$DateTime, type="h", lwd = 2,
     xlim = as.POSIXct(c("2021-05-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"),
     ylim = c(20,0), 
     axes=F, xlab="", ylab="")
axis(side = 4)

par(new = T)
plot(STRT_chem_2021$Q ~ STRT_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="Q (L/sec)", col = "#66C2A5",
     xlim = as.POSIXct(c("2021-05-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"),
     ylim = c(0,5000))
lines(MOOS_chem_2021$Q  ~ MOOS_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2021-05-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2021$Q  ~ POKE_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2021-05-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2021$Q  ~ VAUL_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2021-05-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2021$Q ~ FRCH_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2021-05-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(CARI_2021$Q ~ CARI_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2021-05-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, lwd = 5, cex=0.8)

plot(STRT_chem_2021$nitrateuM ~ STRT_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="Nitrate (µM)", col = "#66C2A5",
     xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(MOOS_chem_2021$nitrateuM  ~ MOOS_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2021$nitrateuM  ~ POKE_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2021$nitrateuM  ~ VAUL_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2021$nitrateuM ~ FRCH_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(CARI_2021$nitrateuM ~ CARI_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(STRT_chem_2021$fDOM.QSU ~ STRT_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="fDOM (QSU)", col = "#66C2A5",
     xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(MOOS_chem_2021$fDOM.QSU  ~ MOOS_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2021$fDOM.QSU  ~ POKE_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2021$fDOM.QSU  ~ VAUL_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2021$fDOM.QSU ~ FRCH_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(CARI_2021$fDOM.QSU ~ CARI_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(STRT_chem_2021$SpCond.uScm ~ STRT_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="SPC (µS/cm)", col = "#66C2A5",
     xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(MOOS_chem_2021$SpCond.uScm  ~ MOOS_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2021$SpCond.uScm  ~ POKE_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2021$SpCond.uScm  ~ VAUL_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2021$SpCond.uScm ~ FRCH_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(CARI_2021$SpCond.uScm ~ CARI_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

plot(STRT_chem_2021$Turbidity.FNU ~ STRT_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="Turbidity (FNU)", col = "#66C2A5",
     xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(MOOS_chem_2021$Turbidity.FNU ~ MOOS_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#6A3D9A",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(POKE_chem_2021$Turbidity.FNU  ~ POKE_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#3288BD",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(VAUL_chem_2021$Turbidity.FNU  ~ VAUL_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#E7298A",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(FRCH_chem_2021$Turbidity.FNU ~ FRCH_chem_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#A6761D",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
lines(CARI_2021$Turbidity.FNU ~ CARI_2021$DateTime, type="l", lwd = 2, xlab="", ylab="", col="#FF7F00",
      xlim = as.POSIXct(c("2021-06-01 0:00:00","2021-10-15 00:00:00"), tz="America/Anchorage"))
legend("right", legend=c("STRT", "MOOS", "POKE", "VAUL", "FRCH", "CARI"),
       col=c("#66C2A5", "#6A3D9A", "#3288BD", "#E7298A", "#A6761D", "#FF7F00"), lty=1, cex=0.8)

CARI_2021$X1 <- NA
CARI_2021 <- CARI_2021[, c(9,2,5,3,1,4,6,7,8)]

chem_2021 <- rbind(FRCH_chem_2021, MOOS_chem_2021, CARI_2021, POKE_chem_2021, STRT_chem_2021, VAUL_chem_2021)
chem_2021$year <- "2021"
chem_2021 <- chem_2021[,-1]
chem_2021 <- chem_2021[, c(1,4,3,5,2,6,7,8,9)]

chem_2021 <- chem_2021[(-70661), ]
chem_2021[c(70628:70660), 2] <- "VAUL"
chem_2021[c(11872:12009), 2] <- "FRCH"
chem_2021[c(25893:25949), 2] <- "MOOS"
chem_2021[c(38482:40513), 2] <- "CARI"
chem_2021 <- chem_2021[-c(12010:12017, 25950:25951), ] # out of water points 

chem_2021[c(58595:58618), 2] <- "STRT"

chem_2021 <- chem_2021[-c(58616:58618), ] # out of water points


ggplot(data = chem_2021, 
       aes(x = Site, y = fDOM.QSU, fill = as.factor(Site))) +
  geom_boxplot() +
  theme_classic()

chem_2018_2019_2020_2021 <- rbind(chem_2018, chem_2019, chem_2020, chem_2021)

ggplot(data = chem_2018_2019_2020_2021, 
       aes(x = Site, y = fDOM.QSU, fill = as.factor(year))) +
  geom_boxplot(position = position_dodge(preserve = "single")) +
  scale_fill_manual(values = c("#6A3D9A", "#E69F00", "brown", "deepskyblue4")) +
  theme_classic()

# write.csv(chem_2018_2019_2020_2021, "~/Documents/Storms/Output_from_analysis/From_07_Modelling/Results_figures/Discharge_chem/all.chem.csv")

###########################################################################################################
######################################## BOX PLOTS ########################################################
######### HI DAT ####

HI_dat <- read_csv("~/Documents/Storms/Output_from_analysis/Output_from_analysis/HI.dat.csv", 
                   col_types = cols(X1 = col_skip(), X1_1 = col_skip()))

HI_dat <- HI_dat[-c(45149:45198), ]
HI_dat <- HI_dat[,-1]
median_cl_boot <- function(x, conf = 0.95) {
  lconf <- (1 - conf)/2
  uconf <- 1 - lconf
  require(boot)
  bmedian <- function(x, ind) median(x[ind])
  bt <- boot(x, bmedian, 10000)
  bb <- boot.ci(bt, conf = 0.95, type = "perc")
  data.frame(y = median(x), ymin = quantile(bt$t, lconf), ymax = quantile(bt$t, 
                                                                          uconf))
}

HI.med <- HI_dat %>% 
  group_by(response, doy, site.ID, year, storm.num) %>% 
  nest() %>% 
  mutate(medHI.boot = map(data,
                          ~boot(data = .$HI,
                                statistic = function(x,i) median(x[i]),
                                R = 1000)),
         boot_tidy = map(medHI.boot, tidy, conf.int = TRUE, con.method = "perc"),
         n = map(data, nrow)) %>%
  unnest(cols = c(data, boot_tidy)) %>% 
  ungroup()
  

HI.fDOM.doy.pl <-HI.med %>% filter(response == "fDOM") %>%
  ggplot(aes(x = doy, y = statistic)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high, color = site.ID), size=.5, width = 0.1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(5)),
                     labels = c("French", "Moose", "Poker", "Stuart", "Vault", "Caribou")) +
  ylab("fDOM\nHysteresis Index") +
  xlab("day of year") +
  facet_grid(rows=vars(year)) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size=20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )


HI.NO3.doy.pl <-HI.med %>% filter(response == "NO3") %>%
  ggplot(aes(x = doy, y = statistic)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high, color = site.ID), size=.5, width = 0.1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(4)),
                     labels = c("French", "Moose", "Poker", "Stuart", "Vault", "Caribou")) +
  ylab(expression(atop(N*O[3]^"-", "Hysteresis Index"))) +
  xlab("day of year") +
  facet_grid(rows=vars(year)) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size=20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )

HI.SPC.doy.pl <-HI.med %>% filter(response == "SPC") %>%
  ggplot(aes(x = doy, y = statistic)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high, color = site.ID), size=.5, width = 0.1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(4)),
                     labels = c("French", "Moose", "Poker", "Stuart", "Vault", "Caribou")) +
  ylab(expression(atop(N*O[3]^"-", "Hysteresis Index"))) +
  xlab("day of year") +
  facet_grid(rows=vars(year)) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size=20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )

HI.turb.doy.pl <-HI.med %>% filter(response == "turb") %>%
  ggplot(aes(x = doy, y = statistic)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high, color = site.ID), size=.5, width = 0.1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(4)),
                     labels = c("French", "Moose", "Poker", "Stuart", "Vault", "Caribou")) +
  ylab(expression(atop(N*O[3]^"-", "Hysteresis Index"))) +
  xlab("day of year") +
  facet_grid(rows=vars(year)) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size=20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )

HI.med$responselabs <- factor(HI.med$response, labels = c("fDOM" = "fDOM", "NO3" = expression(N*O[3]^"-", "SPC" = "SPC", "turb" = "turb")))

HI.med$yearlabs <- factor(HI.med$year, labels = c('2018' = expression(atop("2018", "ppt = X mm")),'2019' = expression(atop("2019", "ppt = X mm")), '2020' = expression(atop("2020", "ppt = Y mm")), '2021' = expression(atop("2021", "ppt = Y mm"))))

HI.NO3.fDOM.doy.pl <-HI.med %>% filter(year == "2018") %>%
  ggplot(aes(x = doy, y = statistic)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high, color = site.ID), size=.5, width = 0.1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(4)),
                     labels = c("French", "Moose", "Caribou")) +
  ylab("Hysteresis Index") +
  xlab("day of year") +
  facet_grid(rows=vars(responselabs), labeller = label_parsed) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size = 20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )

HI.NO3.fDOM.doy.pl <-HI.med %>% filter(year == "2019") %>%
  ggplot(aes(x = doy, y = statistic)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high, color = site.ID), size=.5, width = 0.1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(5)),
                     labels = c("French", "Moose", "Poker", "Stuart", "Vault", "Caribou")) +
  ylab("Hysteresis Index") +
  xlab("day of year") +
  facet_grid(rows=vars(responselabs), labeller = label_parsed) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size = 20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )

HI.NO3.fDOM.doy.pl <-HI.med %>% filter(year == "2020") %>%
  ggplot(aes(x = doy, y = statistic)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high, color = site.ID), size=.5, width = 0.1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(5)),
                     labels = c("French", "Moose", "Poker", "Stuart", "Vault", "Caribou")) +
  ylab("Hysteresis Index") +
  xlab("day of year") +
  facet_grid(rows = vars(responselabs), labeller = label_parsed) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size = 20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )

HI.NO3.fDOM.doy.pl <-HI.med %>% filter(year == "2021") %>%
  ggplot(aes(x = doy, y = statistic)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_errorbar(aes(ymin = conf.low, ymax = conf.high, color = site.ID), size=.5, width = 0.1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(5)),
                     labels = c("French", "Moose", "Poker", "Stuart", "Vault", "Caribou")) +
  ylab("Hysteresis Index") +
  xlab("day of year") +
  facet_grid(rows = vars(responselabs), labeller = label_parsed) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        text = element_text(size = 20),
        strip.background = element_blank(),
        legend.title = element_blank()
  )

brewer.pal(12, "Set3")

HI.yrs.pl <- HI.med %>%
  ggplot(aes(x = site.ID, y = statistic, fill = as.factor(year))) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_boxplot() +
  ylab("Hysteresis Index") +
  scale_fill_manual(values = c("#E69F00", "brown", "deepskyblue4", "springgreen3", "#FCCDE5", "#BEBADA")) +
  scale_x_discrete(labels = c("French", "Moose", "Poker", "Stuart", "Vault", "Caribou")) +
  facet_grid(cols = vars(responselabs), labeller = label_parsed) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.title.x = element_blank(),
        text = element_text(size = 20),
        strip.background = element_blank(),
        legend.title = element_blank(),
        legend.position = c(0.425,0.95),
        legend.background = element_blank()
  )

HI.fDOM.pl <- HI.med %>% filter(response == "fDOM") %>%
  ggplot(aes(x = site.ID, y = statistic, fill = as.factor(year))) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_boxplot() +
  ylab("fDOM\nHysteresis Index") +
  scale_fill_manual(values = c("#E69F00", "brown", "deepskyblue4", "#6A3D9A")) +
  scale_x_discrete(labels = c("French", "Moose", "Caribou", "Poker", "Stuart", "Vault")) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.title.x = element_blank(),
        text = element_text(size = 20),
        strip.background = element_blank(),
        legend.title = element_blank(),
        legend.position = c(0.875,0.95),
        legend.background = element_blank()
  )

HI.NO3.pl <- HI.med %>% filter(response == "NO3") %>%
  ggplot(aes(x = site.ID, y = statistic, fill = as.factor(year))) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_boxplot() +
  ylab("NO3\nHysteresis Index") +
  scale_fill_manual(values = c("#E69F00", "brown", "deepskyblue4", "#6A3D9A")) +
  scale_x_discrete(labels = c("French", "Moose", "Caribou", "Poker", "Stuart", "Vault")) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.title.x = element_blank(),
        text = element_text(size = 20),
        strip.background = element_blank(),
        legend.title = element_blank(),
        legend.position = c(0.875,0.95),
        legend.background = element_blank()
  )

HI.SPC.pl <- HI.med %>% filter(response == "SPC") %>%
  ggplot(aes(x = site.ID, y = statistic, fill = as.factor(year))) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_boxplot() +
  ylab("SPC\nHysteresis Index") +
  scale_fill_manual(values = c("#E69F00", "brown", "deepskyblue4", "#6A3D9A")) +
  scale_x_discrete(labels = c("French", "Moose", "Caribou", "Poker", "Stuart", "Vault")) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.title.x = element_blank(),
        text = element_text(size = 20),
        strip.background = element_blank(),
        legend.title = element_blank(),
        legend.position = c(0.875,0.95),
        legend.background = element_blank()
  )

HI.turb.pl <- HI.med %>% filter(response == "turb") %>%
  ggplot(aes(x = site.ID, y = statistic, fill = as.factor(year))) +
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_boxplot() +
  ylab("Turb\nHysteresis Index") +
  scale_fill_manual(values = c("#E69F00", "brown", "deepskyblue4", "#6A3D9A")) +
  scale_x_discrete(labels = c("French", "Moose", "Caribou", "Poker", "Stuart", "Vault")) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.title.x = element_blank(),
        text = element_text(size = 20),
        strip.background = element_blank(),
        legend.title = element_blank(),
        legend.position = c(0.875,0.95),
        legend.background = element_blank())

grid.arrange(HI.NO3.pl, HI.fDOM.pl, HI.SPC.pl, HI.turb.pl,
             ncol = 2, nrow = 2)

#### mean HI ####
mean.HI<- HI.med %>% 
  group_by(response, site.ID, year) %>% 
  summarise_at(vars(HI), list(MEAN = mean), na.rm = TRUE)

mean.HI$pf <- NA
mean.HI[c(1:15,22:35,42:56,63:77), 5] <- "moderate"
mean.HI[c(16:21,36:41,57:62,78:83), 5] <- "high"

pf.fdom.lm <- lm(mean.HI$MEAN ~ mean.HI$pf)

ggplot(data = mean.HI,
       aes(x = pf,
           y = MEAN, 
           color = as.factor(year))) +
  geom_point() +
  geom_smooth(se = FALSE, method = "lm") + 
  facet_wrap(~response) +
  theme_classic()

#### CATCHMENT CHARACTERISTICS ####
### need to run 09_script to get to the CV.all.model data frame before running this 

# Colors 
#VAUL  #E7298A
#CARI  #FF7F00
#POKE  #3288BD
#FRCH  #A6761D
#STRT  #66C2A5
#MOOS  #6A3D9A

# Burn
# VAUL: 0  # unburned
# FRCH: 0.073 #unburned
# POKE: 0.33 # unburned
# CARI: 0.4 # unburned
# MOOS: 0.657 # burned
# STRT: 0.674 # burned

# PF EXTENT
# VAUL: 0.4067  
# CARI: 0.3891
# POKE: 0.3689
# FRCH: 0.3233
# STRT: 0.2871
# MOOS: 0.2813
setwd("~/Documents/Storms/Ancilliary_data")

AK_polys_190903_Predictors <- read_csv("~/Documents/Storms/Ancilliary_data/AK_polys_190903_Predictors.csv") # catchment characteristics dataset


catchment <- left_join(CV.all.model, AK_polys_190903_Predictors, by = "site.ID") # merge catchment characteristics with mean HIs
catchment <- catchment[!duplicated(catchment$meanHI), ] # removing duplicated rows 

NO3.catchment <- subset(catchment, catchment$response_var == "NO3")
fDOM.catchment <- subset(catchment, catchment$response_var == "fDOM")
SPC.catchment <- subset(catchment, catchment$response_var == "SPC")
turb.catchment <- subset(catchment, catchment$response_var == "turb")


CVcomp <- catchment %>% group_by(pf, response_var) %>% 
  summarize(meanHICV = mean(CVhi, na.rm = TRUE),
            meanBETACV = mean(CVbeta, na.rm = TRUE))

HIcomp <- antecedent_HI_FI_1_0 %>% group_by(pf, response_var) %>% 
  summarize(medianHI = median(Hyst_index, na.rm = TRUE),
            medianBETA = median(beta, na.rm = TRUE))
sum(HI_FI_fDOM$Hyst_index > 0)
sum(HI_FI_fDOM$Hyst_index < 0)

sum(HI_FI_fDOM$beta > 0, na.rm = TRUE)
sum(HI_FI_fDOM$beta < 0, na.rm = TRUE)

sum(HI_FI_turb$Hyst_index > 0)
sum(HI_FI_turb$Hyst_index < 0)

sum(HI_FI_turb$beta > 0, na.rm = TRUE)
sum(HI_FI_turb$beta < 0, na.rm = TRUE)

###  Facet wrap HI ###
# PF
a <- catchment %>% ggplot(aes(x = Pf_Prob_1m_mean_x, y = meanHI)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Mean hysteresis Index") +
  ggtitle("HI vs. PF") +
  facet_wrap(~response_var)

# wildfire
b <- catchment %>% ggplot(aes(x = pctburn_lg, y = meanHI)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Mean hysteresis Index") +
  ggtitle("HI vs. WF") +
  facet_wrap(~response_var)

# slope
c <- catchment %>% ggplot(aes(x = SLOPE_MEAN, y = meanHI)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Mean hysteresis Index") +
  ggtitle("HI vs. Slope") +
  facet_wrap(~response_var)

# NDVI
d <- catchment %>% ggplot(aes(x = NDVI_p50, y = meanHI)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Mean hysteresis Index") +
  ggtitle("HI vs. NDVI") +
  facet_wrap(~response_var)

HI <- grid.arrange(a,b,
             c,d,
             ncol = 2, nrow = 2)

setwd("~/Documents/Storms/Output_from_analysis/HI_plots/CatchmentCharacteristics ")

ggsave(filename="HI_catchment_characteristics.pdf",
       plot=HI, 
       height=8, width=10,
       unit="in")

###  Facet wrap CVHI ###
# PF
a <- catchment %>% ggplot(aes(x = Pf_Prob_1m_mean_x, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV hysteresis Index") +
  ggtitle("CVHI vs. PF") +
  facet_wrap(~response_var)

# wildfire
b <- catchment %>% ggplot(aes(x = pctburn_lg, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV hysteresis Index") +
  ggtitle("CVHI vs. WF") +
  facet_wrap(~response_var)

# slope
c <- catchment %>% ggplot(aes(x = SLOPE_MEAN, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV hysteresis Index") +
  ggtitle("CVHI vs. Slope") +
  facet_wrap(~response_var)

# NDVI
d <- catchment %>% ggplot(aes(x = NDVI_p50, y = CVhi)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV hysteresis Index") +
  ggtitle("CVHI vs. NDVI") +
  facet_wrap(~response_var)

CVHI <- grid.arrange(a,b,
                   c,d,
                   ncol = 2, nrow = 2)

  
ggsave(filename="CVHI_catchment_characteristics.pdf",
       plot=CVHI, 
       height=8, width=10,
       unit="in")


###  Facet wrap BETA ###
# PF
a <- catchment %>% ggplot(aes(x = Pf_Prob_1m_mean_x, y = meanBETA)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Mean BETA Index") +
  ggtitle("BETA vs. PF") +
  facet_wrap(~response_var)

# wildfire
b <- catchment %>% ggplot(aes(x = pctburn_lg, y = meanBETA)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Mean BETA Index") +
  ggtitle("BETA vs. WF") +
  facet_wrap(~response_var)

# slope
c <- catchment %>% ggplot(aes(x = SLOPE_MEAN, y = meanBETA)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Mean BETA Index") +
  ggtitle("BETA vs. Slope") +
  facet_wrap(~response_var)

# NDVI
d <- catchment %>% ggplot(aes(x = NDVI_p50, y = meanBETA)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("Mean BETA Index") +
  ggtitle("BETA vs. NDVI") +
  facet_wrap(~response_var)

BETA <- grid.arrange(a,b,
                   c,d,
                   ncol = 2, nrow = 2)

ggsave(filename="BETA_catchment_characteristics.pdf",
       plot=BETA, 
       height=8, width=10,
       unit="in")

###  Facet wrap CVBETA ###
# PF
a <- catchment %>% ggplot(aes(x = Pf_Prob_1m_mean_x, y = CVbeta)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV beta Index") +
  ggtitle("CVbeta vs. PF") +
  facet_wrap(~response_var)

# wildfire
b <- catchment %>% ggplot(aes(x = pctburn_lg, y = CVbeta)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV beta Index") +
  ggtitle("CVbeta vs. WF") +
  facet_wrap(~response_var)

# slope
c <- catchment %>% ggplot(aes(x = SLOPE_MEAN, y = CVbeta)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV beta Index") +
  ggtitle("CVbeta vs. Slope") +
  facet_wrap(~response_var)

# NDVI
d <- catchment %>% ggplot(aes(x = NDVI_p50, y = CVbeta)) + 
  geom_hline(yintercept = 0, linetype = "dotted", size = 1) +
  geom_point(aes(color = site.ID), size = 2) +
  scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+
  theme_bw() +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) + 
  stat_poly_eq(formula = y~x,
               label.y = "top", label.x = "right",
               aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")), 
               parse = TRUE) + 
  ylab("CV beta Index") +
  ggtitle("CVbeta vs. NDVI") +
  facet_wrap(~response_var)

CVBETA <- grid.arrange(a,b,
                     c,d,
                     ncol = 2, nrow = 2)


ggsave(filename="CVBETA_catchment_characteristics.pdf",
       plot=CVBETA, 
       height=8, width=10,
       unit="in")


# fDOM # 
# continuous PF
a <- ggplot(fDOM.catchment, aes(Pf_Prob_1m_mean_x, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  theme_bw() + ylab("HI") + xlab("PF extent ---->") + 
  ggtitle("fDOM") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# wildfire
b <- ggplot(fDOM.catchment, aes(pctburn_lg, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  theme_bw() + ylab("HI") + xlab("WF") + 
  ggtitle("fDOM") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# slope
c <- ggplot(fDOM.catchment, aes(SLOPE_MEAN, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  theme_bw() + ylab("HI") + xlab("Slope") + 
  ggtitle("fDOM") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# NDVI
d <- ggplot(fDOM.catchment, aes(NDVI_p50, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  theme_bw() + ylab("HI") + xlab("NDVI50") + 
  ggtitle("fDOM") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")


# NO3 # 
# continuous PF
e <- ggplot(NO3.catchment, aes(Pf_Prob_1m_mean_x, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("PF extent ---->") + 
  ggtitle(vn) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# wildfire
f <- ggplot(NO3.catchment, aes(BurnExtent, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("WF") + 
  ggtitle(vn) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# slope
g <- ggplot(NO3.catchment, aes(SLOPE_MEAN, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("Slope") + 
  ggtitle(vn) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# NDVI
h <- ggplot(NO3.catchment, aes(NDVI_p50, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("NDVI50") + 
  ggtitle(vn) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# SPC # 
# continuous PF
i <- ggplot(SPC.catchment, aes(Pf_Prob_1m_mean_x, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("PF extent ---->") + 
  ggtitle("SPC") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# wildfire
j <- ggplot(SPC.catchment, aes(BurnExtent, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("WF") + 
  ggtitle("SPC") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# slope
k <- ggplot(SPC.catchment, aes(SLOPE_MEAN, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("Slope") + 
  ggtitle("SPC") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# NDVI
l <- ggplot(SPC.catchment, aes(NDVI_p50, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("NDVI50") + 
  ggtitle("SPC") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# turb # 
# continuous PF
m <- ggplot(turb.catchment, aes(Pf_Prob_1m_mean_x, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("PF extent ---->") + 
  ggtitle("Turb") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# wildfire
n <- ggplot(turb.catchment, aes(BurnExtent, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("WF") + 
  ggtitle("Turb") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# slope
o <- ggplot(turb.catchment, aes(SLOPE_MEAN, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("Slope") + 
  ggtitle("Turb") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# NDVI
p <- ggplot(turb.catchment, aes(NDVI_p50, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("NDVI50") + 
  ggtitle("Turb") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

ggarrange(a,e,i,m,
          b,f,j,n,
          c,g,k,o,
          d,h,l,p,
          ncol = 4,
          nrow = 4)

ggarrange(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,
          ncol = 4,
          nrow = 4)

ggplot(catchment, aes(Pf_Prob_1m_mean_x, meanHI)) +
  geom_point(aes(shape = as.factor(year), color = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("PF") + 
  geom_hline(yintercept = 0, linetype="dashed", color = "red") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  facet_wrap(~response_var)

ggplot(catchment, aes(orgsoil_extent, meanHI)) +
  geom_point(aes(shape = as.factor(year), color = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("PF") + 
  geom_hline(yintercept = 0, linetype="dashed", color = "red") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  facet_wrap(~response_var)

ggplot(catchment, aes(BurnExtent, meanHI)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("WF") + 
  geom_hline(yintercept = 0, linetype="dashed", color = "red") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  facet_wrap(~response_var)

ggplot(catchment, aes(SLOPE_MEAN, meanHI)) +
  geom_point(aes(shape = as.factor(year), color = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("Slope") +
  geom_hline(yintercept = 0, linetype="dashed", color = "red") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  facet_wrap(~response_var, scales = "free_y")

ggplot(catchment, aes(NDVI_p50__median, meanHI)) +
  geom_point(aes(shape = as.factor(year), color = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("NDVI50") +
  geom_hline(yintercept = 0, linetype="dashed", color = "red") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  facet_wrap(~response_var)

#### BETA #
ggplot(catchment, aes(Pf_Prob_1m_mean_x, meanBETA)) +
  geom_point(aes(shape = as.factor(year), color = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("PF") + 
  geom_hline(yintercept = 0, linetype="dashed", color = "red") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  facet_wrap(~response_var)

ggplot(catchment, aes(BurnExtent, meanBETA)) +
  geom_point(aes(shape = as.factor(year), color = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("WF") + 
  geom_hline(yintercept = 0, linetype="dashed", color = "red") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  facet_wrap(~response_var, scales = "free_y")

ggplot(catchment, aes(SLOPE_MEAN, meanBETA)) +
  geom_point(aes(shape = as.factor(year), color = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("Slope") + 
  geom_hline(yintercept = 0, linetype="dashed", color = "red") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  facet_wrap(~response_var, scales = "free_y")

ggplot(catchment, aes(NDVI_p50, meanBETA)) +
  geom_boxplot(aes(fill = site.ID)) +
  scale_fill_manual(values=c("#6A3D9A", "#66C2A5", "#A6761D", "#3288BD", "#FF7F00", "#E7298A"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("NDVI50") + 
  geom_hline(yintercept = 0, linetype="dashed", color = "red") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  facet_wrap(~response_var)

# fDOM
fDOM.CV$SitePFcat <- factor(fDOM.CV$site.ID, levels = c("POKE", "CARI", "FRCH", "MOOS", "STRT", "VAUL")) # ascending PF extent
fDOM.CV$SitePFcat2 <- factor(fDOM.CV$site.ID, levels = c("MOOS", "STRT", "FRCH", "POKE", "CARI", "VAUL")) # ascending PF extent
fDOM.CV$SiteFIREcont <- factor(fDOM.CV$site.ID, levels = c("VAUL", "FRCH", "POKE", "CARI", "MOOS", "STRT")) # ascending fire extent

# pfHI <- antecedent_HI_FI_1_0 %>% group_by(response_var,pf,year) %>% 
#   summarize(meanHI = mean(Hyst_index),
#             meanFI = mean(Flush_index, na.rm = TRUE),
#             meanBETA = mean(beta, na.rm = TRUE),
#             pf = paste(pf))
# pfHI <- pfHI[!duplicated(pfHI$meanHI), ]

# pfHI_2 <- CV.all.model %>% group_by(response_var,pf,year) %>% 
#   summarize(meanHI = mean(meanHI),
#             meanFI = mean(meanFI, na.rm = TRUE),
#             meanBETA = mean(meanBETA, na.rm = TRUE),
#             pf = paste(pf),
#             burn = paste(burn)) # grouping by permafrost extent so I can make box plots of moderate vs. high permafrost of mean HI across years 
# pfHI_2 <- pfHI_2[!duplicated(pfHI_2$meanHI), ]
# 
# fDOMpfHI_2 <- subset(pfHI_2, response_var == "fDOM")

pfHI_2 <- CV.all.model %>% group_by(response_var,pf2,year) %>% 
  summarize(meanHI = mean(meanHI),
            meanFI = mean(meanFI, na.rm = TRUE),
            meanBETA = mean(meanBETA, na.rm = TRUE),
            pf2 = paste(pf2),
            burn = paste(burn)) # grouping by updated permafrost extent so I can make box plots of moderate vs. high permafrost of mean HI across years 
pfHI_2 <- pfHI_2[!duplicated(pfHI_2$meanHI), ]

fDOMpfHI_2 <- subset(pfHI_2, response_var == "fDOM")

# PF #
# Site
ggplot(fDOM.CV, aes(SitePFcat, meanHI)) +
  geom_boxplot(aes(fill = SitePFcat)) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("PF extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

with(fDOM.CV, t.test(meanHI[site.ID == "CARI"], meanHI[site.ID == "MOOS"], meanHI[site.ID == "FRCH"], meanHI[site.ID == "STRT"], meanHI[site.ID == "POKE"], meanHI[site.ID == "VAUL"]))
t.test(meanHI ~ site.ID, data = fDOM.CV)
summary(aov(meanHI ~ site.ID, data = fDOM.CV))
ggplot(fDOM.CV, aes(SitePFcat, meanfDOM)) +
  geom_boxplot(aes(fill = SitePFcat)) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() + ylab("fDOM") + xlab("PF extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Categorical #
ggplot(fDOMpfHI_2, aes(pf2, meanHI)) +
  geom_boxplot(aes(fill = pf2)) +
  scale_fill_manual(values=c("#3288BD", "brown"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("PF extent") + 
  ylim(-0.3,0.3) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

fDOMpfHI_3 <- fDOMpfHI_2[-4, ] # removing 2018 cause no 2018 data for high PF
a <- ggplot(fDOMpfHI_3, aes(pf2, meanHI)) +
  geom_boxplot(aes(fill = pf2)) +
  scale_fill_manual(values=c("#3288BD", "brown"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("") + 
  ggtitle("fDOM") +
  ylim(-0.3,0.3) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")



fDOMpfHI_2_HIGH <- subset(fDOMpfHI_3, pf2 == "High")
fDOMpfHI_2_moderate <- subset(fDOMpfHI_3, pf2 == "Moderate")

t.test(fDOMpfHI_2_HIGH$meanHI, fDOMpfHI_2_moderate$meanHI, paired = FALSE)

ggplot(fDOM.CV, aes(pf, meanfDOM)) +
  geom_boxplot(aes(fill = pf)) +
  scale_fill_manual(values=c("#3288BD", "brown"), "Catchment") +
  theme_bw() + ylab("fDOM") + xlab("PF extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# # meanTemp
# ggplot(fDOM.CV, aes(Site2, meanHI)) +
#   geom_boxplot(aes(fill = Site2)) +
#   scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
#   theme_bw() + ylab("HI") + xlab("PF extent ---->") + 
#   theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Wildfire # 
# Site
ggplot(fDOM.CV, aes(SiteFIREcont, meanHI)) +
  geom_boxplot(aes(fill = SiteFIREcont)) +
  scale_fill_manual(values=c("#E7298A", "#A6761D", "#3288BD", "#FF7F00", "#6A3D9A", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("Fire extent") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Categorical
b <- ggplot(fDOM.CV, aes(burn, meanHI)) +
  geom_boxplot(aes(fill = burn)) +
  scale_fill_manual(values=c("#D95F02", "#1B9E77"), "Catchment") +
  theme_bw() + ylab("") + xlab("") + 
  ylim(-0.3,0.3) +
  ggtitle("fDOM") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

fDOM.CV.burn <- subset(fDOM.CV, burn == "burned")
fDOM.CV.burn <- fDOM.CV.burn[-1,] # removing 2018 data 
fDOM.CV.unburn <- subset(fDOM.CV, burn == "unburned")
fDOM.CV.unburn <- fDOM.CV.unburn[-c(1,5), ] # removing 2018 data 
t.test(fDOM.CV.burn$meanHI, fDOM.CV.unburn$meanHI, paired = TRUE)



#Continuous
ggplot(fDOM.CV, aes(BurnExtent, meanHI)) +
  geom_boxplot(aes(fill = SiteFIREcont)) +
  scale_fill_manual(values=c("#E7298A", "#A6761D", "#3288BD", "#FF7F00", "#6A3D9A", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("Fire extent") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")


### BETA ### 
# PF #
# Site
ggplot(fDOM.CV, aes(SitePFcat, meanBETA)) +
  geom_boxplot(aes(fill = SitePFcat)) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("PF extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Categorical #
ggplot(fDOMpfHI_2, aes(pf, meanBETA)) +
  geom_boxplot(aes(fill = pf)) +
  scale_fill_manual(values=c("#3288BD", "brown"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("PF extent") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

t.test(fDOMpfHI_2_HIGH$meanBETA, fDOMpfHI_2_moderate$meanBETA, paired = TRUE)


ggplot(fDOM.CV, aes(pf, meanfDOM)) +
  geom_boxplot(aes(fill = pf)) +
  scale_fill_manual(values=c("#3288BD", "brown"), "Catchment") +
  theme_bw() + ylab("fDOM") + xlab("PF extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Wildfire # 
# Site
ggplot(fDOM.CV, aes(SiteFIREcont, meanBETA)) +
  geom_boxplot(aes(fill = SiteFIREcont)) +
  scale_fill_manual(values=c("#E7298A", "#A6761D", "#3288BD", "#FF7F00", "#6A3D9A", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("Fire extent") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Categorical
ggplot(fDOM.CV, aes(burn, meanBETA)) +
  geom_boxplot(aes(fill = burn)) +
  scale_fill_manual(values=c("#3288BD", "brown"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("Fire extent") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

#Continuous
ggplot(fDOM.CV, aes(BurnExtent, meanBETA)) +
geom_boxplot(aes(fill = SiteFIREcont)) +
scale_fill_manual(values=c("#E7298A", "#A6761D", "#3288BD", "#FF7F00", "#6A3D9A", "#66C2A5"), "Catchment") +
theme_bw() + ylab("BETA") + xlab("Fire extent") +
theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Geom_smooth # 
fDOM.CV$year1 <- fDOM.CV$year
fDOM.CV$year1 <- as.character(fDOM.CV$year1)
fDOM.CV$site.ID1 <- as.character(fDOM.CV$site.ID)
fDOM.CV$site.ID1 <- as.numeric(fDOM.CV$site.ID1)

ggplot(fDOM.CV, aes(site.ID, meanHI, color = year1)) +
  geom_point() +
  geom_smooth(se = FALSE, method = "lm")

ggplot(fDOM.CV, aes(meanfDOM, meanHI, color = year1)) +
  geom_point(aes(shape = site.ID)) +
  geom_smooth(se = FALSE, method = "lm") +
  theme_bw() + ylab("HI") + xlab("meanfDOM") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20))

#NO3
NO3.CV$SitePFcat <- factor(NO3.CV$site.ID, levels = c("POKE", "CARI", "FRCH", "MOOS", "STRT", "VAUL")) # ascending PF extent
NO3.CV$SiteFIREcont <- factor(NO3.CV$site.ID, levels = c("VAUL", "FRCH", "POKE", "CARI", "MOOS", "STRT")) # ascending fire extent

NO3pfHI <- subset(pfHI_2, response_var == "NO3")

# PF #
# Site
ggplot(NO3.CV, aes(SitePFcat, meanHI)) +
  geom_boxplot(aes(fill = SitePFcat)) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("PF extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Categorical #
brewer.pal(n = 9, name = "Set1")
c <- ggplot(NO3pfHI, aes(pf2, meanHI)) +
  geom_boxplot(aes(fill = pf2)) +
  scale_fill_manual(values=c("#3288BD", "brown"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("PF extent") + 
  ylim(-0.3,0.3) +
  ggtitle("NO3")+
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

NO3pfHI_2_HIGH <- subset(NO3pfHI, pf2 == "High")
NO3pfHI_2_moderate <- subset(NO3pfHI, pf2 == "Moderate")

t.test(NO3pfHI_2_HIGH$meanHI, NO3pfHI_2_moderate$meanHI, paired = TRUE)

NO3pfHI_2 <- NO3pfHI[-4, ] # removing 2018 cause no 2018 data for high PF
ggplot(NO3pfHI_2, aes(pf2, meanHI)) +
  geom_boxplot(aes(fill = pf2)) +
  scale_fill_manual(values=c("#3288BD", "brown"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("PF extent") + 
  ylim(0,0.3) +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

NO3pfHI_2_HIGH <- subset(NO3pfHI_2, pf == "high")
NO3pfHI_2_moderate <- subset(NO3pfHI_2, pf == "medium")

t.test(NO3pfHI_2_HIGH$meanHI, NO3pfHI_2_moderate$meanHI, paired = TRUE)



# # meanTemp
# ggplot(fDOM.CV, aes(Site2, meanHI)) +
#   geom_boxplot(aes(fill = Site2)) +
#   scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
#   theme_bw() + ylab("HI") + xlab("PF extent ---->") + 
#   theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Wildfire # 
# Site
ggplot(NO3.CV, aes(SiteFIREcont, meanHI)) +
  geom_boxplot(aes(fill = SiteFIREcont)) +
  scale_fill_manual(values=c("#E7298A", "#A6761D", "#3288BD", "#FF7F00", "#6A3D9A", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("Fire extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Categorical
ggplot(NO3.CV, aes(burn, meanHI)) +
  geom_boxplot(aes(fill = burn)) +
  scale_fill_manual(values=c("#3288BD", "brown"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("Fire extent") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

d <- ggplot(NO3.CV, aes(burn, meanHI)) +
  geom_boxplot(aes(fill = burn)) +
  scale_fill_manual(values=c("#D95F02", "#1B9E77"), "Catchment") +
  theme_bw() + ylab("") + xlab("Fire extent") + 
  ylim(-0.3,0.3) +
  ggtitle("NO3")+
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

ggarrange(a,b,
          c,d, ncol = 2, nrow = 2)

NO3.CV.burn <- subset(NO3.CV, burn == "burned")
NO3.CV.unburn <- subset(NO3.CV, burn == "unburned")
NO3.CV.unburn <- NO3.CV.unburn[-c(1,5), ] # removing 2018 data 
t.test(NO3.CV.burn$meanHI, NO3.CV.unburn$meanHI, paired = TRUE)

#Continuous
ggplot(NO3.CV, aes(BurnExtent, meanHI)) +
  geom_boxplot(aes(fill = SiteFIREcont)) +
  scale_fill_manual(values=c("#E7298A", "#A6761D", "#3288BD", "#FF7F00", "#6A3D9A", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("HI") + xlab("Fire extent") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

### BETA ### 
# PF #
# Site
ggplot(NO3.CV, aes(SitePFcat, meanBETA)) +
  geom_boxplot(aes(fill = SitePFcat)) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("PF extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Categorical #
ggplot(NO3pfHI, aes(pf, meanBETA)) +
  geom_boxplot(aes(fill = pf)) +
  scale_fill_manual(values=c("#3288BD", "brown"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("PF extent") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# # meanTemp
# ggplot(fDOM.CV, aes(Site2, meanHI)) +
#   geom_boxplot(aes(fill = Site2)) +
#   scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
#   theme_bw() + ylab("HI") + xlab("PF extent ---->") + 
#   theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Wildfire # 
# Site
ggplot(NO3.CV, aes(SiteFIREcont, meanBETA)) +
  geom_boxplot(aes(fill = SiteFIREcont)) +
  scale_fill_manual(values=c("#E7298A", "#A6761D", "#3288BD", "#FF7F00", "#6A3D9A", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("Fire extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

# Categorical
ggplot(NO3.CV, aes(burn, meanBETA)) +
  geom_boxplot(aes(fill = burn)) +
  scale_fill_manual(values=c("#3288BD", "brown"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("Fire extent") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

#Continuous
ggplot(NO3.CV, aes(BurnExtent, meanBETA)) +
  geom_boxplot(aes(fill = SiteFIREcont)) +
  scale_fill_manual(values=c("#E7298A", "#A6761D", "#3288BD", "#FF7F00", "#6A3D9A", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("BETA") + xlab("Fire extent") +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")




### fDOM and NO3 biplot ###  
brewer.pal(n = 9, name = "Pastel1")

fDOM.NO3.CV <- left_join(fDOM.CV, NO3.CV, by = c("site.ID", "year"))

ggplot(fDOM.NO3.CV, aes(x=Site2.x, shape = Site2.x)) +
  geom_point(aes(y=meanHI.x, color = response_var.x)) + 
  geom_point(aes(y=meanHI.y, color = response_var.y)) + 
  scale_y_continuous("HI fDOM",
                     sec.axis = sec_axis(~.* 1, name = vn)) +
  theme_bw() +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  xlab("PF Extent ---->")

ggplot(fDOM.NO3.CV, aes(x=SiteFIREcont.x, shape = SiteFIREcont.x)) +
  geom_point(aes(y=meanHI.x, color = response_var.x)) + 
  geom_point(aes(y=meanHI.y, color = response_var.y)) + 
  scale_y_continuous("HI fDOM",
                     sec.axis = sec_axis(~.* 1, name = vn)) +
  theme_bw() +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  xlab("Fire Extent ---->")

# BOX PLOT attempt
ggplot(fDOM.NO3.CV, aes(x = SitePFcat.x)) +
  geom_boxplot(aes(y = meanHI.x, fill = response_var.x)) +
  geom_boxplot(aes(y = meanHI.y, fill = response_var.y)) +
  scale_y_continuous("fDOM",
                     sec.axis = sec_axis(~.* 1, name = vn)) +
  scale_fill_manual(values=c("brown", "#F2F2F2"), "Constituent") +
  theme_bw() +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  xlab("PF Extent ---->")

fDOM.NO3.CV$SiteFIREcont.x <- factor(fDOM.NO3.CV$site.ID, levels = c("VAUL", "FRCH", "CARI", "POKE", "MOOS", "STRT")) # ascending fire extent

ggplot(fDOM.NO3.CV, aes(x = SiteFIREcont.x)) +
  geom_boxplot(aes(y = meanHI.x, fill = response_var.x)) +
  geom_boxplot(aes(y = meanHI.y, fill = response_var.y)) +
  scale_y_continuous("fDOM",
                     sec.axis = sec_axis(~.* 1, name = vn)) +
  scale_fill_manual(values=c("brown", "#F2F2F2"), "Constituent") +
  theme_bw() +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none" ) +
  xlab("Fire Extent ---->")


### BETA ###
ggplot(fDOM.NO3.CV, aes(x=SitePFcat.x, shape = SitePFcat.x)) +
  geom_point(aes(y=meanBETA.x, color = response_var.x)) + 
  geom_point(aes(y=meanBETA.y, color = response_var.y)) + 
  scale_y_continuous("BETA fDOM",
                     sec.axis = sec_axis(~.* 1, name = vn)) +
  theme_bw() +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  xlab("PF Extent ---->")

ggplot(fDOM.NO3.CV, aes(x=SiteFIREcont.x, shape = SiteFIREcont.x)) +
  geom_point(aes(y=meanHI.x, color = response_var.x)) + 
  geom_point(aes(y=meanHI.y, color = response_var.y)) + 
  scale_y_continuous("BEETA fDOM",
                     sec.axis = sec_axis(~.* 1, name = vn)) +
  theme_bw() +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  xlab("Fire Extent ---->")


#### mean solute concentration ####
DOD_chem <- read_csv("Output_from_analysis/From_07_Modelling/Results_figures/Discharge_chem/all.chem.csv", 
                     col_types = cols(X1 = col_skip(), fDOM.QSU = col_double(), 
                                      nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                      Turbidity.FNU = col_double()))
DOD_chem$date_timeAK <- as.POSIXct(DOD_chem$DateTime, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")

DOD_chem.df <- transform(DOD_chem, pf = ifelse(Site=="VAUL" | Site == "STRT", "High", "Moderate"))

DOD_chem$Site2 <- factor(DOD_chem$Site, levels = c("POKE", "CARI", "FRCH", "MOOS", "STRT", "VAUL"))

DOD_chem <- filter(DOD_chem, fDOM.QSU > 0)

CARI <- subset(DOD_chem, Site == "CARI")
FRCH <- subset(DOD_chem, Site == "FRCH")
MOOS <- subset(DOD_chem, Site == "MOOS")
POKE <- subset(DOD_chem, Site == "POKE")
STRT <- subset(DOD_chem, Site == "STRT")
VAUL <- subset(DOD_chem, Site == "VAUL")

# Filtering by year to compare concentrations across years 
chem_2018 <- subset(DOD_chem, year == "2018")
chem_2019 <- subset(DOD_chem, year == "2019")
chem_2020 <- subset(DOD_chem, year == "2020")
chem_2021 <- subset(DOD_chem, year == "2021")

# The common window for time since peak chena is day 35-142 so the dates are as follows:
      # these dates are in the chem_year csv summary file 
# 2018 TPC: 5/23
# 2019 TPC: 5/12
# 2020 TPC: 5/13
# 2021 TPC: 5/8
chem_2018 <- subset(chem_2018, DateTime > "2018-06-27" & DateTime < "2018-10-12")
chem_2019 <- subset(chem_2019, DateTime > "2019-06-16" & DateTime < "2019-10-01")
chem_2020 <- subset(chem_2020, DateTime > "2020-06-17" & DateTime < "2020-09-30")
chem_2021 <- subset(chem_2021, DateTime > "2021-06-12" & DateTime < "2021-09-27")

# make a julian day columnn:
chem_2018$julian <- yday(chem_2018$DateTime)
chem_2018$TSC <- chem_2018$julian-143 # TSC column

chem_2019$julian <- yday(chem_2019$DateTime)
chem_2019$TSC <- chem_2019$julian-132 # TSC column

chem_2020$julian <- yday(chem_2020$DateTime)
chem_2020$TSC <- chem_2020$julian-134 # TSC column

chem_2021$julian <- yday(chem_2021$DateTime)
chem_2021$TSC <- chem_2021$julian-128 # TSC column

# combine them to be able to plot it 
similar_chem_year <- rbind(chem_2018, chem_2019, chem_2020, chem_2021)

CARI_year <- subset(similar_chem_year, Site == "CARI")
FRCH_year <- subset(similar_chem_year, Site == "FRCH")
MOOS_year <- subset(similar_chem_year, Site == "MOOS")
POKE_year <- subset(similar_chem_year, Site == "POKE")
STRT_year <- subset(similar_chem_year, Site == "STRT")
VAUL_year <- subset(similar_chem_year, Site == "VAUL")

# Mean daily concentration 
mean_daily <- similar_chem_year %>% 
  group_by(day, Site, year) %>% 
  summarise(dailyfDOM = mean(fDOM.QSU),
            dailyNO3 = mean(nitrateuM),
            dailySPC = mean(SpCond.uScm),
            dailyTurb = mean(Turbidity.FNU))

mean_daily$julian <- yday(mean_daily$day)
mean_daily$TSC <- NA
mean_daily[c(1:249), 9] <- mean_daily[c(1:249), 8] - 143
mean_daily[c(250:855), 9] <- mean_daily[c(250:855), 8] - 132
mean_daily[c(856:1416), 9] <- mean_daily[c(856:1416), 8] - 134
mean_daily[c(1417:1945), 9] <- mean_daily[c(1417:1945), 8] - 128

# plot
ggplot(mean_daily, aes(x = Site, y = dailyfDOM)) +
  geom_boxplot() +
  facet_wrap(~year)

ggplot(mean_daily, aes(x = TSC, y = dailyfDOM, col = Site)) +
  geom_line() +
  facet_wrap(~year) +
  theme_classic()

ggplot(mean_daily, aes(x = TSC, y = dailyNO3, col = Site)) +
  geom_line() +
  facet_wrap(~year) +
  theme_classic()

ggplot(mean_daily, aes(x = TSC, y = dailySPC, col = Site)) +
  geom_line() +
  facet_wrap(~year) +
  theme_classic()

ggplot(mean_daily, aes(x = TSC, y = dailyTurb, col = Site)) +
  geom_line() +
  facet_wrap(~year) +
  theme_classic()



# write.table(mean_daily, file = "chem_year_similar.csv", sep = ",", col.names = NA,
#             qmethod = "double")

year.cari <- CARI_year %>% 
  group_by(year) %>% 
  summarise(medianfDOM = median(fDOM.QSU),
            medianNO3 = median(nitrateuM, na.rm = TRUE),
            medianSPC = median(SpCond.uScm, na.rm = TRUE),
            medianTURB = median(Turbidity.FNU, na.rm = TRUE))

year.poke <- POKE %>% 
  group_by(year) %>% 
  summarise(medianfDOM = median(fDOM.QSU),
            medianNO3 = median(nitrateuM, na.rm = TRUE),
            medianSPC = median(SpCond.uScm, na.rm = TRUE),
            medianTURB = median(Turbidity.FNU, na.rm = TRUE))

year.moos <- MOOS %>% 
  group_by(year) %>% 
  summarise(medianfDOM = median(fDOM.QSU),
            medianNO3 = median(nitrateuM, na.rm = TRUE),
            medianSPC = median(SpCond.uScm, na.rm = TRUE),
            medianTURB = median(Turbidity.FNU, na.rm = TRUE))

year.vaul <- VAUL %>% 
  group_by(year) %>% 
  summarise(medianfDOM = median(fDOM.QSU),
            medianNO3 = median(nitrateuM, na.rm = TRUE),
            medianSPC = median(SpCond.uScm, na.rm = TRUE),
            medianTURB = median(Turbidity.FNU, na.rm = TRUE))
year.strt <- STRT %>% 
  group_by(year) %>% 
  summarise(medianfDOM = median(fDOM.QSU),
            medianNO3 = median(nitrateuM, na.rm = TRUE),
            medianSPC = median(SpCond.uScm, na.rm = TRUE),
            medianTURB = median(Turbidity.FNU, na.rm = TRUE))
year.frch <- FRCH %>% 
  group_by(year) %>% 
  summarise(medianfDOM = median(fDOM.QSU),
            medianNO3 = median(nitrateuM, na.rm = TRUE),
            medianSPC = median(SpCond.uScm, na.rm = TRUE),
            medianTURB = median(Turbidity.FNU, na.rm = TRUE))

similar_chem <- rbind(year.cari, year.moos, year.poke, 
                      year.vaul, year.strt, year.frch)

#  write.table(similar_chem, file = "chem_year_similar.csv", sep = ",", col.names = NA,
#              qmethod = "double")
# # fDOM #
# PF # 
setwd("~/Documents/Storms/Output_from_analysis/From_07_Modelling/Results_figures/Discharge_chem")

ggplot(DOD_chem, aes(Site2, fDOM.QSU)) +
  geom_boxplot(aes(fill = Site2)) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() + ylab("fDOM") + xlab("PF extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

ggplot(DOD_chem, aes(Site2, fDOM.QSU)) +
  geom_boxplot(aes(fill = Site2)) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() + ylab("fDOM") + xlab("PF extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  facet_wrap(~year)

ggsave(filename="fDOM_year.pdf",
       height=10, width=10,
       unit="in")


median(CARI$fDOM.QSU)
median(FRCH$fDOM.QSU)
median(MOOS$fDOM.QSU)
median(POKE$fDOM.QSU)
median(STRT$fDOM.QSU)
median(VAUL$fDOM.QSU)

data <- c(0,1,2,3,3,3,3,4,4,4,5,5,6,7,7,8,9)
cv(data, na.rm=TRUE)
sd(data)
mean(data)
sd(CARI$fDOM.QSU)
mean(CARI$fDOM.QSU)

cv(CARI$fDOM.QSU)
cv(FRCH$fDOM.QSU)
cv(MOOS$fDOM.QSU)
cv(POKE$fDOM.QSU)
cv(STRT$fDOM.QSU)
cv(VAUL$fDOM.QSU)

mean(CARI$fDOM.QSU)
mean(FRCH$fDOM.QSU)
mean(MOOS$fDOM.QSU)
mean(POKE$fDOM.QSU)
mean(STRT$fDOM.QSU)
mean(VAUL$fDOM.QSU)

median(CARI$nitrateuM, na.rm = TRUE)
median(FRCH$nitrateuM, na.rm = TRUE)
median(MOOS$nitrateuM, na.rm = TRUE)
median(POKE$nitrateuM, na.rm = TRUE)
median(STRT$nitrateuM, na.rm = TRUE)
median(VAUL$nitrateuM, na.rm = TRUE)

cv(CARI$nitrateuM, na.rm = TRUE)
cv(FRCH$nitrateuM, na.rm = TRUE)
cv(MOOS$nitrateuM, na.rm = TRUE)
cv(POKE$nitrateuM, na.rm = TRUE)
cv(STRT$nitrateuM, na.rm = TRUE)
cv(VAUL$nitrateuM, na.rm = TRUE)

mean(CARI$nitrateuM, na.rm = TRUE)
mean(FRCH$nitrateuM, na.rm = TRUE)
mean(MOOS$nitrateuM, na.rm = TRUE)
mean(POKE$nitrateuM, na.rm = TRUE)
mean(STRT$nitrateuM, na.rm = TRUE)
mean(VAUL$nitrateuM, na.rm = TRUE)

median(CARI$SpCond.uScm, na.rm = TRUE)
median(FRCH$SpCond.uScm, na.rm = TRUE)
median(MOOS$SpCond.uScm, na.rm = TRUE)
median(POKE$SpCond.uScm, na.rm = TRUE)
median(STRT$SpCond.uScm, na.rm = TRUE)
median(VAUL$SpCond.uScm, na.rm = TRUE)

cv(CARI$SpCond.uScm, na.rm = TRUE)
cv(FRCH$SpCond.uScm, na.rm = TRUE)
cv(MOOS$SpCond.uScm, na.rm = TRUE)
cv(POKE$SpCond.uScm, na.rm = TRUE)
cv(STRT$SpCond.uScm, na.rm = TRUE)
cv(VAUL$SpCond.uScm, na.rm = TRUE)

mean(CARI$SpCond.uScm, na.rm = TRUE)
mean(FRCH$SpCond.uScm, na.rm = TRUE)
mean(MOOS$SpCond.uScm, na.rm = TRUE)
mean(POKE$SpCond.uScm, na.rm = TRUE)
mean(STRT$SpCond.uScm, na.rm = TRUE)
mean(VAUL$SpCond.uScm, na.rm = TRUE)

median(CARI$Turbidity.FNU, na.rm = TRUE)
median(FRCH$Turbidity.FNU, na.rm = TRUE)
median(MOOS$Turbidity.FNU, na.rm = TRUE)
median(POKE$Turbidity.FNU, na.rm = TRUE)
median(STRT$Turbidity.FNU, na.rm = TRUE)
median(VAUL$Turbidity.FNU, na.rm = TRUE)

cv(CARI$Turbidity.FNU, na.rm = TRUE)
cv(FRCH$Turbidity.FNU, na.rm = TRUE)
cv(MOOS$Turbidity.FNU, na.rm = TRUE)
cv(POKE$Turbidity.FNU, na.rm = TRUE)
cv(STRT$Turbidity.FNU, na.rm = TRUE)
cv(VAUL$Turbidity.FNU, na.rm = TRUE)

mean(CARI$Turbidity.FNU, na.rm = TRUE)
mean(FRCH$Turbidity.FNU, na.rm = TRUE)
mean(MOOS$Turbidity.FNU, na.rm = TRUE)
mean(POKE$Turbidity.FNU, na.rm = TRUE)
mean(STRT$Turbidity.FNU, na.rm = TRUE)
mean(VAUL$Turbidity.FNU, na.rm = TRUE)

median(CARI$Q, na.rm = TRUE)
median(FRCH$Q, na.rm = TRUE)
median(MOOS$Q, na.rm = TRUE)
median(POKE$Q, na.rm = TRUE)
median(STRT$Q, na.rm = TRUE)
median(VAUL$Q, na.rm = TRUE)

mean(CARI$Q, na.rm = TRUE)
mean(FRCH$Q, na.rm = TRUE)
mean(MOOS$Q, na.rm = TRUE)
mean(POKE$Q, na.rm = TRUE)
mean(STRT$Q, na.rm = TRUE)
mean(VAUL$Q, na.rm = TRUE)

ggplot(DOD_chem, aes(Site2, Q)) +
  geom_boxplot(aes(fill = Site2)) +
  scale_fill_manual(values=c("#3288BD","#FF7F00", "#A6761D", "#6A3D9A", "#66C2A5", "#E7298A"), "Catchment") +
  theme_bw() + ylab("fDOM") + xlab("PF extent ---->") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")


# Wildfire #

fDOM.mean <- DOD_chem %>% group_by(Site) %>% 
  summarize(meanDOC = mean(fDOM.QSU, na.rm = TRUE),
            meanNO3 = mean(nitrateuM, na.rm = TRUE))

ggplot(fDOM.mean, aes(Site, meanDOC)) + 
  geom_point(aes(color = Site)) +
  scale_fill_manual(values=c("#FF7F00","#2D004B", "#6A3D9A", "#3288BD", "#ABDDA4", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("DOC") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")


fDOM.mean$Site2 <- factor(fDOM.mean$Site, levels = c("POKE", "CARI", "FRCH", "MOOS", "STRT", "VAUL"))

ggplot(fDOM.mean, aes(Site2, meanDOC)) + 
  geom_point(aes(color = Site)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) +
  scale_fill_manual(values=c("#FF7F00","#2D004B", "#6A3D9A", "#3288BD", "#ABDDA4", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("DOC") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")


ggplot(fDOM.mean, aes(x=Site2)) +
  geom_point(aes(y=meanDOC)) + 
  geom_point(aes(y=meanNO3)) + 
  scale_fill_manual(values=c("#FF7F00","#2D004B", "#6A3D9A", "#3288BD", "#ABDDA4", "#66C2A5"), "Catchment") +
  scale_y_continuous("DOC",
                     sec.axis = sec_axis(~.* 1, name = "NO3")) +
  theme_bw() +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  xlab("PF Extent ->")

                  
fDOM.mean.year <- DOD_chem %>% group_by(Site, year) %>% 
  summarize(meanDOC = mean(fDOM.QSU, na.rm = TRUE),
            meanNO3 = mean(nitrateuM, na.rm = TRUE))

fDOM.mean.year$Site2 <- factor(fDOM.mean.year$Site, levels = c("POKE", "CARI", "FRCH", "MOOS", "STRT", "VAUL")) # ascending pf extent

ggplot(fDOM.mean.year, aes(Site2, meanDOC)) + 
  geom_point(aes(color = Site)) +
  geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) +
  scale_fill_manual(values=c("#FF7F00","#2D004B", "#6A3D9A", "#3288BD", "#ABDDA4", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("DOC") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")


ggplot(fDOM.mean.year,aes(x = Site2, y = meanDOC, shape = Site))+
  geom_point()+
  theme_classic() +
  geom_smooth(aes(Site2,meanDOC, colour=as.factor(year)), method=lm, na.rm = TRUE, se=FALSE) 

fDOM.mean.year[12,4] <- NA

ggplot(fDOM.mean.year,aes(x = Site2, y = meanNO3, shape = Site))+
  geom_point()+
  theme_classic() +
  geom_smooth(aes(Site2,meanDOC, colour=as.factor(year)), method=lm, na.rm = TRUE, se=FALSE)  

ggplot(fDOM.mean.year, aes(x=Site2, shape = Site, color = year)) +
  geom_point(aes(y=meanDOC)) + 
  geom_point(aes(y=meanNO3)) + 
  scale_fill_manual(values=c("#FF7F00","#2D004B", "#6A3D9A", "#3288BD", "#ABDDA4", "#66C2A5"), "Catchment") +
  scale_y_continuous("DOC",
                     sec.axis = sec_axis(~.* 1, name = vn)) +
  theme_bw() +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  xlab("PF Extent ->")

fDOM.mean.year$Site3 <- factor(fDOM.mean.year$Site, levels = c("VAUL", "FRCH", "POKE", "CARI", "MOOS", "STRT")) # ascending fire extent

ggplot(fDOM.mean.year,aes(x = Site3, y = meanDOC, shape = Site))+
  geom_point()+
  theme_classic() +
  geom_smooth(aes(Site3,meanDOC, colour=as.factor(year)), method=lm, na.rm = TRUE, se=FALSE) +
  xlab("Fire Extent")

ggplot(fDOM.mean.year, aes(x=Site3, shape = Site, color = year)) +
  geom_point(aes(y=meanDOC)) + 
  geom_point(aes(y=meanNO3)) + 
  scale_fill_manual(values=c("#FF7F00","#2D004B", "#6A3D9A", "#3288BD", "#ABDDA4", "#66C2A5"), "Catchment") +
  scale_y_continuous("DOC",
                     sec.axis = sec_axis(~.* 1, name = vn)) +
  theme_bw() +
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  xlab("Fire Extent ->")

#### ANOVA ####
# Sum Sq column displays the total variation between the group means and the overall mean
# The Mean Sq column: calculated by dividing the sum of squares by the degrees of freedom for each parameter.
# F - value: The larger the F value, the more likely it is that the variation caused by the independent variable is real and not due to chance
library(ggplot2)
library(ggpubr)
library(tidyverse)
library(broom)
library(AICcmodavg)

# This is taking an ANOVA of the mean HI for each catchment 
one.way.no3 <- aov(meanHI ~ site.ID, data = NO3.CV)
summary(one.way.no3) # seemingly not significant  (p-value =0.679)

one.way.fDOM <- aov(meanHI ~ site.ID, data = fDOM.CV)
summary(one.way.fDOM) # seemingly significant  (p-value = 0.000957)

one.way.SPC <- aov(meanHI ~ site.ID, data = SPC.CV)
summary(one.way.SPC) # seemingly not significant  (p-value = 0.586)

one.way.Turb <- aov(meanHI ~ site.ID, data = turb.CV)
summary(one.way.Turb) # seemingly not significant  (p-value = 0.215)

# BETA #
beta.one.way.no3 <- aov(meanBETA ~ site.ID, data = NO3.CV)
summary(beta.one.way.no3) # seemingly not significant  (p-value =0.205)

beta.one.way.fDOM <- aov(meanBETA ~ site.ID, data = fDOM.CV)
summary(beta.one.way.fDOM) # seemingly significant  (p-value = 0.00412)

beta.one.way.SPC <- aov(meanBETA ~ site.ID, data = SPC.CV)
summary(beta.one.way.SPC) # seemingly not significant (BUT CLOSE)  (p-value = 0.0653)

beta.one.way.Turb <- aov(meanBETA ~ site.ID, data = turb.CV)
summary(beta.one.way.Turb) # seemingly significant  (p-value = 0.0458)

# mean concentration ANOVA with mean concentration as daily mean by site and year 

# filtering out errant values 
mean_daily <- mean_daily %>% 
  mutate(across(everything(), ~ ifelse(. < 0 | . > 500, NA, .)))

# creating year column again from striping it out in the previous line of code
mean_daily$year <- format(mean_daily$day, format = "%Y")

#fDOM

fDOM <- aov(dailyfDOM ~ Site*year, data = mean_daily)

summary(fDOM) # everything is significant 

a <- ggplot(mean_daily, aes(x = Site, y = dailyfDOM, col = Site)) +
  geom_boxplot() +
  theme_classic()

TukeyHSD(fDOM, which = "Site")
plot(fDOM)

#NO3
NO3 <- aov(dailyNO3 ~ Site*year, data = mean_daily)

summary(NO3) # Site and Site*year is significant 

b <- ggplot(mean_daily, aes(x = Site, y = dailyNO3, col = Site)) +
  geom_boxplot() +
  theme_classic()

TukeyHSD(NO3, which = "Site")
plot(NO3)

#SPC
SPC <- aov(dailySPC ~ Site*year, data = mean_daily)

summary(SPC) # Site and Site*year is significant 

c <- ggplot(mean_daily, aes(x = Site, y = dailySPC, col = Site)) +
  geom_boxplot() +
  theme_classic()

TukeyHSD(SPC, which = "Site")
plot(SPC)

#Turb
Turb <- aov(dailyTurb ~ Site*year, data = mean_daily)

summary(Turb) # nothing is significant 

d <- ggplot(mean_daily1, aes(x = Site, y = dailyTurb, col = Site)) +
  geom_boxplot() +
  theme_classic()

TukeyHSD(Turb, which = "Site")
plot(SPC)

ggarrange(a, b,
          c, d)







###########################################################################################################
######################################## H20 specific yield/FLUX #############################################################
###########################################################################################################
# This script loads in 2018, 2019, 2020, and 2021  final chem and discharge data to calculate specific yield for each 
#solute and H20 specific yield 
# Step 1) Load in data from "Documents->Storms->Q_chem->Site" on my local machine for each year and site 
# (will be added to the drive when the data is finalized)
# Step 2) make sure that the dates are the same across each site within the year so we can make an accurate comparison
# Step 3) Output csv's

#H20 specific yield is cumulative Q/catchment area



#FRCH: 44km^2 #2D004B
#MOOS:113km^2 #6A3D9A
#CARI: 31km^2 #FF7F00 
#STRT:125km^2 #66C2A5
#Poke:60km^2 #3288BD
#VAUL:32km^2 #ABDDA4
################################## 2018 #########################################
FRCH_chem_2018 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2018.csv", 
                           col_types = cols(fDOM.QSU = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                            Turbidity.FNU = col_double()))
MOOS_chem_2018 <- read_csv("~/Documents/Storms/Q_Chem/MOOS/MOOS_chem_2018.csv", 
                           col_types = cols(fDOM.QSU = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                            Turbidity.FNU = col_double()))
CARI_chem_2018 <- read_csv("~/Documents/NEON/CARI/WaterQuality2018.csv")
attributes(FRCH_chem_2018$DateTime)$tzone <- 'America/Anchorage'
attributes(MOOS_chem_2018$DateTime)$tzone <- 'America/Anchorage'
attributes(CARI_chem_2018$DateTime)$tzone <- 'America/Anchorage'

# Making the same time frame # 
FRCH_chem_2018 <- subset(FRCH_chem_2018, FRCH_chem_2018$DateTime > "2018-05-30" & FRCH_chem_2018$DateTime < "2018-10-10")
MOOS_chem_2018 <- subset(MOOS_chem_2018, MOOS_chem_2018$DateTime > "2018-05-30" & MOOS_chem_2018$DateTime < "2018-10-10")
CARI_chem_2018 <- subset(CARI_chem_2018, CARI_chem_2018$DateTime > "2018-05-30" & CARI_chem_2018$DateTime < "2018-10-10")

# DOD Sites #
MOOS_chem_2018$H20_yield_km2 <- MOOS_chem_2018$Q/113 #MOOS is 113km^2
FRCH_chem_2018$H20_yield_km2 <- FRCH_chem_2018$Q/44 #FRCH is 44km^2
CARI_chem_2018$H20_yield_km2 <- CARI_chem_2018$Discharge/31 #CARI is 31km^2

# Renaming columns so I can merge # 
MOOS_Q_2018 <- MOOS_chem_2018[,-c(4:8)] # Remove all but Site/DateTime/Q/day
FRCH_Q_2018 <- FRCH_chem_2018[,-c(4:8)] # Remove all but Site/DateTime/Q/day
CARI_Q_2018 <- CARI_chem_2018[,-c(4:7)] # Remove all but Site/DateTime/Q/day
names(CARI_Q_2018)[names(CARI_Q_2018) == 'Discharge'] <- "Q"
MOOS_Q_2018$day <- date(MOOS_Q_2018$DateTime) # make a day column
FRCH_Q_2018$day <- date(FRCH_Q_2018$DateTime) # make a day column
CARI_Q_2018$day <- date(CARI_Q_2018$DateTime) # make a day column

h20.yield.2018 <- rbind(FRCH_Q_2018, MOOS_Q_2018, CARI_Q_2018)
h20.daily.means.2018 <- aggregate(x=h20.yield.2018$H20_yield_km2,
                             by=list(h20.yield.2018$Site,h20.yield.2018$day),
                             FUN=mean, na.rm = TRUE)
names(h20.daily.means.2018) <- c("Site", "DateTime", "H20_yield_km2")

ggplot(h20.daily.means.2018, aes(Site, H20_yield_km2)) + geom_boxplot(aes(fill=Site))+
  scale_fill_manual(values=c("#FF7F00","#2D004B", "#6A3D9A"), "Catchment") +
  theme_bw() + ylab("H20- daily mean yield (L/km2/day)") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  ggtitle("2018")


########################################## 2019 ##########################
FRCH_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2019.csv", 
                           col_types = cols(fDOM.QSU.mn = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm.mn = col_double(), 
                                            Turbidity.FNU.mn = col_double()))
MOOS_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/MOOS/MOOS_chem_2019.csv", 
                           col_types = cols(fDOM.QSU.mn = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm.mn = col_double(), 
                                            Turbidity.FNU.mn = col_double()))
POKE_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/POKE/POKE_chem_2019.csv", 
                           col_types = cols(fDOM.QSU.mn = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm.mn = col_double(), 
                                            Turbidity.FNU.mn = col_double()))
STRT_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/STRT/STRT_chem_2019.csv", 
                           col_types = cols(fDOM.QSU.mn = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm.mn = col_double(), 
                                            Turbidity.FNU.mn = col_double()))
VAUL_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/VAUL/VAUL_chem_2019.csv", 
                           col_types = cols(fDOM.QSU.mn = col_double(), 
                                            SpCond.uScm.mn = col_double(), 
                                            Turbidity.FNU.mn = col_double()))
CARI_chem_2019 <- read_csv("~/Documents/NEON/CARI/WaterQuality2019.csv", 
                             col_types = cols(fDOM = col_double(), 
                                              SpCond = col_double(), Turb = col_double()))

attributes(FRCH_chem_2019$DateTime)$tzone <- 'America/Anchorage'
attributes(MOOS_chem_2019$DateTime)$tzone <- 'America/Anchorage'
attributes(POKE_chem_2019$DateTime)$tzone <- 'America/Anchorage'
attributes(STRT_chem_2019$DateTime)$tzone <- 'America/Anchorage'
attributes(VAUL_chem_2019$DateTime)$tzone <- 'America/Anchorage'
attributes(CARI_chem_2019$DateTime)$tzone <- 'America/Anchorage'

# Making the same time frame # 
FRCH_chem_2019 <- subset(FRCH_chem_2019, FRCH_chem_2019$DateTime > "2019-06-07" & FRCH_chem_2019$DateTime < "2019-10-09")
MOOS_chem_2019 <- subset(MOOS_chem_2019, MOOS_chem_2019$DateTime > "2019-06-07" & MOOS_chem_2019$DateTime < "2019-10-09")
POKE_chem_2019 <- subset(POKE_chem_2019, POKE_chem_2019$DateTime > "2019-06-07" & POKE_chem_2019$DateTime < "2019-10-09")
VAUL_chem_2019 <- subset(VAUL_chem_2019, VAUL_chem_2019$DateTime > "2019-06-07" & VAUL_chem_2019$DateTime < "2019-10-09")
STRT_chem_2019 <- subset(STRT_chem_2019, STRT_chem_2019$DateTime > "2019-06-07" & STRT_chem_2019$DateTime < "2019-10-09")
CARI_chem_2019 <- subset(CARI_chem_2019, CARI_chem_2019$DateTime > "2019-06-07" & CARI_chem_2019$DateTime < "2019-10-09")

# DOD Sites #
MOOS_chem_2019$H20_yield_km2 <- MOOS_chem_2019$Q/113 #MOOS is 113km^2
FRCH_chem_2019$H20_yield_km2 <- FRCH_chem_2019$Q/44 #FRCH is 44km^2
POKE_chem_2019$H20_yield_km2 <- POKE_chem_2019$Q/60 #POKE is 60km^2
VAUL_chem_2019$H20_yield_km2 <- VAUL_chem_2019$Q/32 #VAUL is 32km^2
STRT_chem_2019$H20_yield_km2 <- STRT_chem_2019$Q/125 #STRT is 125km^2
CARI_chem_2019$H20_yield_km2 <- CARI_chem_2019$Discharge/31 #STRT is 125km^2

# remove unnecessary columns and rename to join #
MOOS_Q_2019 <- MOOS_chem_2019[,-c(4:8)] # Remove all but Site/DateTime/Q
FRCH_Q_2019 <- FRCH_chem_2019[,-c(4:8)] # Remove all but Site/DateTime/Q
POKE_Q_2019 <- POKE_chem_2019[,-c(4:8)] # Remove all but Site/DateTime/Q
STRT_Q_2019 <- STRT_chem_2019[,-c(4:8)] # Remove all but Site/DateTime/Q
VAUL_Q_2019 <- VAUL_chem_2019[,-c(4:8)] # Remove all but Site/DateTime/Q
CARI_Q_2019 <- CARI_chem_2019[,-c(4:7)] # Remove all but Site/DateTime/Q
names(CARI_Q_2019)[names(CARI_Q_2019) == 'Discharge'] <- "Q"


h20.yield.2019 <- rbind(FRCH_Q_2019, MOOS_Q_2019, CARI_Q_2019, POKE_Q_2019, STRT_Q_2019)
h20.yield.2019$day <- date(h20.yield.2019$DateTime) # make a day column

h20.daily.means.2019 <- aggregate(x=h20.yield.2019$H20_yield_km2,
                             by=list(h20.yield.2019$Site,h20.yield.2019$day),
                             FUN=mean, na.rm = TRUE)
names(h20.daily.means.2019) <- c("Site", "DateTime", "H20_yield_km2")

ggplot(h20.daily.means.2019, aes(Site, H20_yield_km2)) + geom_boxplot(aes(fill=Site))+
  scale_fill_manual(values=c("#FF7F00","#2D004B","#6A3D9A", "#3288BD", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("H20- daily mean yield (L/km2/day)") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  ggtitle("2019")

########################################## 2020 ##########################
FRCH_chem_2020 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2020.csv", 
                           col_types = cols(fDOM.QSU = col_double(), 
                                            nitrateuM = col_double(), SpCond.µS.cm = col_double(), 
                                            Turbidity.FNU = col_double()))
MOOS_chem_2020 <- read_csv("~/Documents/Storms/Q_Chem/MOOS/MOOS_chem_2020.csv", 
                           col_types = cols(nitrateuM = col_double(), 
                                            SpCond.uScm = col_double(), Turbidity.FNU = col_double()))
POKE_chem_2020 <- read_csv("~/Documents/Storms/Q_Chem/POKE/POKE_chem_2020.csv", 
                           col_types = cols(fDOM.RFU = col_double(), 
                                            SpCond.uScm = col_double(), Turbidity.FNU = col_double()))
STRT_chem_2020 <- read_csv("~/Documents/Storms/Q_Chem/STRT/STRT_chem_2020.csv", 
                           col_types = cols(fDOM.QSU = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                            Turbidity.FNU = col_double()))
VAUL_chem_2020 <- read_csv("~/Documents/Storms/Q_Chem/VAUL/VAUL_chem_2020.csv", 
                           col_types = cols(fDOM.QSU = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                            Turbidity.FNU = col_double()))
CARI_chem_2020 <- read_csv("~/Documents/NEON/CARI/WaterQuality2020.csv", 
                             col_types = cols(NO3 = col_double(), 
                                              fDOM = col_double(), SpCond = col_double(), 
                                              Turb = col_double()))
# convert to datetime ak #
attributes(FRCH_chem_2020$DateTime)$tzone <- 'America/Anchorage'
attributes(MOOS_chem_2020$DateTime)$tzone <- 'America/Anchorage'
attributes(POKE_chem_2020$DateTime)$tzone <- 'America/Anchorage'
attributes(STRT_chem_2020$DateTime)$tzone <- 'America/Anchorage'
attributes(VAUL_chem_2020$DateTime)$tzone <- 'America/Anchorage'
attributes(CARI_chem_2020$DateTime)$tzone <- 'America/Anchorage'

# Making the same time frame # 
FRCH_chem_2020 <- subset(FRCH_chem_2020, FRCH_chem_2020$DateTime > "2020-06-18" & FRCH_chem_2020$DateTime < "2020-10-04")
MOOS_chem_2020 <- subset(MOOS_chem_2020, MOOS_chem_2020$DateTime > "2020-06-18" & MOOS_chem_2020$DateTime < "2020-10-04")
POKE_chem_2020 <- subset(POKE_chem_2020, POKE_chem_2020$DateTime > "2020-06-18" & POKE_chem_2020$DateTime < "2020-10-04")
VAUL_chem_2020 <- subset(VAUL_chem_2020, VAUL_chem_2020$DateTime > "2020-06-18" & VAUL_chem_2020$DateTime < "2020-10-04")
STRT_chem_2020 <- subset(STRT_chem_2020, STRT_chem_2020$DateTime > "2020-06-18" & STRT_chem_2020$DateTime < "2020-10-04")
CARI_chem_2020 <- subset(CARI_chem_2020, CARI_chem_2020$DateTime > "2020-06-18" & CARI_chem_2020$DateTime < "2020-10-04")

# DOD Sites #
MOOS_chem_2020$H20_yield_km2 <- MOOS_chem_2020$Q/113 #MOOS is 113km^2
FRCH_chem_2020$H20_yield_km2 <- FRCH_chem_2020$Q/44 #FRCH is 44km^2
POKE_chem_2020$H20_yield_km2 <- POKE_chem_2020$Q/60 #POKE is 60km^2
VAUL_chem_2020$H20_yield_km2 <- VAUL_chem_2020$Q/32 #VAUL is 32km^2
STRT_chem_2020$H20_yield_km2 <- STRT_chem_2020$Q/125 #STRT is 125km^2
CARI_chem_2020$H20_yield_km2 <- CARI_chem_2020$Discharge/31 #CARI is 31km^2

# remove unnecessary columns and rename to join #
# remove unnecessary columns and rename to join #
MOOS_Q_2020 <- MOOS_chem_2020[,-c(4:8)] # Remove all but Site/DateTime/Q
FRCH_Q_2020 <- FRCH_chem_2020[,-c(4:8)] # Remove all but Site/DateTime/Q
POKE_Q_2020 <- POKE_chem_2020[,-c(4:8)] # Remove all but Site/DateTime/Q
STRT_Q_2020 <- STRT_chem_2020[,-c(4:8)] # Remove all but Site/DateTime/Q
VAUL_Q_2020 <- VAUL_chem_2020[,-c(4:8)] # Remove all but Site/DateTime/Q
CARI_Q_2020 <- CARI_chem_2020[,-c(4:7)] # Remove all but Site/DateTime/Q
names(CARI_Q_2020)[names(CARI_Q_2020) == 'Discharge'] <- "Q"

h20.yield.2020 <- rbind(FRCH_Q_2020, MOOS_Q_2020, CARI_Q_2020, POKE_Q_2020, STRT_Q_2020, VAUL_Q_2020)
h20.yield.2020$day <- date(h20.yield.2020$DateTime) # make a day column

h20.daily.means.2020 <- aggregate(x=h20.yield.2020$H20_yield_km2,
                                  by=list(h20.yield.2020$Site,h20.yield.2020$day),
                                  FUN=mean, na.rm = TRUE)
names(h20.daily.means.2020) <- c("Site", "DateTime", "H20_yield_km2")

ggplot(h20.daily.means.2020, aes(Site, H20_yield_km2)) + geom_boxplot(aes(fill=Site))+
  scale_fill_manual(values=c("#FF7F00","#2D004B","#6A3D9A", "#3288BD", "#66C2A5", "#ABDDA4"), "Catchment") +
  theme_bw() + ylab("H20- daily mean yield (L/km2/day)") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  ggtitle("2020")

########################################## 2021 ##########################
FRCH_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2021.csv", 
                           col_types = cols(fDOM.QSU = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                            Turbidity.FNU = col_double()))
MOOS_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/MOOS/MOOS_chem_2021.csv", 
                           col_types = cols(fDOM.QSU = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                            Turbidity.FNU = col_double()))
POKE_Q_2021 <- read_csv("Q_Chem/POKE/POKE_Q_2021.csv")
STRT_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/STRT/STRT_chem_2021.csv", 
                           col_types = cols(fDOM.QSU = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                            Turbidity.FNU = col_double()))
VAUL_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/VAUL/VAUL_chem_2021.csv", 
                           col_types = cols(fDOM.QSU = col_double(), 
                                            nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                            Turbidity.FNU = col_double()))
CARI_chem_2021 <- read_csv("~/Documents/NEON/CARI/WaterQuality2021.csv")
# convert to datetime ak #
attributes(FRCH_chem_2021$DateTime)$tzone <- 'America/Anchorage'
attributes(MOOS_chem_2021$DateTime)$tzone <- 'America/Anchorage'
attributes(POKE_Q_2021$DateTime)$tzone <- 'America/Anchorage'
attributes(STRT_chem_2021$DateTime)$tzone <- 'America/Anchorage'
attributes(VAUL_chem_2021$DateTime)$tzone <- 'America/Anchorage'
attributes(CARI_chem_2021$DateTime)$tzone <- 'America/Anchorage'

# Making the same time frame # 
FRCH_chem_2021 <- subset(FRCH_chem_2021, FRCH_chem_2021$DateTime > "2021-06-30" & FRCH_chem_2021$DateTime < "2021-09-27")
MOOS_chem_2021 <- subset(MOOS_chem_2021, MOOS_chem_2021$DateTime > "2021-06-30" & MOOS_chem_2021$DateTime < "2021-09-27")
POKE_Q_2021 <- subset(POKE_Q_2021, POKE_Q_2021$DateTime > "2021-06-30" & POKE_Q_2021$DateTime < "2021-09-27")
VAUL_chem_2021 <- subset(VAUL_chem_2021, VAUL_chem_2021$DateTime > "2021-06-30" & VAUL_chem_2021$DateTime < "2021-09-27")
STRT_chem_2021 <- subset(STRT_chem_2021, STRT_chem_2021$DateTime > "2021-06-30" & STRT_chem_2021$DateTime < "2021-09-27")
CARI_chem_2021 <- subset(CARI_chem_2021, CARI_chem_2021$DateTime > "2021-06-30" & CARI_chem_2021$DateTime < "2021-09-27")

# DOD Sites #
MOOS_chem_2021$H20_yield_km2 <- MOOS_chem_2021$Q/113 #MOOS is 113km^2
FRCH_chem_2021$H20_yield_km2 <- FRCH_chem_2021$Q/44 #FRCH is 44km^2
POKE_Q_2021$H20_yield_km2 <- POKE_Q_2021$Q/60 #POKE is 60km^2
VAUL_chem_2021$H20_yield_km2 <- VAUL_chem_2021$Q/32 #VAUL is 32km^2
STRT_chem_2021$H20_yield_km2 <- STRT_chem_2021$Q/125 #STRT is 125km^2
CARI_chem_2021$H20_yield_km2 <- CARI_chem_2021$Discharge/31 #STRT is 31km^2

# remove unnecessary columns and rename to join #
MOOS_Q_2021 <- MOOS_chem_2021[,-c(1,3,6,7,8,9)] # Remove all but Site/DateTime/Q
FRCH_Q_2021 <- FRCH_chem_2021[,-c(1,3,6,7,8,9)] # Remove all but Site/DateTime/Q
POKE_Q_2021 <- POKE_Q_2021[,-c(1,5,6)] # Remove all but Site/DateTime/Q
STRT_Q_2021 <- STRT_chem_2021[,-c(1,3,6,7,8,9)] # Remove all but Site/DateTime/Q
VAUL_Q_2021 <- VAUL_chem_2021[,-c(1,3,6,7,8,9)] # Remove all but Site/DateTime/Q
CARI_Q_2021 <- CARI_chem_2021[,-c(4:7)] # Remove all but Site/DateTime/Q
names(CARI_Q_2021)[names(CARI_Q_2021) == 'Discharge'] <- "Q"

h20.yield.2021 <- rbind(FRCH_Q_2021, MOOS_Q_2021, CARI_Q_2021, POKE_Q_2021, STRT_Q_2021, VAUL_Q_2021)
h20.yield.2021$day <- date(h20.yield.2021$DateTime) # make a day column

h20.daily.means.2021 <- aggregate(x=h20.yield.2021$H20_yield_km2,
                                  by=list(h20.yield.2021$Site,h20.yield.2021$day),
                                  FUN=mean, na.rm = TRUE)
names(h20.daily.means.2021) <- c("Site", "DateTime", "H20_yield_km2")

ggplot(h20.daily.means.2021, aes(Site, H20_yield_km2)) + geom_boxplot(aes(fill=Site))+
  scale_fill_manual(values=c("#FF7F00","#2D004B","#6A3D9A", "#3288BD", "#66C2A5", "#ABDDA4"), "Catchment") +
  theme_bw() + ylab("H20- daily mean yield (L/km2/day)") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none") +
  ggtitle("2021")


###### ALL YEARS ##########
h20.daily.means.2018$Year <- "2018"
h20.daily.means.2019$Year <- "2019"
h20.daily.means.2020$Year <- "2020"
h20.daily.means.2021$Year <- "2021"

h20.yield.total <- rbind(h20.daily.means.2018, h20.daily.means.2019, h20.daily.means.2020, h20.daily.means.2021)


h20.yield.total %>% group_by(Year, H20_yield_km2, Site) %>% 
  ggplot(aes(x = Site, y = H20_yield_km2, fill = as.factor(Year))) +
  geom_boxplot() +
  ylab("H20 yield (L/km^2/day)") +
  scale_fill_manual(values = c("#E69F00", "brown", "deepskyblue4", "#6A3D9A")) +
  scale_x_discrete(labels = c("French", "Moose", "Caribou", "Poker", "Stuart", "Vault")) +
  ylim(0,50) +
  theme_bw() +
  theme(panel.border = element_rect(fill=NA, size=1),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        axis.title.x = element_blank(),
        text = element_text(size = 20),
        strip.background = element_blank(),
        legend.title = element_blank(),
        legend.position = c(0.90,0.90),
        legend.background = element_blank())


####### Calculate Flux #######
#Flux: C*Q/catchment area
# 2020 # 
# NO3-#
MOOS_final_chem_2020$NO3_FLUX <- MOOS_final_chem_2020$MeanDischarge * MOOS_final_chem_2020$nitrateuM
MOOS_median_flux <- median(MOOS_final_chem_2020$NO3_FLUX, na.rm = TRUE)
MOOS_specific_yield <- MOOS_median_flux*14*(1/113)
MOOS_specific_yield #3099.965
MOOS_specific_yield_final <- ((MOOS_specific_yield/1000000000)*(86400))
MOOS_specific_yield_final #0.267837

FRCH_final_chem_2020$NO3_FLUX <- FRCH_final_chem_2020$MeanDischarge * FRCH_final_chem_2020$nitrateuM
FRCH_median_flux <- median(FRCH_final_chem_2020$NO3_FLUX, na.rm = TRUE)
FRCH_specific_yield <- FRCH_median_flux*14*(1/44)
FRCH_specific_yield #6288.251
FRCH_specific_yield_final <- ((FRCH_specific_yield/1000000000)*(86400))
FRCH_specific_yield_final #0.5433049

VAUL_final_chem_2020$NO3_FLUX <- VAUL_final_chem_2020$MeanDischarge * VAUL_final_chem_2020$nitrateuM
VAUL_median_flux <- median(VAUL_final_chem_2020$NO3_FLUX, na.rm = TRUE)
VAUL_specific_yield <- VAUL_median_flux*14*(1/32)
VAUL_specific_yield #2751.455
VAUL_specific_yield_final <- ((VAUL_specific_yield/1000000000)*(86400))
VAUL_specific_yield_final #0.2377257

STRT_final_chem_2020$NO3_FLUX <- STRT_final_chem_2020$MeanDischarge * STRT_final_chem_2020$nitrateuM
STRT_median_flux <- median(STRT_final_chem_2020$NO3_FLUX, na.rm = TRUE)
STRT_specific_yield <- STRT_median_flux*14*(1/125)
STRT_specific_yield #4786.33
STRT_specific_yield_final <- ((STRT_specific_yield/1000000000)*(86400))
STRT_specific_yield_final #0.4135389






####### Specific Yield #######
#### libraries ####
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(plyr)
library(zoo)
library(xts)
library(forecast)
library(gridExtra)
library(readr)

#### NO3 catchment yeild calcs ####
DOD_chem <- read_csv("Output_from_analysis/From_07_Modelling/Results_figures/Discharge_chem/all.chem.csv", 
                     col_types = cols(X1 = col_skip(), fDOM.QSU = col_double(), 
                                      nitrateuM = col_double(), SpCond.uScm = col_double(), 
                                      Turbidity.FNU = col_double()))
DOD_chem$date_timeAK <- as.POSIXct(DOD_chem$DateTime, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")

## fxn to fill gaps in data ##
fillgaps = function(df, dat, datquotes, largegap.num){
  ## Document gaps >= largegap.num (1 largegap.num = 15 min) ##
  # (note - the criteria of what constitutes a "large" gap should be reevaluated depending on the trend being characterized)
  is.na.rle <- rle(is.na(dat))
  is.na.rle$values <- is.na.rle$values & is.na.rle$lengths >= (largegap.num)
  biggaps = df[inverse.rle(is.na.rle), ]
  tz(biggaps$date_timeAK) = "America/Anchorage"
  biggaps = subset(biggaps, select = "date_timeAK")
  # Make univariate time series, covert to zoo, then to ts #
  ts.xts = subset(df, select = c("date_timeAK",datquotes))
  ts.xts<-read.zoo(ts.xts, index.column=1, format="%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
  ts.xts<-as.xts(ts.xts)
  # remove leading and trailing NAs #
  ts.xts = na.trim(ts.xts, is.na="any")
  # Apply auto.arima and kalman filter to impute missing values #
  fit2 = auto.arima(ts.xts) 
  kal = KalmanSmooth(ts.xts, fit2$model)
  id.na<-which(is.na(ts.xts))
  for(i in id.na) 
    ts.xts[i]<-fit2$model$Z %*% kal$smooth[i,]
  # revert to dataframe #
  ts.df = as.data.frame((ts.xts))
  ts.df$date_timeAK = as.POSIXct(row.names(ts.df), tz="America/Anchorage")
  names(ts.df) = c("dat_filled", "date_timeAK")
  # remove large gaps # 
  ts.df$dat_filled[ts.df$date_timeAK %in% as.POSIXct(biggaps$date_timeAK)] = NA
  # # Replace large gaps with linear interpolation #
  # ts.df$dat_filled = na.interpolation(ts.df$dat_filled)
  # ### Make daily ###
  # ### add a column for day ###
  # ts.df$day = format(as.POSIXct(ts.df$date_timeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
  # ts.df$day = as.POSIXct(ts.df$day, "%Y-%m-%d", tz="America/Anchorage")
  # ts.df$date_timeAK = NULL
  # daily.df = 
  #   ts.df %>%
  #   group_by(day) %>%
  #   summarize_all(funs(mean), na.rm = TRUE)
  # #daily.df = paste(df, dat, "daily", sep="_")
  return(ts.df)
} 

### FRCH ###
FRCH.2018 = subset(DOD_chem, Site == "FRCH" & year == "2018")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
FRCH.2018.no3.Q.filled <- FRCH.2018[,-c(4,5,7,8,9,10)]
FRCH.2018.no3.Q.filled$nitrate_mgL = FRCH.2018.no3.Q.filled$nitrateuM * 0.014007
FRCH.2018.no3.Q.filled$nitrateuM = NULL

plot(FRCH.2018.no3.Q.filled$nitrate_mgL ~ FRCH.2018.no3.Q.filled$DateTime)
plot(FRCH.2018.no3.Q.filled$Q ~ FRCH.2018.no3.Q.filled$DateTime)

FRCH.2018.no3.Q.filled$NO3_load = FRCH.2018.no3.Q.filled$Q * FRCH.2018.no3.Q.filled$nitrate_mgL
FRCH.2018.no3.Q.filled$NO3_yield_mg.km2.15min = FRCH.2018.no3.Q.filled$NO3_load/44 # FRCH is 44 km2
FRCH.2018.no3.Q.filled$year = "2018"

plot(FRCH.2018.no3.Q.filled$NO3_yield_mg.km2.15min ~ FRCH.2018.no3.Q.filled$DateTime, type="b")

### MOOS ###
MOOS.2018 = subset(DOD_chem, Site == "MOOS" & year == "2018")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
MOOS.2018.no3.Q.filled <- MOOS.2018[,-c(4,5,7,8,9,10)]
MOOS.2018.no3.Q.filled$nitrate_mgL = MOOS.2018.no3.Q.filled$nitrateuM * 0.014007
MOOS.2018.no3.Q.filled$nitrateuM = NULL

plot(MOOS.2018.no3.Q.filled$nitrate_mgL ~ MOOS.2018.no3.Q.filled$DateTime)
plot(MOOS.2018.no3.Q.filled$Q ~ MOOS.2018.no3.Q.filled$DateTime)

MOOS.2018.no3.Q.filled$NO3_load = MOOS.2018.no3.Q.filled$Q * MOOS.2018.no3.Q.filled$nitrate_mgL
MOOS.2018.no3.Q.filled$NO3_yield_mg.km2.15min = MOOS.2018.no3.Q.filled$NO3_load/113 # MOOS is 113 km2
MOOS.2018.no3.Q.filled$year = "2018"

### CARI ###
CARI.2018 = subset(DOD_chem, Site == "CARI" & year == "2018")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
CARI.2018.no3.Q.filled <- CARI.2018[,-c(4,5,7,8,9,10)]
CARI.2018.no3.Q.filled$nitrate_mgL = CARI.2018.no3.Q.filled$nitrateuM * 0.014007
CARI.2018.no3.Q.filled$nitrateuM = NULL

plot(CARI.2018.no3.Q.filled$nitrate_mgL ~ CARI.2018.no3.Q.filled$DateTime)
plot(CARI.2018.no3.Q.filled$Q ~ CARI.2018.no3.Q.filled$DateTime)

CARI.2018.no3.Q.filled$NO3_load = CARI.2018.no3.Q.filled$Q * CARI.2018.no3.Q.filled$nitrate_mgL
CARI.2018.no3.Q.filled$NO3_yield_mg.km2.15min = CARI.2018.no3.Q.filled$NO3_load/31 # CARI is 31 km2
CARI.2018.no3.Q.filled$year = "2018"

plot(CARI.2018.no3.Q.filled$NO3_yield_mg.km2.15min ~ CARI.2018.no3.Q.filled$DateTime, type="b")

no3.yield = rbind(FRCH.2018.no3.Q.filled, MOOS.2018.no3.Q.filled, CARI.2018.no3.Q.filled)

no3.yield$day = date(no3.yield$DateTime)

no3.daily.means = 
  no3.yield %>%
  group_by(day, Site) %>%
  summarize_all(funs(mean), na.rm = TRUE)

ggplot(no3.daily.means, aes(Site, NO3_yield_mg.km2.15min)) + 
  geom_boxplot(aes(fill = Site)) +
  scale_fill_manual(values=c("#FF7F00","#2D004B", "#6A3D9A"), "Catchment") +
  theme_bw() + ylab("NO3- daily mean yield (mg N/km2/day)") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

mean(no3.daily.means$NO3_yield_mg.km2.15min[no3.daily.means$Site=="FRCH"])
mean(no3.daily.means$NO3_yield_mg.km2.15min[no3.daily.means$Site=="MOOS"])
mean(no3.daily.means$NO3_yield_mg.km2.15min[no3.daily.means$Site=="CARI"])


#### NO3 catchment yeild plot ####

# calc daily yield #
no3.yield.daily = no3.yield
no3.yield.daily$day = format(as.POSIXct(no3.yield.daily$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
no3.yield.daily$day = as.POSIXct(no3.yield.daily$day, "%Y-%m-%d", tz="America/Anchorage")
no3.yield.daily$DateTime = NULL
no3.yield.daily$year = NULL
no3.yield.daily = 
  no3.yield.daily %>%
  group_by(day, Site) %>%
  summarize_all(funs(sum), na.rm = F)

no3.yield.daily$NO3_yield_mg.km2.day = no3.yield.daily$NO3_yield_mg.km2.15min
no3.yield.daily$NO3_yield_mg.km2.15min = NULL

median(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="FRCH" & 
                                              !is.na(no3.yield.daily$NO3_yield_mg.km2.day)]) /
  median(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="MOOS"& 
                                                !is.na(no3.yield.daily$NO3_yield_mg.km2.day)])

# remove NAs - 
no3.yield.daily <- na.omit(no3.yield.daily)

sum(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="MOOS"])
sum(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="FRCH"])

par(mfrow=c(2,1))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="MOOS"]))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="FRCH"]))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="CARI"]))

no3.yield.daily.density = 
  ggplot() + 
  geom_density(data=no3.yield.daily[no3.yield.daily$Site=="MOOS",], 
               aes(x=NO3_yield_mg.km2.day), fill="#6A3D9A",alpha=0.5) + 
  geom_density(data=no3.yield.daily[no3.yield.daily$Site=="FRCH",], 
               aes(x=NO3_yield_mg.km2.day), fill="#2D004B", alpha=0.5) +
  geom_density(data=no3.yield.daily[no3.yield.daily$Site=="CARI",], 
               aes(x=NO3_yield_mg.km2.day), fill="#FF7F00", alpha=0.5) +
  ylab("Density") +
  theme_bw() +
  theme(legend.position = "none",
        plot.title = element_text(face = "bold", hjust = 0.5, size =18),
        panel.grid = element_blank(),
        panel.border = element_rect(color = "black", size = 2),
        axis.text = element_text(size = 18),
        axis.title.x = element_text(size = 18),
        axis.title.y = element_text(size = 18),
        plot.margin = margin(.5,2,.5,.5, "cm"))

mean(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="MOOS"])
mean(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="FRCH"])
mean(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="CARI"])

# plot #
no3.yield.daily$Site <- factor(no3.yield.daily$Site, levels = c('MOOS', 'FRCH', 'CARI'))

no3.yield.daily.p = 
  ggplot(no3.yield.daily, aes(Site, NO3_yield_mg.km2.day)) + geom_boxplot(aes(fill= Site))+
  scale_fill_manual(values=c("#6A3D9A","#2D004B", "#FF7F00"), "Catchment") +
  theme_bw() + ylab("Nitrate yield (mg N/km2/day)") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

ggplot(no3.yield.daily, aes(x = day, y= NO3_yield_mg.km2.day)) + 
  geom_line(aes(colour = Site))

#### NO3 catchment yeild stat test ####

par(mfrow=c(3,1))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site == "FRCH"]))
shapiro.test((no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site == "FRCH"]))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site == "MOOS"]))
shapiro.test((no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site == "MOOS"]))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site == "CARI"]))
shapiro.test((no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site == "CARI"]))

par(mfrow=c(1,1))

acf(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site == "FRCH"])
acf(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site == "MOOS"])
acf(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site == "CARI"])

### bootstrapped difference of medians ###
library(boot)

medianDiff = function(data, indices) { 
  d <- data[indices,] # allows boot to select sample
  m1 = median(d$NO3_yield_mg.km2.day[d$Site == "FRCH"])
  m2 = median(d$NO3_yield_mg.km2.day[d$Site == "MOOS"])
  m3 = median(d$NO3_yield_mg.km2.day[d$Site == "CARI"])
  m = m1 - m2 - m3
  return(m)
}

no3_boot = boot(no3.yield.daily, medianDiff, R = 10000, strata = as.factor(no3.yield.daily$Site))
no3_bootCI = boot.ci(no3_boot, type="bca")

no3_bootCI = data.frame(cbind(no3_boot$t0, no3_bootCI[["bca"]][4], no3_bootCI[["bca"]][5]))
names(no3_bootCI) = c("no3", "lower", "upper")

### gls with AR1 ###

library(nlme)

par(mfrow=c(3,1))
plot(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="FRCH"] ~ 
       no3.yield.daily$day[no3.yield.daily$Site=="FRCH"])
plot(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="MOOS"] ~ 
       no3.yield.daily$day[no3.yield.daily$Site=="MOOS"])
plot(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="CARI"] ~ 
       no3.yield.daily$day[no3.yield.daily$Site=="CARI"])

mod = gls(NO3_yield_mg.km2.day ~ Site, 
          na.action=na.omit, 
          data=no3.yield.daily, 
          correlation=corAR1(form=~day|Site))

Acf(resid(mod, type="normalized"))
pacf(resid(mod, type="normalized"))
summary(mod)




mod.null = lme(NO3_yield_mg.km2.day~1, random=~1|Site, na.action=na.omit, data=no3.yield.daily, correlation = corAR1(form=~day|Site))

AICtab(mod.null, mod)

mod = gls(NO3_yield_mg.km2.day~Site, na.action=na.omit, data=no3.yield.daily, correlation=corARMA(form=~day|Site, c(-0.2,0.2), p=1, q=1))
acf(resid(mod, type="normalized"))



## arima
arima.null = auto.arima(as.ts(no3.yield.daily$NO3_yield_mg.km2.day))

newxreg = as.numeric(no3.yield.daily$Site)
arima1 = auto.arima(as.ts(no3.yield.daily$NO3_yield_mg.km2.day), xreg = newxreg)
acf(resid(arima1))
shapiro.test(resid(arima1))
summary(arima1)

library(bbmle)
AICtab(arima.null, arima1)

### fDOM catchment yeild calcs ###

## fxn to fill gaps in data ##
fillgaps = function(df, dat, datquotes, largegap.num){
  ## Document gaps >= largegap.num (1 largegap.num = 15 min) ##
  # (note - the criteria of what constitutes a "large" gap should be reevaluated depending on the trend being characterized)
  is.na.rle <- rle(is.na(dat))
  is.na.rle$values <- is.na.rle$values & is.na.rle$lengths >= (largegap.num)
  biggaps = df[inverse.rle(is.na.rle), ]
  tz(biggaps$date_timeAK) = "America/Anchorage"
  biggaps = subset(biggaps, select = "date_timeAK")
  # Make univariate time series, covert to zoo, then to ts #
  ts.xts = subset(df, select = c("date_timeAK",datquotes))
  ts.xts<-read.zoo(ts.xts, index.column=1, format="%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
  ts.xts<-as.xts(ts.xts)
  # remove leading and trailing NAs #
  ts.xts = na.trim(ts.xts, is.na="any")
  # Apply auto.arima and kalman filter to impute missing values #
  fit2 = auto.arima(ts.xts) 
  kal = KalmanSmooth(ts.xts, fit2$model)
  id.na<-which(is.na(ts.xts))
  for(i in id.na) 
    ts.xts[i]<-fit2$model$Z %*% kal$smooth[i,]
  # revert to dataframe #
  ts.df = as.data.frame((ts.xts))
  ts.df$date_timeAK = as.POSIXct(row.names(ts.df), tz="America/Anchorage")
  names(ts.df) = c("dat_filled", "date_timeAK")
  # remove large gaps # 
  ts.df$dat_filled[ts.df$date_timeAK %in% as.POSIXct(biggaps$date_timeAK)] = NA
  # # Replace large gaps with linear interpolation #
  # ts.df$dat_filled = na.interpolation(ts.df$dat_filled)
  # ### Make daily ###
  # ### add a column for day ###
  # ts.df$day = format(as.POSIXct(ts.df$date_timeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
  # ts.df$day = as.POSIXct(ts.df$day, "%Y-%m-%d", tz="America/Anchorage")
  # ts.df$date_timeAK = NULL
  # daily.df = 
  #   ts.df %>%
  #   group_by(day) %>%
  #   summarize_all(funs(mean), na.rm = TRUE)
  # #daily.df = paste(df, dat, "daily", sep="_")
  return(ts.df)
} 

### FRCH ###
FRCH.2018 = subset(DOD_chem, Site == "FRCH" & year == "2018")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
FRCH.2018.fDOM.Q.filled <- FRCH.2018[,-c(4,6,7,8,9,10)]

FRCH.2018.fDOM.Q.filled$fDOM_load = FRCH.2018.fDOM.Q.filled$Q * FRCH.2018.fDOM.Q.filled$fDOM.QSU
FRCH.2018.fDOM.Q.filled$fDOM_yield_mg.km2.15min = FRCH.2018.fDOM.Q.filled$fDOM.QSU/44 # FRCH is 44 km2

### MOOS ###
MOOS.2018 = subset(DOD_chem, Site == "MOOS" & year == "2018")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
MOOS.2018.fDOM.Q.filled <- MOOS.2018[,-c(4,6,7,8,9,10)]

MOOS.2018.fDOM.Q.filled$fDOM_load = MOOS.2018.fDOM.Q.filled$Q * MOOS.2018.fDOM.Q.filled$fDOM.QSU
MOOS.2018.fDOM.Q.filled$fDOM_yield_mg.km2.15min = MOOS.2018.fDOM.Q.filled$fDOM.QSU/113 # MOOS is 113 km2

### CARI ###
CARI.2018 = subset(DOD_chem, Site == "CARI" & year == "2018")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
CARI.2018.fDOM.Q.filled <- CARI.2018[,-c(4,6,7,8,9,10)]

CARI.2018.fDOM.Q.filled$fDOM_load = CARI.2018.fDOM.Q.filled$Q * CARI.2018.fDOM.Q.filled$fDOM.QSU
CARI.2018.fDOM.Q.filled$fDOM_yield_mg.km2.15min = CARI.2018.fDOM.Q.filled$fDOM.QSU/31 # CARI is 31 km2


fDOM.yield = rbind(FRCH.2018.fDOM.Q.filled, MOOS.2018.fDOM.Q.filled, CARI.2018.fDOM.Q.filled)

#### fDOM catchment yeild plot ####

# calc daily yield #
fDOM.yield.daily = fDOM.yield
fDOM.yield.daily$day = format(as.POSIXct(fDOM.yield.daily$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
fDOM.yield.daily$day = as.POSIXct(fDOM.yield.daily$day, "%Y-%m-%d", tz="America/Anchorage")
fDOM.yield.daily$DateTime = NULL

fDOM.yield.daily = 
  fDOM.yield.daily %>%
  group_by(day, Site) %>%
  summarize_all(funs(sum), na.rm = FALSE)

fDOM.yield.daily$fDOM_yield_mg.km2.day = fDOM.yield.daily$fDOM_yield_mg.km2.15min
fDOM.yield.daily$fDOM_yield_mg.km2.15min = NULL

# plot #
fDOM.yield.daily$Site <- factor(fDOM.yield.daily$Site, levels = c('MOOS', 'FRCH', 'CARI'))

fDOM.yield.daily.p = 
  ggplot(fDOM.yield.daily, aes(Site, (fDOM_yield_mg.km2.day))) + geom_boxplot(aes(fill=Site))+
  scale_fill_manual(values=c("#6A3D9A","#2D004B", "#FF7F00"), "Catchment") +
  theme_bw() + ylab("fDOM yield (QSU/km2/day)") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20))+
  scale_y_log10()

fDOM.yield.daily.density = 
  ggplot() + 
  geom_density(data=fDOM.yield.daily[fDOM.yield.daily$Site == "MOOS",], 
               aes(x=fDOM_yield_mg.km2.day), fill="#6A3D9A",alpha=0.5) + 
  geom_density(data=fDOM.yield.daily[fDOM.yield.daily$Site == "FRCH",], 
               aes(x=fDOM_yield_mg.km2.day), fill="#2D004B", alpha=0.5) +
  geom_density(data=fDOM.yield.daily[fDOM.yield.daily$Site == "CARI",], 
               aes(x=fDOM_yield_mg.km2.day), fill="#FF7F00", alpha=0.5) +
   ylab("Density") +
  theme_bw() +
  theme(legend.position = "none",
        plot.title = element_text(face = "bold", hjust = 0.5, size =18),
        panel.grid = element_blank(),
        panel.border = element_rect(color = "black", size = 2),
        axis.text = element_text(size = 18),
        axis.title.x = element_text(size = 18),
        axis.title.y = element_text(size = 18),
        plot.margin = margin(.5,2,.5,.5, "cm"))+
  scale_x_log10(breaks= c(2000, 10000, 100000), 
                labels =c("2,000","10,000","100,000"))
fDOM.yield.daily.density

median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="MOOS" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])/
  median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="FRCH" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])

median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="CARI" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])/
  median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="MOOS" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])

median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="FRCH" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])/
  median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="CARI" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])

par(mfrow=c(3,1))
plot(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="FRCH"] ~ fDOM.yield.daily$day[fDOM.yield.daily$Site=="FRCH"], type="b")
plot(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="MOOS"] ~ fDOM.yield.daily$day[fDOM.yield.daily$Site=="MOOS"], type="b")
plot(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="CARI"] ~ fDOM.yield.daily$day[fDOM.yield.daily$Site=="CARI"], type="b")


### 

grid.arrange(no3.yield.daily.p, fDOM.yield.daily.p, nrow=1)

grid.arrange(no3.yield.daily.density, fDOM.yield.daily.density, nrow=1)


### ALL years ####

### FRCH ###
FRCH = subset(DOD_chem, Site == "FRCH")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
FRCH.no3.Q.filled <- FRCH[,-c(4,5,7,8,10)]
FRCH.no3.Q.filled$nitrate_mgL = FRCH.no3.Q.filled$nitrateuM * 0.014007
FRCH.no3.Q.filled$nitrateuM = NULL

plot(FRCH.no3.Q.filled$nitrate_mgL ~ FRCH.no3.Q.filled$DateTime)
plot(FRCH.no3.Q.filled$Q ~ FRCH.no3.Q.filled$DateTime)

FRCH.no3.Q.filled$NO3_load = FRCH.no3.Q.filled$Q * FRCH.no3.Q.filled$nitrate_mgL
FRCH.no3.Q.filled$NO3_yield_mg.km2.15min = FRCH.no3.Q.filled$NO3_load/44 # FRCH is 44 km2


plot(FRCH.no3.Q.filled$NO3_yield_mg.km2.15min ~ FRCH.no3.Q.filled$DateTime, type="b")

### MOOS ###
MOOS = subset(DOD_chem, Site == "MOOS")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
MOOS.no3.Q.filled <- MOOS[,-c(4,5,7,8,10)]
MOOS.no3.Q.filled$nitrate_mgL = MOOS.no3.Q.filled$nitrateuM * 0.014007
MOOS.no3.Q.filled$nitrateuM = NULL

plot(MOOS.no3.Q.filled$nitrate_mgL ~ MOOS.no3.Q.filled$DateTime)
plot(MOOS.no3.Q.filled$Q ~ MOOS.no3.Q.filled$DateTime)

MOOS.no3.Q.filled$NO3_load = MOOS.no3.Q.filled$Q * MOOS.no3.Q.filled$nitrate_mgL
MOOS.no3.Q.filled$NO3_yield_mg.km2.15min = MOOS.no3.Q.filled$NO3_load/113 # MOOS is 113 km2

### CARI ###
CARI = subset(DOD_chem, Site == "CARI")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
CARI.no3.Q.filled <- CARI[,-c(4,5,7,8,10)]
CARI.no3.Q.filled$nitrate_mgL = CARI.no3.Q.filled$nitrateuM * 0.014007
CARI.no3.Q.filled$nitrateuM = NULL

plot(CARI.no3.Q.filled$nitrate_mgL ~ CARI.no3.Q.filled$DateTime)
plot(CARI.no3.Q.filled$Q ~ CARI.no3.Q.filled$DateTime)

CARI.no3.Q.filled$NO3_load = CARI.no3.Q.filled$Q * CARI.no3.Q.filled$nitrate_mgL
CARI.no3.Q.filled$NO3_yield_mg.km2.15min = CARI.no3.Q.filled$NO3_load/31 # CARI is 31 km2

plot(CARI.no3.Q.filled$NO3_yield_mg.km2.15min ~ CARI.no3.Q.filled$DateTime, type="b")

### POKE ###
POKE = subset(DOD_chem, Site == "POKE")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
POKE.no3.Q.filled <- POKE[,-c(4,5,7,8,10)]
POKE.no3.Q.filled$nitrate_mgL = POKE.no3.Q.filled$nitrateuM * 0.014007
POKE.no3.Q.filled$nitrateuM = NULL

plot(POKE.no3.Q.filled$nitrate_mgL ~ POKE.no3.Q.filled$DateTime)
plot(POKE.no3.Q.filled$Q ~ POKE.no3.Q.filled$DateTime)

POKE.no3.Q.filled$NO3_load = POKE.no3.Q.filled$Q * POKE.no3.Q.filled$nitrate_mgL
POKE.no3.Q.filled$NO3_yield_mg.km2.15min = POKE.no3.Q.filled$NO3_load/60 # POKE is 60 km2

plot(POKE.no3.Q.filled$NO3_yield_mg.km2.15min ~ POKE.no3.Q.filled$DateTime, type="b")

### VAUL ###
VAUL = subset(DOD_chem, Site == "VAUL")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
VAUL.no3.Q.filled <- VAUL[,-c(4,5,7,8,10)]
VAUL.no3.Q.filled$nitrate_mgL = VAUL.no3.Q.filled$nitrateuM * 0.014007
VAUL.no3.Q.filled$nitrateuM = NULL

plot(VAUL.no3.Q.filled$nitrate_mgL ~ VAUL.no3.Q.filled$DateTime)
plot(VAUL.no3.Q.filled$Q ~ VAUL.no3.Q.filled$DateTime)

VAUL.no3.Q.filled$NO3_load = VAUL.no3.Q.filled$Q * VAUL.no3.Q.filled$nitrate_mgL
VAUL.no3.Q.filled$NO3_yield_mg.km2.15min = VAUL.no3.Q.filled$NO3_load/32 # VAUL is 60 km2

plot(VAUL.no3.Q.filled$NO3_yield_mg.km2.15min ~ VAUL.no3.Q.filled$DateTime, type="b")

### STRT ###
STRT = subset(DOD_chem, Site == "STRT")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
STRT.no3.Q.filled <- STRT[,-c(4,5,7,8,10)]
STRT.no3.Q.filled$nitrate_mgL = STRT.no3.Q.filled$nitrateuM * 0.014007
STRT.no3.Q.filled$nitrateuM = NULL

plot(STRT.no3.Q.filled$nitrate_mgL ~ STRT.no3.Q.filled$DateTime)
plot(STRT.no3.Q.filled$Q ~ STRT.no3.Q.filled$DateTime)

STRT.no3.Q.filled$NO3_load = STRT.no3.Q.filled$Q * STRT.no3.Q.filled$nitrate_mgL
STRT.no3.Q.filled$NO3_yield_mg.km2.15min = STRT.no3.Q.filled$NO3_load/125 # STRT is 60 km2

plot(STRT.no3.Q.filled$NO3_yield_mg.km2.15min ~ STRT.no3.Q.filled$DateTime, type="b")


no3.yield = rbind(FRCH.no3.Q.filled, MOOS.no3.Q.filled, CARI.no3.Q.filled,
                  POKE.no3.Q.filled, VAUL.no3.Q.filled, STRT.no3.Q.filled)

no3.yield$day = date(no3.yield$DateTime)

no3.daily.means = 
  no3.yield %>%
  group_by(day, Site) %>%
  summarize_all(funs(mean), na.rm = TRUE)

ggplot(no3.daily.means, aes(Site, NO3_yield_mg.km2.15min)) + 
  geom_boxplot(aes(fill = Site)) +
  scale_fill_manual(values=c("#FF7F00","#2D004B", "#6A3D9A", "#3288BD", "#ABDDA4", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("NO3- daily mean yield (mg N/km2/day)") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

mean(no3.daily.means$NO3_yield_mg.km2.15min[no3.daily.means$Site=="FRCH"])
mean(no3.daily.means$NO3_yield_mg.km2.15min[no3.daily.means$Site=="MOOS"])
mean(no3.daily.means$NO3_yield_mg.km2.15min[no3.daily.means$Site=="CARI"])


#### NO3 catchment yeild plot ####

# calc daily yield #
no3.yield.daily = no3.yield
no3.yield.daily$day = format(as.POSIXct(no3.yield.daily$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
no3.yield.daily$day = as.POSIXct(no3.yield.daily$day, "%Y-%m-%d", tz="America/Anchorage")
no3.yield.daily$DateTime = NULL
no3.yield.daily$year = NULL
no3.yield.daily = 
  no3.yield.daily %>%
  group_by(day, Site) %>%
  summarize_all(funs(sum), na.rm = F)

no3.yield.daily$NO3_yield_mg.km2.day = no3.yield.daily$NO3_yield_mg.km2.15min
no3.yield.daily$NO3_yield_mg.km2.15min = NULL

median(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="FRCH" & 
                                              !is.na(no3.yield.daily$NO3_yield_mg.km2.day)]) /
  median(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="MOOS"& 
                                                !is.na(no3.yield.daily$NO3_yield_mg.km2.day)])

# remove NAs - 
no3.yield.daily <- na.omit(no3.yield.daily)

sum(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="MOOS"])
sum(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="FRCH"])

par(mfrow=c(3,2))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="MOOS"]))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="FRCH"]))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="CARI"]))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="POKE"]))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="VAUL"]))
plot(density(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="STRT"]))

no3.yield.daily.density = 
  ggplot() + 
  geom_density(data=no3.yield.daily[no3.yield.daily$Site=="MOOS",], 
               aes(x=NO3_yield_mg.km2.day), fill="#6A3D9A",alpha=0.5) + 
  geom_density(data=no3.yield.daily[no3.yield.daily$Site=="FRCH",], 
               aes(x=NO3_yield_mg.km2.day), fill="#2D004B", alpha=0.5) +
  geom_density(data=no3.yield.daily[no3.yield.daily$Site=="CARI",], 
               aes(x=NO3_yield_mg.km2.day), fill="#FF7F00", alpha=0.5) +
  geom_density(data=no3.yield.daily[no3.yield.daily$Site=="POKE",], 
               aes(x=NO3_yield_mg.km2.day), fill="#3288BD", alpha=0.5) +
  geom_density(data=no3.yield.daily[no3.yield.daily$Site=="VAUL",], 
               aes(x=NO3_yield_mg.km2.day), fill="#ABDDA4", alpha=0.5) +
  geom_density(data=no3.yield.daily[no3.yield.daily$Site=="STRT",], 
               aes(x=NO3_yield_mg.km2.day), fill="#66C2A5", alpha=0.5) +
  ylab("Density") +
  theme_bw() +
  theme(legend.position = "none",
        plot.title = element_text(face = "bold", hjust = 0.5, size =18),
        panel.grid = element_blank(),
        panel.border = element_rect(color = "black", size = 2),
        axis.text = element_text(size = 18),
        axis.title.x = element_text(size = 18),
        axis.title.y = element_text(size = 18),
        plot.margin = margin(.5,2,.5,.5, "cm"))
no3.yield.daily.density

mean(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="MOOS"])
mean(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="FRCH"])
mean(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="CARI"])
mean(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="POKE"])
mean(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="VAUL"])
mean(no3.yield.daily$NO3_yield_mg.km2.day[no3.yield.daily$Site=="STRT"])

# plot #
no3.yield.daily$Site <- factor(no3.yield.daily$Site, levels = c('MOOS', 'FRCH', 'CARI',
                                                                'POKE', 'VAUL', 'STRT'))

no3.yield.daily$year <- NA
no3.yield.daily[c(1:248), 7] <- "2018"
no3.yield.daily[c(249:760), 7] <- "2019"
no3.yield.daily[c(761:1391), 7] <- "2020"
no3.yield.daily[c(1392:1898), 7] <- "2021"

no3.yield.daily.p = 
  ggplot(no3.yield.daily, aes(Site, NO3_yield_mg.km2.day)) + geom_boxplot(aes(fill= Site))+
  scale_fill_manual(values=c("#6A3D9A","#2D004B", "#FF7F00", "#3288BD", "#ABDDA4", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("Nitrate yield (mg N/km2/day)") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

no3.yield.daily.p

no3.yield.daily.year = 
  ggplot(no3.yield.daily, aes(Site, NO3_yield_mg.km2.day)) + geom_boxplot(aes(fill= year))+
  scale_fill_manual(values=c("#E69F00", "brown", "deepskyblue4", "#6A3D9A"), "Catchment") +
  theme_bw() + ylab("Nitrate yield (mg N/km2/day)") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20), legend.position = "none")

no3.yield.daily.year

ggplot(no3.yield.daily, aes(x = day, y= NO3_yield_mg.km2.day)) + 
  geom_line(aes(colour = Site))


### fDOM ### 

### FRCH ###
FRCH = subset(DOD_chem, Site == "FRCH")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
FRCH.fDOM.Q.filled <- FRCH[,-c(4,6,7,8,10)]

FRCH.fDOM.Q.filled$fDOM_load = FRCH.fDOM.Q.filled$Q * FRCH.fDOM.Q.filled$fDOM.QSU
FRCH.fDOM.Q.filled$fDOM_yield_mg.km2.15min = FRCH.fDOM.Q.filled$fDOM.QSU/44 # FRCH is 44 km2

### MOOS ###
MOOS = subset(DOD_chem, Site == "MOOS")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
MOOS.fDOM.Q.filled <- MOOS[,-c(4,6,7,8,10)]

MOOS.fDOM.Q.filled$fDOM_load = MOOS.fDOM.Q.filled$Q * MOOS.fDOM.Q.filled$fDOM.QSU
MOOS.fDOM.Q.filled$fDOM_yield_mg.km2.15min = MOOS.fDOM.Q.filled$fDOM.QSU/113 # MOOS is 113 km2

### CARI ###
CARI = subset(DOD_chem, Site == "CARI")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
CARI.fDOM.Q.filled <- CARI[,-c(4,6,7,8,10)]

CARI.fDOM.Q.filled$fDOM_load = CARI.fDOM.Q.filled$Q * CARI.fDOM.Q.filled$fDOM.QSU
CARI.fDOM.Q.filled$fDOM_yield_mg.km2.15min = CARI.fDOM.Q.filled$fDOM.QSU/31 # CARI is 31 km2

### POKE ###
POKE = subset(DOD_chem, Site == "POKE")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
POKE.fDOM.Q.filled <- POKE[,-c(4,6,7,8,10)]

POKE.fDOM.Q.filled$fDOM_load = POKE.fDOM.Q.filled$Q * POKE.fDOM.Q.filled$fDOM.QSU
POKE.fDOM.Q.filled$fDOM_yield_mg.km2.15min = POKE.fDOM.Q.filled$fDOM.QSU/60 # POKE is 60 km2

### VAUL ###
VAUL = subset(DOD_chem, Site == "VAUL")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
VAUL.fDOM.Q.filled <- VAUL[,-c(4,6,7,8,10)]

VAUL.fDOM.Q.filled$fDOM_load = VAUL.fDOM.Q.filled$Q * VAUL.fDOM.Q.filled$fDOM.QSU
VAUL.fDOM.Q.filled$fDOM_yield_mg.km2.15min = VAUL.fDOM.Q.filled$fDOM.QSU/32 # VAUL is 32 km2

### STRT ###
STRT = subset(DOD_chem, Site == "STRT")
#FRCH.2018.no3.filled = fillgaps(FRCH.2018, FRCH.2018$nitrateuM, "nitrateuM", (24*4))
STRT.fDOM.Q.filled <- STRT[,-c(4,6,7,8,10)]

STRT.fDOM.Q.filled$fDOM_load = STRT.fDOM.Q.filled$Q * STRT.fDOM.Q.filled$fDOM.QSU
STRT.fDOM.Q.filled$fDOM_yield_mg.km2.15min = STRT.fDOM.Q.filled$fDOM.QSU/125 # STRT is 125 km2


fDOM.yield = rbind(FRCH.fDOM.Q.filled, MOOS.fDOM.Q.filled, CARI.fDOM.Q.filled, 
                   POKE.fDOM.Q.filled, VAUL.fDOM.Q.filled, STRT.fDOM.Q.filled)

#### fDOM catchment yeild plot ####

# calc daily yield #
fDOM.yield.daily = fDOM.yield
fDOM.yield.daily$day = format(as.POSIXct(fDOM.yield.daily$DateTime,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
fDOM.yield.daily$day = as.POSIXct(fDOM.yield.daily$day, "%Y-%m-%d", tz="America/Anchorage")
fDOM.yield.daily$DateTime = NULL

fDOM.yield.daily = 
  fDOM.yield.daily %>%
  group_by(day, Site) %>%
  summarize_all(funs(sum), na.rm = FALSE)

fDOM.yield.daily$fDOM_yield_mg.km2.day = fDOM.yield.daily$fDOM_yield_mg.km2.15min
fDOM.yield.daily$fDOM_yield_mg.km2.15min = NULL

# plot #
fDOM.yield.daily$Site <- factor(fDOM.yield.daily$Site, levels = c('MOOS', 'FRCH', 'CARI', 
                                                                  'POKE', 'VAUL', 'STRT'))

fDOM.yield.daily.p = 
  ggplot(fDOM.yield.daily, aes(Site, (fDOM_yield_mg.km2.day))) + geom_boxplot(aes(fill=Site))+
  scale_fill_manual(values=c("#6A3D9A","#2D004B","#FF7F00", "#3288BD", "#ABDDA4", "#66C2A5"), "Catchment") +
  theme_bw() + ylab("fDOM yield (QSU/km2/day)") + xlab("") + 
  theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20))
  

fDOM.yield.daily.density = 
  ggplot() + 
  geom_density(data=fDOM.yield.daily[fDOM.yield.daily$Site == "MOOS",], 
               aes(x=fDOM_yield_mg.km2.day), fill="#6A3D9A",alpha=0.5) + 
  geom_density(data=fDOM.yield.daily[fDOM.yield.daily$Site == "FRCH",], 
               aes(x=fDOM_yield_mg.km2.day), fill="#2D004B", alpha=0.5) +
  geom_density(data=fDOM.yield.daily[fDOM.yield.daily$Site == "CARI",], 
               aes(x=fDOM_yield_mg.km2.day), fill="#FF7F00", alpha=0.5) +
  geom_density(data=fDOM.yield.daily[fDOM.yield.daily$Site == "POKE",], 
               aes(x=fDOM_yield_mg.km2.day), fill="#3288BD", alpha=0.5) +
  geom_density(data=fDOM.yield.daily[fDOM.yield.daily$Site == "VAUL",], 
               aes(x=fDOM_yield_mg.km2.day), fill="#ABDDA4", alpha=0.5) +
  geom_density(data=fDOM.yield.daily[fDOM.yield.daily$Site == "STRT",], 
               aes(x=fDOM_yield_mg.km2.day), fill="#66C2A5", alpha=0.5) +
  ylab("Density") +
  theme_bw() +
  theme(legend.position = "none",
        plot.title = element_text(face = "bold", hjust = 0.5, size =18),
        panel.grid = element_blank(),
        panel.border = element_rect(color = "black", size = 2),
        axis.text = element_text(size = 18),
        axis.title.x = element_text(size = 18),
        axis.title.y = element_text(size = 18),
        plot.margin = margin(.5,2,.5,.5, "cm"))+
  scale_x_log10(breaks= c(2000, 10000, 100000), 
                labels =c("2,000","10,000","100,000"))
fDOM.yield.daily.density

median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="MOOS" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])/
  median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="FRCH" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])

median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="CARI" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])/
  median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="MOOS" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])

median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="FRCH" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])/
  median(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="CARI" & !is.na(fDOM.yield.daily$fDOM_yield_mg.km2.day)])

par(mfrow=c(3,2))
plot(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="FRCH"] ~ fDOM.yield.daily$day[fDOM.yield.daily$Site=="FRCH"], type="b")
plot(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="POKE"] ~ fDOM.yield.daily$day[fDOM.yield.daily$Site=="POKE"], type="b")
plot(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="CARI"] ~ fDOM.yield.daily$day[fDOM.yield.daily$Site=="CARI"], type="b")
plot(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="VAUL"] ~ fDOM.yield.daily$day[fDOM.yield.daily$Site=="VAUL"], type="b")
plot(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="MOOS"] ~ fDOM.yield.daily$day[fDOM.yield.daily$Site=="MOOS"], type="b")
plot(fDOM.yield.daily$fDOM_yield_mg.km2.day[fDOM.yield.daily$Site=="STRT"] ~ fDOM.yield.daily$day[fDOM.yield.daily$Site=="STRT"], type="b")


#########################################################################################################
######################################## Climate ########################################################
#########################################################################################################
# read me #
# The purpose of this script is to summarize CRREL and CPEAK air temp and precip records for 30 years (or as far back as is available) through 2017 (or through the year of the study) for manuscript site descriptions. This file was created for the CPCRW-2017 manuscript, so fork and edit as needed for your purposes.

# note that I have commented out the plotting code in here so that I could test the code quickly. The plots take a while to load because these records are long, but you should take the time to examine the plots when running the code the first time or if you bring in updated data.

# 1) Get that data. 
## The below website has BNZ meterological data up to present, so is a better source than the BNZ data catalog. Note that this data is uncorrected pre 2010, so examine it critically!
## Website: http://bnznet.iab.uaf.edu/vdv/index.html
## User name: data_user
## Password: borealBNZ
## Use the downward arrow icon on the left panel menu to select the range of data that you need and download to a .txt file. Yes, you have to just click through the months until you get back to 1986 D:
## See the screenshot in the repo to see what the data download should look like
## This data needs to be updated for newer studies!

# 2) Get that snow data.
## The best snow water equivelent data (SWE) for wintertime precip. is from the CARSNOW site within the Caribou Poker Creeks Research Watershed for 2007-2016. I can't find this data in the uncorrected BNZ catalog, so I got this from the regular BNZ data catalog here: http://www.lter.uaf.edu/data/data-detail/id/386
## Snow data from more current sources similarly only goes back to 2006, and has no documentation of what the conversion to SWE is. Due to the lack of congruent data with the rain data from any source, I'm going to use the CARSNOW data to get an annual average, and just add this to the rain data for a climate description.
## This data needs to be updated for newer studies!

# 3) Of the met. data downloaded, determine the longest records. 
## See above for snow decisions. 
## For air, the longest record is from CPCRW.CRREL.Main.Met.Station..AirTemp from the 100 and 300 cm heights. (1992) I will use the avg. of these
## For rain, the longest record is CPCRW.Caribou.Peak..TippingBucket_TOT.mm.CPEAK.mm. (1993). I will use this.

# 4) Examine and clean data. Most records have obviously anomalous highs and/or lows. Id and remove.

# 5) calculate annual and monthly means for study period and long term records, and compare. See "final report" for how this should all turned into prose for a manuscript. 


#### libraries #
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(plyr)
library(zoo)
library(xts)
library(forecast)




#### load data #

setwd("~/Documents/Storms/Harms_general")

dat = read.table(file = "vdv_1987-01-01 00_00_00_2020-02-27 00_00_00_20200227045530.csv", 
                 header = T, sep = ",", dec = ".", skip=4)
dat$dateAK = as.POSIXct(dat$Time, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")

snow = read.table(file = "386_SNOWPILLOW_CARSNOW_2007-2021.txt", header = T, sep = ",", dec = ".")
#snow$dateAK = as.POSIXct(paste(snow$date, snow$hour), "%Y-%m-%d %H%M", tz="America/Anchorage")
snow$dateAK = as.POSIXct(snow$date, "%Y-%m-%d", tz="America/Anchorage")


#### determine longest records #

min(dat$dateAK[!is.na(dat$CPCRW.Caribou.Peak..AirTemp_1000cm.CPEAK..C.)], na.rm=T) #1998
min(dat$dateAK[!is.na(dat$CPCRW.Caribou.Peak..AirTemp_200cm.CPEAK..C.)], na.rm=T) #1998
min(dat$dateAK[!is.na(dat$CPCRW.Caribou.Peak..AirTemp_100cm.CPEAK..C.)], na.rm=T) #1993
min(dat$dateAK[!is.na(dat$CPCRW.CRREL.Main.Met.Station..AirTemp_1000cm.CRREL..C.)], na.rm=T) #2000
min(dat$dateAK[!is.na(dat$CPCRW.CRREL.Main.Met.Station..AirTemp_300cm.CRREL..C.)], na.rm=T) #1992
min(dat$dateAK[!is.na(dat$CPCRW.CRREL.Main.Met.Station..AirTemp_1200cm.CRREL..C.)], na.rm=T) #2000
min(dat$dateAK[!is.na(dat$CPCRW.CRREL.Main.Met.Station..AirTemp_100cm.CRREL..C.)], na.rm=T) #1992
min(dat$dateAK[!is.na(dat$CPCRW.Caribou.Peak..SnowBucket_mm.CPEAK.mm.)], na.rm=T) #2008
min(dat$dateAK[!is.na(dat$CPCRW.Caribou.Peak..TippingBucket_TOT.mm.CPEAK.mm.)], na.rm=T) #1993
min(dat$dateAK[!is.na(dat$CPCRW.CRREL.Main.Met.Station..SnowDepth.m..CRREL.m.)], na.rm=T) #2006
min(dat$dateAK[!is.na(dat$CPCRW.CRREL.Main.Met.Station..TippingBucket_TOT.mm..CRREL.mm.)], na.rm=T) #2007

min(snow$dateAK) #2007

# longest temp records is CPCRW.CRREL.Main.Met.Station..AirTemp_300cm.CRREL..C.so I will use thiis for temp

# longest rain record is CPCRW.Caribou.Peak..TippingBucket_TOT.mm.CPEAK.mm., so I will use this for rain

# longest snow 

#### select data for summaries #

temp = data.frame(
  date_timeAK = dat$dateAK,
  AirTemp = dat$CPCRW.CRREL.Main.Met.Station..AirTemp_300cm.CRREL..C.
)
temp = na.trim(temp, is.na = "any") # trim nas from ends
# check for nas
any(is.na(temp))
#plot(temp$AirTemp ~ temp$date_timeAK)

rain = data.frame(
  date_timeAK = dat$dateAK,
  Rain = dat$CPCRW.Caribou.Peak..TippingBucket_TOT.mm.CPEAK.mm.
)
rain = na.trim(rain, is.na = "any") # trim nas from ends
# check for nas
any(is.na(rain))
#plot(rain$Rain ~ rain$date_timeAK)

#### clean data #

temp.c = temp[temp$AirTemp < 40,]
#plot(temp.c$AirTemp ~ temp.c$date_timeAK)

rain.c = rain[rain$Rain > -1 & rain$Rain < 70,]
#plot(rain.c$Rain ~ rain.c$date_timeAK)
## numbers before 1997 look fishy (too high), so need to remove
rain.c.r = rain.c[rain.c$date_timeAK > "1998-01-01 00:00:00 AKST",]
rain.c.r = na.trim(rain.c.r, is.na="all")
#plot(rain.c.r$Rain ~ rain.c.r$date_timeAK)

#plot(snow$value ~ snow$dateAK)
snow.c = snow[snow$value > 0,]
#plot(snow.c$value ~ snow.c$dateAK)

#### set date limits for study period #
yr.limit = 2018 # this should be the year AFTER your study
yr.of = 2017 # this should be the year OF your study
#### air temp #

temp.c$day = day(temp.c$date_timeAK) # add a column for day
temp.c$mo = month(temp.c$date_timeAK) # add a column for month
temp.c$yr = year(temp.c$date_timeAK) # add a column for year

## convert hourly data to daily averages ##
temp.daily = 
  temp.c %>%
  select(day, mo, yr, AirTemp)%>%
  group_by(day, mo, yr) %>%
  summarize_all(funs(mean), na.rm = T)

## convert mean daily to mean monthly ##
temp.monthly = 
  temp.daily %>%
  group_by(mo, yr) %>%
  summarize_all(funs(mean), na.rm = T)

## convert mean monthly to mean annual ##
temp.annual = 
  temp.monthly %>%
  group_by(yr) %>%
  summarize_all(funs(mean), na.rm = TRUE)
plot(temp.annual$AirTemp ~ temp.annual$yr)

# calculate annual mean for study period - put the year after your last study year in here
mean(temp.annual$AirTemp[temp.annual$yr < yr.limit], na.rm = T)
# get year range for mean
range(temp.annual$yr[temp.annual$yr < yr.limit], na.rm = T)
# annual mean = -3.560643 C
# for: 1992 - 2017

# compare study year to long term avg. 
now = temp.annual$AirTemp[temp.annual$yr == yr.of][1]
then = mean(temp.annual$AirTemp[temp.annual$yr < yr.limit], na.rm = T)
now-then
# study is 1.02 deg higher than long term avg... I think that qualifies as higher

# calculate mean monthly lowest temperature from January means
mean(temp.monthly$AirTemp[temp.monthly$mo == 1 & temp.monthly$yr < yr.limit], na.rm = T)
# -23.20802 C

# calculate mean monthly highest temperature from July means
mean(temp.monthly$AirTemp[temp.monthly$mo == 7 & temp.monthly$yr < yr.limit], na.rm = T)
# 15.06846 C

# compare study period to the long term avg for those months
# THIS study period = May-Sept 2017
# I'm going to designate a difference of |1 deg| as different enough to report as non-similar

# temp in May of this study:
now.may = temp.monthly$AirTemp[temp.monthly$mo == 5 & temp.monthly$yr == yr.of][1] 
# long term Mar temp avg:
then.may = mean(temp.monthly$AirTemp[temp.monthly$mo == 5 & temp.monthly$yr < yr.limit], na.rm = T)
now.may - then.may
# study is 0.132 deg higher than long term avg = "similar"

# temp in june of this study:
now.june = temp.monthly$AirTemp[temp.monthly$mo == 6 & temp.monthly$yr == yr.of][1] 
# long term Mar temp avg:
then.june = mean(temp.monthly$AirTemp[temp.monthly$mo == 6 & temp.monthly$yr < yr.limit], na.rm = T)
now.june - then.june
# study is 0.718 deg higher than long term avg = "similar"

# temp in july of this study:
now.july = temp.monthly$AirTemp[temp.monthly$mo == 7 & temp.monthly$yr == yr.of][1] 
# long term Mar temp avg:
then.july = mean(temp.monthly$AirTemp[temp.monthly$mo == 7 & temp.monthly$yr < yr.limit], na.rm = T)
now.july - then.july
# study is 1.962 deg higher than long term avg... I think that qualifies as higher

# temp in aug of this study:
now.aug = temp.monthly$AirTemp[temp.monthly$mo == 8 & temp.monthly$yr == yr.of][1] 
# long term Mar temp avg:
then.aug = mean(temp.monthly$AirTemp[temp.monthly$mo == 8 & temp.monthly$yr < yr.limit], na.rm = T)
now.aug - then.aug
# study is 0.589 deg higher than long term avg = "similar"

#
#### precip RAIN #
rain.c.r$day = day(rain.c.r$date_timeAK) # add a column for day
rain.c.r$mo = month(rain.c.r$date_timeAK) # add a column for month
rain.c.r$yr = year(rain.c.r$date_timeAK) # add a column for year

## convert hourly data to daily sum ##
rain.daily = 
  rain.c.r %>%
  select(day, mo, yr, Rain)%>%
  group_by(day, mo, yr) %>%
  summarize_all(funs(sum), na.rm = TRUE)

## convert daily sum to monthly sum ##
rain.monthly = 
  rain.daily %>%
  group_by(mo, yr) %>%
  summarize_all(funs(sum), na.rm = TRUE)

## convert daily sum to annual sum ##
rain.annual = 
  rain.daily %>%
  group_by(yr) %>%
  summarize_all(funs(sum), na.rm = TRUE)


# compare study period to the long term avg for those months
# THIS study period = May-Sept 2017
# I'm going to designate a difference of |10 mm| as different enough to report as non-similar

# rain in May of this study:
now.may = rain.monthly$Rain[rain.monthly$mo == 5 & rain.monthly$yr == yr.of][1] 
# long term Mar rain avg:
then.may = mean(rain.monthly$Rain[rain.monthly$mo == 5 & rain.monthly$yr < yr.limit], na.rm = T)
now.may - then.may
# study is 14.89705 mm higher than long term avg = "higher"

# rain in june of this study:
now.june = rain.monthly$Rain[rain.monthly$mo == 6 & rain.monthly$yr == yr.of][1] 
# long term Mar rain avg:
then.june = mean(rain.monthly$Rain[rain.monthly$mo == 6 & rain.monthly$yr < yr.limit], na.rm = T)
now.june - then.june
# study is -23.1236 mm lower than long term avg = "lower"

# rain in july of this study:
now.july = rain.monthly$Rain[rain.monthly$mo == 7 & rain.monthly$yr == yr.of][1] 
# long term Mar rain avg:
then.july = mean(rain.monthly$Rain[rain.monthly$mo == 7 & rain.monthly$yr < yr.limit], na.rm = T)
now.july - then.july
# study is 7.33 mm higher than long term avg = "similar"

# rain in aug of this study:
now.aug = rain.monthly$Rain[rain.monthly$mo == 8 & rain.monthly$yr == yr.of][1] 
# long term Mar rain avg:
then.aug = mean(rain.monthly$Rain[rain.monthly$mo == 8 & rain.monthly$yr < yr.limit], na.rm = T)
now.aug - then.aug
# study is 1.1 mm higher than long term avg = "similar"

#### precip SNOW #
# 	The snow pillow records the hourly water content of the snowpack (snow water equivalent) at the CARSNOW site within the Caribou Poker Creeks Research Watershed during the winter months. It consists of two 1m square aluminium "pillows" filled with a propylene glycol/water solution attached via piping to a druck pressure transducer. The pressure on the pillow is converted to **cm of water**. A manometer tube is also attached for manaul readings and calibration

snow$day = day(snow$dateAK) # add a column for day
snow$mo = month(snow$dateAK) # add a column for month
snow$yr = year(snow$dateAK) # add a column for year

## convert hourly data to daily mean ##
snow.daily = 
  snow %>%
  select(day, mo, yr, value)%>%
  group_by(day, mo, yr) %>%
  summarize_all(funs(mean), na.rm = TRUE)

## convert daily sum to monthly sum ##
snow.monthly = 
  snow.daily %>%
  group_by(mo, yr) %>%
  summarize_all(funs(sum), na.rm = TRUE)

## convert daily sum to annual mean ##
snow.annual = 
  snow.daily %>%
  group_by(yr) %>%
  summarize_all(funs(mean), na.rm = TRUE)

## calculate mean annual snowfall, converting cm to mm
# numbers in 2009 are negative, hence the requirement for values to be > 0
mean(snow.annual$value[snow.annual$value>0 & snow.annual$yr < yr.limit])*10 

#### mean annual precip = rainfall + mean annual SWE in mm, == 
mean(rain.annual$Rain[rain.annual$yr<yr.limit], na.rm=T) + 
  mean(snow.annual$value[snow.annual$value>0 & snow.annual$yr < yr.limit])*10 

#### what percentage falls as rain?
((mean(rain.annual$Rain[rain.annual$yr<yr.limit], na.rm=T) ) / 
    ((mean(rain.annual$Rain[rain.annual$yr<yr.limit], na.rm=T) )+ 
       mean(snow.annual$value[snow.annual$value>0 & snow.annual$yr < yr.limit])*10 )
)*100

#### final report #

# this is for a study that occurred May-Sept. 2017
# Mean annual air temperature is -3.6°C, with lowest mean monthly temperature typically in January (-23.2°C) and highest in July (15.1°C). During the study period (May-Sept. 2017), mean monthly temperatures were similar to long-term averages (since 1992), with the exception of mean July temperatures ~2°C warmer than average. The CPCRW receives 351.1 mm precipitation annually on average, with 294.2 mm falling as rain. Mean monthly precipitation during the study period was higher in May (39.4 mm), lower in June (34.8 mm), and similar in July (104.1 mm) and Aug. (83.1 mm) compared to long term monthly averages. 



######## PLOTS #
library(RColorBrewer)
brewer.pal(n = 11, name = "RdBu")

rain.monthly.summer <- subset(rain.monthly, rain.monthly$mo > 4 & rain.monthly$mo < 10)

ggplot(rain.monthly.summer, aes(fill=as.factor(mo), y= Rain, x= yr)) + 
  geom_bar(position="stack", stat="identity", color = "black") +
  xlab("Year") +
  ylab("Precipitation (mm)") +
  theme_classic() +
  scale_fill_manual(values = c("#A6CEE3", "#B2DF8A", "#FB9A99", "#FF7F00", "#FDBF6F"))

snow.winter.1 <- subset(snow.monthly, snow.monthly$mo == 1)
snow.winter.2 <- subset(snow.monthly, snow.monthly$mo == 2)
snow.winter.3 <- subset(snow.monthly, snow.monthly$mo == 3)
snow.winter.4 <- subset(snow.monthly, snow.monthly$mo == 4)
snow.winter.10 <- subset(snow.monthly, snow.monthly$mo == 10)
snow.winter.11 <- subset(snow.monthly, snow.monthly$mo == 11)
snow.winter.12<- subset(snow.monthly, snow.monthly$mo == 12)

snow.winter <- rbind(snow.winter.1, snow.winter.2, snow.winter.3, snow.winter.4, snow.winter.10,
                     snow.winter.11, snow.winter.12)


ggplot(snow.winter, aes(fill=as.factor(mo), y= value, x= yr)) + 
  geom_bar(position="stack", stat="identity", color = "black") +
  xlab("Year") +
  ylab("Precipitation (mm)") +
  theme_classic() +
  scale_fill_manual(values = c("#A6CEE3", "#B2DF8A", "#FB9A99", "#FF7F00", "#FDBF6F", "blue", "red"))


## convert daily sum to annual mean ##
snow.annual = 
  snow.monthly %>%
  group_by(yr) %>%
  summarize_all(funs(mean), na.rm = TRUE)
names(snow.annual) <- c("yr", "day", "mo", "precip")
snow.annual$method <- "Snow"

rain.monthly.summer$method <- "Rain"
names(rain.monthly.summer) <- c("mo", "yr", "day", "precip", "method")

snow.rain <- rbind(rain.monthly.summer, snow.annual)
snow.rain <- snow.rain[-110,]

snow.rain[c(1:21), 5] <- "May"
snow.rain[c(22:42), 5] <- "June"
snow.rain[c(43:63), 5] <- "July"
snow.rain[c(64:85), 5] <- "August"
snow.rain[c(86:107), 5] <- "September"
snow.rain[c(108:116), 5] <- "Snow"


ggplot(snow.rain, aes(fill=method, y= precip, x= yr)) + 
  geom_bar(position="stack", stat="identity", color = "black") +
  xlab("Year") +
  ylab("Precipitation (mm)") +
  theme_classic() +
  scale_fill_manual(values = c("#B2182B", "#B2DF8A", "#FB9A99", "#FDBF6F", "#FF7F00", "#92C5DE"))

snow.rain.new <- snow.rain

snow.rain.new$method <- factor(snow.rain.new$method,                 # Relevel group factor
                               levels = c("May", "June", "July", "August", "September", "Snow"))
ggplot(snow.rain.new, aes(fill=method, y= precip, x= yr)) + 
  geom_bar(position="stack", stat="identity", color = "black") +
  xlab("Year") +
  ylab("Precipitation (mm)") +
  theme_classic() +
  scale_fill_manual(values = c("#FDBF6F", "#FB9A99", "#B2DF8A", "#B2182B", "#FF7F00", "#92C5DE"))




### averages of antecedent conditions 

mean.storm <- antecedent_HI_FI_1_0 %>% group_by(site.ID, year) %>% 
  summarize(mean.storm = mean(StormPrecip, na.rm= TRUE),
            mean.week = mean(PrecipWeek, na.rm = TRUE))



#











#####



