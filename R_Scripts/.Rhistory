text = element_text(size=20),
strip.background = element_blank(),
legend.title = element_blank()
)
typeof(HI.dat)
rm(HI.dat)
HI.dat <- read.csv("Output_from_analysis/HI.dat.csv")
typeof(HI.dat)
HI.dat <- data.frame(matrix(unlist(HI.dat), nrow=length(HI.dat), byrow=TRUE),stringsAsFactors=FALSE)
typeof(HI.dat)
rm(HI.dat)
HI.dat <- read.csv("Output_from_analysis/HI.dat.csv")
HI.dat <- data.frame(matrix(unlist(HI.dat), nrow=length(HI.dat), byrow=TRUE),stringsAsFactors=FALSE)
median_cl_boot <- function(x, conf = 0.95) {
lconf <- (1 - conf)/2
uconf <- 1 - lconf
require(boot)
bmedian <- function(x, ind) median(x[ind])
bt <- boot(x, bmedian, 10000)
bb <- boot.ci(bt, conf = 0.95, type = "perc")
data.frame(y = median(x), ymin = quantile(bt$t, lconf), ymax = quantile(bt$t,
uconf))
}
HI.med <- HI.dat %>%
group_by(HI.dat$response, HI.dat$doy, HI.dat$site.ID, HI.dat$year, HI.dat$storm.num) %>%
nest() %>%
mutate(medHI.boot = map(data,
~boot(data = .$HI,
statistic = function(x,i) median(x[i]),
R = 1000)),
boot_tidy = map(medHI.boot, tidy, conf.int = TRUE, con.method = "perc"),
n = map(data, nrow)) %>%
select(-data, -medHI.boot) %>%
unnest(cols = -c(HI.dat$response, HI.dat$doy, HI.dat$site.ID, HI.dat$year, HI.dat$storm.num)) %>%
ungroup()
rm(HI.dat)
HI.dat <- read.csv("Output_from_analysis/HI.dat.csv")
HI.dat <- data.frame(matrix(unlist(HI.dat), nrow=length(HI.dat), byrow=TRUE))
HI.dat <- data.frame(matrix(unlist(HI.dat), nrow=length(HI.dat), byrow=FALSE))
HI.med <- HI.dat %>%
group_by(HI.dat$response, HI.dat$doy, HI.dat$site.ID, HI.dat$year, HI.dat$storm.num) %>%
nest() %>%
mutate(medHI.boot = map(data,
~boot(data = .$HI,
statistic = function(x,i) median(x[i]),
R = 1000)),
boot_tidy = map(medHI.boot, tidy, conf.int = TRUE, con.method = "perc"),
n = map(data, nrow)) %>%
select(-data, -medHI.boot) %>%
unnest(cols = -c(HI.dat$response, HI.dat$doy, HI.dat$site.ID, HI.dat$year, HI.dat$storm.num)) %>%
ungroup()
HI.Test <- HI.dat %>% group_by(year) %>%
summarize(total = sum(year))
HI.Test <- HI.dat %>% group_by(HI.dat$year) %>%
summarize(total = sum(HI.dat$year))
HI.dat <- as.data.frame(HI.dat)
is.data.frame(HI.dat)
HI.dat <- read.csv("Output_from_analysis/HI.dat.csv")
rm(HI.dat)
HI.dat <- read.csv("Output_from_analysis/HI.dat.csv")
is.data.frame(HI.dat)
HI.dat$year <- as.numeric(HI.dat$year)
HI.dat$doy<- as.numeric(HI.dat$doy)
median_cl_boot <- function(x, conf = 0.95) {
lconf <- (1 - conf)/2
uconf <- 1 - lconf
require(boot)
bmedian <- function(x, ind) median(x[ind])
bt <- boot(x, bmedian, 10000)
bb <- boot.ci(bt, conf = 0.95, type = "perc")
data.frame(y = median(x), ymin = quantile(bt$t, lconf), ymax = quantile(bt$t,
uconf))
}
HI.Test <- HI.dat %>% group_by(HI.dat$year) %>%
summarize(total = sum(HI.dat$year))
HI.dat <- read.csv("Output_from_analysis/HI.dat.csv")
str(HI.dat)
is.data.frame(HI.dat)
library(here)
library(tidyverse)
library(boot)
library(broom)
library(purrr)
library(viridis)
library(tidyr)
library(plyr)
library(dplyr)
library(tidyverse)
library(lubridate)
library(ggplot2)
library(scales)
library(plyr)
library(imputeTS)
library(TSA)
library(bbmle)
library(zoo)
library(xts)
library(forecast)
library(stats)
library(lattice)
library(nlme)
library(geosphere)
library(car)
library(EcoHydRology)
library(dplyr)
median_cl_boot <- function(x, conf = 0.95) {
lconf <- (1 - conf)/2
uconf <- 1 - lconf
require(boot)
bmedian <- function(x, ind) median(x[ind])
bt <- boot(x, bmedian, 10000)
bb <- boot.ci(bt, conf = 0.95, type = "perc")
data.frame(y = median(x), ymin = quantile(bt$t, lconf), ymax = quantile(bt$t,
uconf))
}
str(HI.dat)
HI.Test <- HI.dat %>% group_by(year) %>%
summarize(total = sum(year)) %>% data.frame()
HI.dat$year <- as.numeric(HI.dat$year)
HI.Test <- HI.dat %>% group_by(year) %>%
summarize(total = sum(doy)) %>% data.frame()
test <- HI.dat %>% group_by(year) %>%
summarize(total=sum(year)) %>% data.frame()
HI.recent <- HI.dat %>% dplyr::filter(year>=2019)
rm(HI.dat)
HI.dat <- read.csv("Output_from_analysis/HI.dat.csv")
HI.recent <- HI.dat %>% dplyr::filter(year>=2019)
str(HI.dat)
HI.dat$year <- as.factor(HI.dat$year)
str(HI.dat)
HI.recent <- HI.dat %>% dplyr::filter(year>=2019)
rm(HI.dat)
HI.med <- HI.dat %>%
group_by(response, doy, site.ID, year, storm.num) %>%
nest() %>%
mutate(medHI.boot = map(data,
~boot(data = .$HI,
statistic = function(x,i) median(x[i]),
R = 1000)),
boot_tidy = map(medHI.boot, tidy, conf.int = TRUE, con.method = "perc"),
n = map(data, nrow)) %>%
select(-data, -medHI.boot) %>%
unnest(cols = -c(response, doy, site.ID, year, storm.num)) %>%
ungroup()
test <- HI.dat %>% group_by(year) %>%
summarize(total=sum(year)) %>% data.frame()
HI.dat <- read.csv("Output_from_analysis/HI.dat.csv")
test <- HI.dat %>% group_by(year) %>%
summarize(total=sum(year)) %>% data.frame()
View(HI.dat)
str(HI.dat)
rm(HI.dat)
HI.dat <- read.csv("~/Downloads/comb.all.HI.df.csv")
str(HI.dat)
median_cl_boot <- function(x, conf = 0.95) {
lconf <- (1 - conf)/2
uconf <- 1 - lconf
require(boot)
bmedian <- function(x, ind) median(x[ind])
bt <- boot(x, bmedian, 10000)
bb <- boot.ci(bt, conf = 0.95, type = "perc")
data.frame(y = median(x), ymin = quantile(bt$t, lconf), ymax = quantile(bt$t,
uconf))
}
bay.data.system <- bay.data %>% group_by(System, retYr) %>%
summarize(total=sum(ret)) %>% data.frame()
HI.med <- HI.dat %>%
group_by(response, doy, site.ID, year, storm.num) %>%
nest() %>%
mutate(medHI.boot = map(data,
~boot(data = .$HI,
statistic = function(x,i) median(x[i]),
R = 1000)),
boot_tidy = map(medHI.boot, tidy, conf.int = TRUE, con.method = "perc"),
n = map(data, nrow)) %>%
select(-data, -medHI.boot) %>%
unnest(cols = -c(response, doy, site.ID, year, storm.num)) %>%
ungroup()
median_cl_boot <- function(x, conf = 0.95) {
lconf <- (1 - conf)/2
uconf <- 1 - lconf
require(boot)
bmedian <- function(x, ind) median(x[ind])
bt <- boot(x, bmedian, 10000)
bb <- boot.ci(bt, conf = 0.95, type = "perc")
data.frame(y = median(x), ymin = quantile(bt$t, lconf), ymax = quantile(bt$t,
uconf))
}
HI.med <- HI.dat %>%
group_by(response, doy, site.ID, year, storm.num) %>%
nest() %>%
mutate(medHI.boot = map(data,
~boot(data = .$HI,
statistic = function(x,i) median(x[i]),
R = 1000)),
boot_tidy = map(medHI.boot, tidy, conf.int = TRUE, con.method = "perc"),
n = map(data, nrow)) %>%
select(-data, -medHI.boot) %>%
unnest(cols = -c(response, doy, site.ID, year, storm.num)) %>%
ungroup()
library(here)
library(tidyverse)
library(boot)
library(broom)
library(purrr)
library(viridis)
library(here)
library(tidyverse)
library(boot)
library(broom)
library(purrr)
library(viridis)
#
HI.dat <- read.csv("~/Downloads/comb.all.HI.df.csv")
median_cl_boot <- function(x, conf = 0.95) {
lconf <- (1 - conf)/2
uconf <- 1 - lconf
require(boot)
bmedian <- function(x, ind) median(x[ind])
bt <- boot(x, bmedian, 10000)
bb <- boot.ci(bt, conf = 0.95, type = "perc")
data.frame(y = median(x), ymin = quantile(bt$t, lconf), ymax = quantile(bt$t,
uconf))
}
HI.med <- HI.dat %>%
group_by(response, doy, site.ID, year, storm.num) %>%
nest() %>%
mutate(medHI.boot = map(data,
~boot(data = .$HI,
statistic = function(x,i) median(x[i]),
R = 1000)),
boot_tidy = map(medHI.boot, tidy, conf.int = TRUE, con.method = "perc"),
n = map(data, nrow)) %>%
select(-data, -medHI.boot) %>%
unnest(cols = -c(response, doy, site.ID, year, storm.num)) %>%
ungroup()
library(here)
library(tidyverse)
library(boot)
library(broom)
library(purrr)
library(viridis)
HI.med <- HI.dat %>%
group_by(response, doy, site.ID, year, storm.num) %>%
nest() %>%
mutate(medHI.boot = map(data,
~boot(data = .$HI,
statistic = function(x,i) median(x[i]),
R = 1000)),
boot_tidy = map(medHI.boot, tidy, conf.int = TRUE, con.method = "perc"),
n = map(data, nrow)) %>%
select(-data, -medHI.boot) %>%
unnest(cols = -c(response, doy, site.ID, year, storm.num)) %>%
ungroup()
rm(HI.dat)
HI.dat <- read.csv("Output_from_analysis/HI.dat.csv")
median_cl_boot <- function(x, conf = 0.95) {
lconf <- (1 - conf)/2
uconf <- 1 - lconf
require(boot)
bmedian <- function(x, ind) median(x[ind])
bt <- boot(x, bmedian, 10000)
bb <- boot.ci(bt, conf = 0.95, type = "perc")
data.frame(y = median(x), ymin = quantile(bt$t, lconf), ymax = quantile(bt$t,
uconf))
}
HI.med <- HI.dat %>%
group_by(response, doy, site.ID, year, storm.num) %>%
nest() %>%
mutate(medHI.boot = map(data,
~boot(data = .$HI,
statistic = function(x,i) median(x[i]),
R = 1000)),
boot_tidy = map(medHI.boot, tidy, conf.int = TRUE, con.method = "perc"),
n = map(data, nrow)) %>%
select(-data, -medHI.boot) %>%
unnest(cols = -c(response, doy, site.ID, year, storm.num)) %>%
ungroup()
reticulate::repl_python()
MOOS.hyst.results.list = list(py$hysdict_MOOS_storm1_06_20_NO3,
py$hysdict_MOOS_storm1_06_20_fDOM,
py$hysdict_MOOS_storm1_06_20_SPC,
py$hysdict_MOOS_storm1_06_20_turb
)
MOOS.hyst.results.list.2 = list()
for (i in 1:length(MOOS.hyst.results.list)){
MOOS.hyst.results.list.2[[i]] = as.data.frame(t(as.numeric(c(
MOOS.hyst.results.list[[i]][["HI_mean_with_Interp"]],
MOOS.hyst.results.list[[i]][["HI_standard_deviation_with_Interp"]],
MOOS.hyst.results.list[[i]][["Normalized slope of response"]],
MOOS.hyst.results.list[[i]][["interpolated Max width of response"]],
MOOS.hyst.results.list[[i]][["Min response"]],
MOOS.hyst.results.list[[i]][["Max response"]],
MOOS.hyst.results.list[[i]][["Peak Q"]]
))))
names(MOOS.hyst.results.list.2[[i]]) = c("HI_mean_Interp", "HI_sd_with_Interp", "N.S.", "Max_width_Interp", "Min_response", "Max_response", "Peak_Q")
}
HIs.list = list()
HIs.tests = list()
for (i in 1:length(MOOS.hyst.results.list)){
HIs.list[[i]] = unlist(MOOS.hyst.results.list[[i]][["Hysteresis_Index"]],recursive=FALSE)
HIs.tests[[i]] = as.data.frame(t(round(as.numeric(c(shapiro.test(HIs.list[[i]])$statistic, shapiro.test(HIs.list[[i]])$p.value,
t.test(HIs.list[[i]], mu=0)$statistic, t.test(HIs.list[[i]], mu=0)$p.value,
t.test(HIs.list[[i]], mu=0)$conf.int[1],t.test(HIs.list[[i]], mu=0)$conf.int[2],
wilcox.test(HIs.list[[i]], mu=0)$statistic, wilcox.test(HIs.list[[i]], mu=0)$p.value)), 4)))
names(HIs.tests[[i]]) = c("ShapiroTest.W", "ShapiroTest.p", "t.test.stat", "t.test.p", "t.test.CIlow", "t.test.CIhigh",
"wilcox.test.stat", "wilcox.test.p")
}
MOOS.hyst.results.list = list(py$hysdict_MOOS_storm1_06_20_NO3,
py$hysdict_MOOS_storm1_06_20_SPC,
py$hysdict_MOOS_storm1_06_20_turb
)
MOOS.hyst.results.list.2 = list()
for (i in 1:length(MOOS.hyst.results.list)){
MOOS.hyst.results.list.2[[i]] = as.data.frame(t(as.numeric(c(
MOOS.hyst.results.list[[i]][["HI_mean_with_Interp"]],
MOOS.hyst.results.list[[i]][["HI_standard_deviation_with_Interp"]],
MOOS.hyst.results.list[[i]][["Normalized slope of response"]],
MOOS.hyst.results.list[[i]][["interpolated Max width of response"]],
MOOS.hyst.results.list[[i]][["Min response"]],
MOOS.hyst.results.list[[i]][["Max response"]],
MOOS.hyst.results.list[[i]][["Peak Q"]]
))))
names(MOOS.hyst.results.list.2[[i]]) = c("HI_mean_Interp", "HI_sd_with_Interp", "N.S.", "Max_width_Interp", "Min_response", "Max_response", "Peak_Q")
}
HIs.list = list()
HIs.tests = list()
for (i in 1:length(MOOS.hyst.results.list)){
HIs.list[[i]] = unlist(MOOS.hyst.results.list[[i]][["Hysteresis_Index"]],recursive=FALSE)
HIs.tests[[i]] = as.data.frame(t(round(as.numeric(c(shapiro.test(HIs.list[[i]])$statistic, shapiro.test(HIs.list[[i]])$p.value,
t.test(HIs.list[[i]], mu=0)$statistic, t.test(HIs.list[[i]], mu=0)$p.value,
t.test(HIs.list[[i]], mu=0)$conf.int[1],t.test(HIs.list[[i]], mu=0)$conf.int[2],
wilcox.test(HIs.list[[i]], mu=0)$statistic, wilcox.test(HIs.list[[i]], mu=0)$p.value)), 4)))
names(HIs.tests[[i]]) = c("ShapiroTest.W", "ShapiroTest.p", "t.test.stat", "t.test.p", "t.test.CIlow", "t.test.CIhigh",
"wilcox.test.stat", "wilcox.test.p")
}
MOOS.hyst.results.list = list(py$hysdict_MOOS_storm1_06_20_NO3,
py$hysdict_MOOS_storm1_06_20_turb
)
MOOS.hyst.results.list.2 = list()
for (i in 1:length(MOOS.hyst.results.list)){
MOOS.hyst.results.list.2[[i]] = as.data.frame(t(as.numeric(c(
MOOS.hyst.results.list[[i]][["HI_mean_with_Interp"]],
MOOS.hyst.results.list[[i]][["HI_standard_deviation_with_Interp"]],
MOOS.hyst.results.list[[i]][["Normalized slope of response"]],
MOOS.hyst.results.list[[i]][["interpolated Max width of response"]],
MOOS.hyst.results.list[[i]][["Min response"]],
MOOS.hyst.results.list[[i]][["Max response"]],
MOOS.hyst.results.list[[i]][["Peak Q"]]
))))
names(MOOS.hyst.results.list.2[[i]]) = c("HI_mean_Interp", "HI_sd_with_Interp", "N.S.", "Max_width_Interp", "Min_response", "Max_response", "Peak_Q")
}
HIs.list = list()
HIs.tests = list()
for (i in 1:length(MOOS.hyst.results.list)){
HIs.list[[i]] = unlist(MOOS.hyst.results.list[[i]][["Hysteresis_Index"]],recursive=FALSE)
HIs.tests[[i]] = as.data.frame(t(round(as.numeric(c(shapiro.test(HIs.list[[i]])$statistic, shapiro.test(HIs.list[[i]])$p.value,
t.test(HIs.list[[i]], mu=0)$statistic, t.test(HIs.list[[i]], mu=0)$p.value,
t.test(HIs.list[[i]], mu=0)$conf.int[1],t.test(HIs.list[[i]], mu=0)$conf.int[2],
wilcox.test(HIs.list[[i]], mu=0)$statistic, wilcox.test(HIs.list[[i]], mu=0)$p.value)), 4)))
names(HIs.tests[[i]]) = c("ShapiroTest.W", "ShapiroTest.p", "t.test.stat", "t.test.p", "t.test.CIlow", "t.test.CIhigh",
"wilcox.test.stat", "wilcox.test.p")
}
MOOS.hyst.results.list = list(py$hysdict_MOOS_storm1_06_20_NO3,
)
MOOS.hyst.results.list = list(py$hysdict_MOOS_storm1_06_20_NO3
)
MOOS.hyst.results.list.2 = list()
for (i in 1:length(MOOS.hyst.results.list)){
MOOS.hyst.results.list.2[[i]] = as.data.frame(t(as.numeric(c(
MOOS.hyst.results.list[[i]][["HI_mean_with_Interp"]],
MOOS.hyst.results.list[[i]][["HI_standard_deviation_with_Interp"]],
MOOS.hyst.results.list[[i]][["Normalized slope of response"]],
MOOS.hyst.results.list[[i]][["interpolated Max width of response"]],
MOOS.hyst.results.list[[i]][["Min response"]],
MOOS.hyst.results.list[[i]][["Max response"]],
MOOS.hyst.results.list[[i]][["Peak Q"]]
))))
names(MOOS.hyst.results.list.2[[i]]) = c("HI_mean_Interp", "HI_sd_with_Interp", "N.S.", "Max_width_Interp", "Min_response", "Max_response", "Peak_Q")
}
HIs.list = list()
HIs.tests = list()
for (i in 1:length(MOOS.hyst.results.list)){
HIs.list[[i]] = unlist(MOOS.hyst.results.list[[i]][["Hysteresis_Index"]],recursive=FALSE)
HIs.tests[[i]] = as.data.frame(t(round(as.numeric(c(shapiro.test(HIs.list[[i]])$statistic, shapiro.test(HIs.list[[i]])$p.value,
t.test(HIs.list[[i]], mu=0)$statistic, t.test(HIs.list[[i]], mu=0)$p.value,
t.test(HIs.list[[i]], mu=0)$conf.int[1],t.test(HIs.list[[i]], mu=0)$conf.int[2],
wilcox.test(HIs.list[[i]], mu=0)$statistic, wilcox.test(HIs.list[[i]], mu=0)$p.value)), 4)))
names(HIs.tests[[i]]) = c("ShapiroTest.W", "ShapiroTest.p", "t.test.stat", "t.test.p", "t.test.CIlow", "t.test.CIhigh",
"wilcox.test.stat", "wilcox.test.p")
}
MOOS.hyst.results.list = list(py$hysdict_MOOS_storm1_06_20_NO3,
py$hysdict_MOOS_storm2_06_28_NO3,
py$hysdict_MOOS_storm2_06_28_fDOM,
py$hysdict_MOOS_storm2_06_28_SPC,
py$hysdict_MOOS_storm2_06_28_turb
)
MOOS.hyst.results.list.2 = list()
for (i in 1:length(MOOS.hyst.results.list)){
MOOS.hyst.results.list.2[[i]] = as.data.frame(t(as.numeric(c(
MOOS.hyst.results.list[[i]][["HI_mean_with_Interp"]],
MOOS.hyst.results.list[[i]][["HI_standard_deviation_with_Interp"]],
MOOS.hyst.results.list[[i]][["Normalized slope of response"]],
MOOS.hyst.results.list[[i]][["interpolated Max width of response"]],
MOOS.hyst.results.list[[i]][["Min response"]],
MOOS.hyst.results.list[[i]][["Max response"]],
MOOS.hyst.results.list[[i]][["Peak Q"]]
))))
names(MOOS.hyst.results.list.2[[i]]) = c("HI_mean_Interp", "HI_sd_with_Interp", "N.S.", "Max_width_Interp", "Min_response", "Max_response", "Peak_Q")
}
HIs.list = list()
HIs.tests = list()
for (i in 1:length(MOOS.hyst.results.list)){
HIs.list[[i]] = unlist(MOOS.hyst.results.list[[i]][["Hysteresis_Index"]],recursive=FALSE)
HIs.tests[[i]] = as.data.frame(t(round(as.numeric(c(shapiro.test(HIs.list[[i]])$statistic, shapiro.test(HIs.list[[i]])$p.value,
t.test(HIs.list[[i]], mu=0)$statistic, t.test(HIs.list[[i]], mu=0)$p.value,
t.test(HIs.list[[i]], mu=0)$conf.int[1],t.test(HIs.list[[i]], mu=0)$conf.int[2],
wilcox.test(HIs.list[[i]], mu=0)$statistic, wilcox.test(HIs.list[[i]], mu=0)$p.value)), 4)))
names(HIs.tests[[i]]) = c("ShapiroTest.W", "ShapiroTest.p", "t.test.stat", "t.test.p", "t.test.CIlow", "t.test.CIhigh",
"wilcox.test.stat", "wilcox.test.p")
}
MOOS.hyst.results.list = list(py$hysdict_MOOS_storm1_06_20_NO3,
py$hysdict_MOOS_storm2_06_28_NO3,
py$hysdict_MOOS_storm2_06_28_fDOM,
py$hysdict_MOOS_storm2_06_28_SPC,
py$hysdict_MOOS_storm2_06_28_turb,
py$hysdict_MOOS_storm3_07_18_NO3,
py$hysdict_MOOS_storm3_07_18_fDOM,
py$hysdict_MOOS_storm3_07_18_SPC,
py$hysdict_MOOS_storm3_07_18_turb
)
MOOS.hyst.results.list.2 = list()
for (i in 1:length(MOOS.hyst.results.list)){
MOOS.hyst.results.list.2[[i]] = as.data.frame(t(as.numeric(c(
MOOS.hyst.results.list[[i]][["HI_mean_with_Interp"]],
MOOS.hyst.results.list[[i]][["HI_standard_deviation_with_Interp"]],
MOOS.hyst.results.list[[i]][["Normalized slope of response"]],
MOOS.hyst.results.list[[i]][["interpolated Max width of response"]],
MOOS.hyst.results.list[[i]][["Min response"]],
MOOS.hyst.results.list[[i]][["Max response"]],
MOOS.hyst.results.list[[i]][["Peak Q"]]
))))
names(MOOS.hyst.results.list.2[[i]]) = c("HI_mean_Interp", "HI_sd_with_Interp", "N.S.", "Max_width_Interp", "Min_response", "Max_response", "Peak_Q")
}
HIs.list = list()
HIs.tests = list()
for (i in 1:length(MOOS.hyst.results.list)){
HIs.list[[i]] = unlist(MOOS.hyst.results.list[[i]][["Hysteresis_Index"]],recursive=FALSE)
HIs.tests[[i]] = as.data.frame(t(round(as.numeric(c(shapiro.test(HIs.list[[i]])$statistic, shapiro.test(HIs.list[[i]])$p.value,
t.test(HIs.list[[i]], mu=0)$statistic, t.test(HIs.list[[i]], mu=0)$p.value,
t.test(HIs.list[[i]], mu=0)$conf.int[1],t.test(HIs.list[[i]], mu=0)$conf.int[2],
wilcox.test(HIs.list[[i]], mu=0)$statistic, wilcox.test(HIs.list[[i]], mu=0)$p.value)), 4)))
names(HIs.tests[[i]]) = c("ShapiroTest.W", "ShapiroTest.p", "t.test.stat", "t.test.p", "t.test.CIlow", "t.test.CIhigh",
"wilcox.test.stat", "wilcox.test.p")
}
MOOS.hyst.results.list = list(py$hysdict_MOOS_storm1_06_20_NO3,
py$hysdict_MOOS_storm2_06_28_NO3,
py$hysdict_MOOS_storm2_06_28_fDOM,
py$hysdict_MOOS_storm2_06_28_SPC,
py$hysdict_MOOS_storm2_06_28_turb,
py$hysdict_MOOS_storm3_07_18_NO3,
py$hysdict_MOOS_storm3_07_18_fDOM,
py$hysdict_MOOS_storm3_07_18_SPC,
py$hysdict_MOOS_storm3_07_18_turb,
py$hysdict_MOOS_storm4_07_20_NO3,
py$hysdict_MOOS_storm4_07_20_fDOM,
py$hysdict_MOOS_storm4_07_20_SPC,
py$hysdict_MOOS_storm4_07_20_turb
)
MOOS.hyst.results.list.2 = list()
for (i in 1:length(MOOS.hyst.results.list)){
MOOS.hyst.results.list.2[[i]] = as.data.frame(t(as.numeric(c(
MOOS.hyst.results.list[[i]][["HI_mean_with_Interp"]],
MOOS.hyst.results.list[[i]][["HI_standard_deviation_with_Interp"]],
MOOS.hyst.results.list[[i]][["Normalized slope of response"]],
MOOS.hyst.results.list[[i]][["interpolated Max width of response"]],
MOOS.hyst.results.list[[i]][["Min response"]],
MOOS.hyst.results.list[[i]][["Max response"]],
MOOS.hyst.results.list[[i]][["Peak Q"]]
))))
names(MOOS.hyst.results.list.2[[i]]) = c("HI_mean_Interp", "HI_sd_with_Interp", "N.S.", "Max_width_Interp", "Min_response", "Max_response", "Peak_Q")
}
HIs.list = list()
HIs.tests = list()
for (i in 1:length(MOOS.hyst.results.list)){
HIs.list[[i]] = unlist(MOOS.hyst.results.list[[i]][["Hysteresis_Index"]],recursive=FALSE)
HIs.tests[[i]] = as.data.frame(t(round(as.numeric(c(shapiro.test(HIs.list[[i]])$statistic, shapiro.test(HIs.list[[i]])$p.value,
t.test(HIs.list[[i]], mu=0)$statistic, t.test(HIs.list[[i]], mu=0)$p.value,
t.test(HIs.list[[i]], mu=0)$conf.int[1],t.test(HIs.list[[i]], mu=0)$conf.int[2],
wilcox.test(HIs.list[[i]], mu=0)$statistic, wilcox.test(HIs.list[[i]], mu=0)$p.value)), 4)))
names(HIs.tests[[i]]) = c("ShapiroTest.W", "ShapiroTest.p", "t.test.stat", "t.test.p", "t.test.CIlow", "t.test.CIhigh",
"wilcox.test.stat", "wilcox.test.p")
}
MOOS.hyst.results.list = list(py$hysdict_MOOS_storm1_06_20_NO3,
py$hysdict_MOOS_storm2_06_28_NO3,
py$hysdict_MOOS_storm2_06_28_fDOM,
py$hysdict_MOOS_storm2_06_28_SPC,
py$hysdict_MOOS_storm2_06_28_turb,
py$hysdict_MOOS_storm3_07_18_NO3,
py$hysdict_MOOS_storm3_07_18_fDOM,
py$hysdict_MOOS_storm3_07_18_SPC,
py$hysdict_MOOS_storm3_07_18_turb,
py$hysdict_MOOS_storm4_07_20_NO3,
py$hysdict_MOOS_storm4_07_20_fDOM,
py$hysdict_MOOS_storm4_07_20_SPC,
py$hysdict_MOOS_storm4_07_20_turb,
py$hysdict_MOOS_storm5_07_26_NO3,
py$hysdict_MOOS_storm5_07_26_fDOM,
py$hysdict_MOOS_storm5_07_26_SPC,
py$hysdict_MOOS_storm5_07_26_turb
)
reticulate::repl_python()
