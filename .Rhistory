STRT_storm1d_06_22_SPC.p = hyst_plot(STRT_storm1d_06_22_Q, STRT_storm1d_06_22_SPC, "STRT", "SPC", "0622d")
STRT_storm1e_06_23_SPC.p = hyst_plot(STRT_storm1e_06_23_Q, STRT_storm1e_06_23_SPC, "STRT", "SPC", "0623e")
STRT_storm2_07_09_SPC.p = hyst_plot(STRT_storm2_07_09_Q, STRT_storm2_07_09_SPC, "STRT", "SPC", "0709")
STRT_storm3_07_20_SPC.p = hyst_plot(STRT_storm3_07_20_Q, STRT_storm3_07_20_SPC, "STRT", "SPC", "0720")
STRT_storm4a_08_01_SPC.p = hyst_plot(STRT_storm4a_08_01_Q, STRT_storm4a_08_01_SPC, "STRT", "SPC", "0801a")
STRT_storm4b_08_02_SPC.p = hyst_plot(STRT_storm4b_08_02_Q, STRT_storm4b_08_02_SPC, "STRT", "SPC", "0803b")
STRT_storm5_08_09_SPC.p = hyst_plot(STRT_storm5_08_09_Q, STRT_storm5_08_09_SPC, "STRT", "SPC", "0809")
STRT_storm6_08_12_SPC.p = hyst_plot(STRT_storm6_08_12_Q, STRT_storm6_08_12_SPC, "STRT", "SPC", "0812")
STRT_storm7a_08_20_SPC.p = hyst_plot(STRT_storm7a_08_20_Q, STRT_storm7a_08_20_SPC, "STRT", "SPC", "0820a")
STRT_storm7b_08_21_SPC.p = hyst_plot(STRT_storm7b_08_21_Q, STRT_storm7b_08_21_SPC, "STRT", "SPC", "0821b")
STRT_storm8_08_28_SPC.p = hyst_plot(STRT_storm8_08_28_Q, STRT_storm8_08_28_SPC, "STRT", "SPC", "0828")
STRT_storm9a_09_03_SPC.p = hyst_plot(STRT_storm9a_09_03_Q, STRT_storm9a_09_03_SPC, "STRT", "SPC", "0903a")
STRT_storm9b_09_06_SPC.p = hyst_plot(STRT_storm9b_09_06_Q, STRT_storm9b_09_06_SPC, "STRT", "SPC", "0906b")
STRT_storm9c_09_09_SPC.p = hyst_plot(STRT_storm9c_09_09_Q, STRT_storm9c_09_09_SPC, "STRT", "SPC", "0909c")
STRT_storm10_09_23_SPC.p = hyst_plot(STRT_storm10_09_23_Q, STRT_storm10_09_23_SPC, "STRT", "SPC", "0923")
STRT_storm1a_06_18_turb.p = hyst_plot(STRT_storm1a_06_18_Q, STRT_storm1a_06_18_turb, "STRT", "turb", "0618a")
STRT_storm1b_06_19_turb.p = hyst_plot(STRT_storm1b_06_19_Q, STRT_storm1b_06_19_turb, "STRT", "turb", "0619b")
STRT_storm1c_06_21_turb.p = hyst_plot(STRT_storm1c_06_21_Q, STRT_storm1c_06_21_turb, "STRT", "turb", "0621c")
STRT_storm1d_06_22_turb.p = hyst_plot(STRT_storm1d_06_22_Q, STRT_storm1d_06_22_turb, "STRT", "turb", "0622d")
STRT_storm1e_06_23_turb.p = hyst_plot(STRT_storm1e_06_23_Q, STRT_storm1e_06_23_turb, "STRT", "turb", "0623e")
STRT_storm2_07_09_turb.p = hyst_plot(STRT_storm2_07_09_Q, STRT_storm2_07_09_turb, "STRT", "turb", "0709")
STRT_storm3_07_20_turb.p = hyst_plot(STRT_storm3_07_20_Q, STRT_storm3_07_20_turb, "STRT", "turb", "0720")
STRT_storm4a_08_01_turb.p = hyst_plot(STRT_storm4a_08_01_Q, STRT_storm4a_08_01_turb, "STRT", "turb", "0801a")
STRT_storm4b_08_02_turb.p = hyst_plot(STRT_storm4b_08_02_Q, STRT_storm4b_08_02_turb, "STRT", "turb", "0803b")
STRT_storm5_08_09_turb.p = hyst_plot(STRT_storm5_08_09_Q, STRT_storm5_08_09_turb, "STRT", "turb", "0809")
STRT_storm6_08_12_turb.p = hyst_plot(STRT_storm6_08_12_Q, STRT_storm6_08_12_turb, "STRT", "turb", "0812")
STRT_storm7a_08_20_turb.p = hyst_plot(STRT_storm7a_08_20_Q, STRT_storm7a_08_20_turb, "STRT", "turb", "0820a")
STRT_storm7b_08_21_turb.p = hyst_plot(STRT_storm7b_08_21_Q, STRT_storm7b_08_21_turb, "STRT", "turb", "0821b")
STRT_storm8_08_28_turb.p = hyst_plot(STRT_storm8_08_28_Q, STRT_storm8_08_28_turb, "STRT", "turb", "0828")
STRT_storm9a_09_03_turb.p = hyst_plot(STRT_storm9a_09_03_Q, STRT_storm9a_09_03_turb, "STRT", "turb", "0903a")
STRT_storm9b_09_06_turb.p = hyst_plot(STRT_storm9b_09_06_Q, STRT_storm9b_09_06_turb, "STRT", "turb", "0906b")
STRT_storm9c_09_09_turb.p = hyst_plot(STRT_storm9c_09_09_Q, STRT_storm9c_09_09_turb, "STRT", "turb", "0909c")
STRT_storm10_09_23_turb.p = hyst_plot(STRT_storm10_09_23_Q, STRT_storm10_09_23_turb, "STRT", "turb", "0923")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
multplot(STRT_storm1a_06_18_SPC.p)
multiplot(STRT_storm1a_06_18_SPC.p)
multiplot(STRT_storm1b_06_19_SPC.p)
multiplot(STRT_storm1c_06_20_SPC.p) # works
multiplot(STRT_storm1c_06_21_SPC.p) # works
multiplot(STRT_storm1d_06_22_SPC.p) # works
multiplot(STRT_storm1e_06_23_SPC.p) # works
multiplot(STRT_storm2_07_09_SPC.p) # works
multiplot(STRT_storm3_07_20_SPC.p) # empty
multiplot(STRT_storm4a_08_01_SPC.p) # works
multiplot(STRT_storm4b_08_02_SPC.p) # works
multiplot(STRT_storm5_08_09_SPC.p) # works
multiplot(STRT_storm6_08_12_SPC.p) # works
multiplot(STRT_storm7a_08_20_SPC.p) # works
multiplot(STRT_storm7b_08_21_SPC.p) # works
multiplot(STRT_storm8_08_28_SPC.p) # works
multiplot(STRT_storm9a_09_03_SPC.p) # works
multiplot(STRT_storm9b_09_06_SPC.p) # works
multiplot(STRT_storm9c_09_09_SPC.p) # works
multiplot(STRT_storm10_09_23_SPC.p) # works
# turb #
# SPC #
multiplot(STRT_storm1a_06_18_turb.p) # works
multiplot(STRT_storm1b_06_19_turb.p) # works
multiplot(STRT_storm1c_06_21_turb.p) # works
multiplot(STRT_storm1d_06_22_turb.p) # works
multiplot(STRT_storm1e_06_23_turb.p) # works
multiplot(STRT_storm2_07_09_turb.p) # empty
multiplot(STRT_storm3_07_20_turb.p) # works
multiplot(STRT_storm4a_08_01_turb.p) # works
multiplot(STRT_storm4b_08_02_turb.p) # works
multiplot(STRT_storm5_08_09_turb.p) # works
multiplot(STRT_storm6_08_12_turb.p) # works
multiplot(STRT_storm7a_08_20_turb.p) # works
multiplot(STRT_storm7b_08_21_turb.p) # works
multiplot(STRT_storm8_08_28_turb.p) # works
multiplot(STRT_storm9a_09_03_turb.p) # works
multiplot(STRT_storm9b_09_06_turb.p) # works
multiplot(STRT_storm9c_09_09_turb.p) # works
multiplot(STRT_storm10_09_23_turb.p) # works
multiplot(STRT_storm1a_06_18_NO3.p, STRT_storm1a_06_18_fDOM.p, STRT_storm1a_06_18_SPC.p, STRT_storm1a_06_18_turb.p,
STRT_storm1b_06_19_SPC.p, STRT_storm1b_06_19_turb.p,
STRT_storm1c_06_21_NO3.p, STRT_storm1c_06_21_fDOM.p, STRT_storm1c_06_21_SPC.p, STRT_storm1c_06_21_turb.p,
STRT_storm1d_06_22_NO3.p, STRT_storm1d_06_22_fDOM.p, STRT_storm1d_06_22_SPC.p, STRT_storm1d_06_22_turb.p,
STRT_storm1e_06_23_NO3.p, STRT_storm1e_06_23_fDOM.p, STRT_storm1e_06_23_SPC.p, STRT_storm1e_06_23_turb.p,
STRT_storm2_07_09_SPC.p, STRT_storm2_07_09_turb.p,
STRT_storm3_07_20_NO3.p, STRT_storm3_07_20_fDOM.p, STRT_storm3_07_20_SPC.p, STRT_storm3_07_20_turb.p,
STRT_storm4a_08_01_NO3.p, STRT_storm4a_08_01_fDOM.p, STRT_storm4a_08_01_SPC.p, STRT_storm4a_08_01_turb.p,
STRT_storm4b_08_02_NO3.p, STRT_storm4b_08_02_fDOM.p, STRT_storm4b_08_02_SPC.p, STRT_storm4b_08_02_turb.p,
STRT_storm5_08_09_NO3.p, STRT_storm5_08_09_fDOM.p, STRT_storm5_08_09_SPC.p, STRT_storm5_08_09_turb.p,
STRT_storm6_08_12_NO3.p, STRT_storm6_08_12_fDOM.p, STRT_storm6_08_12_SPC.p, STRT_storm6_08_12_turb.p,
STRT_storm7a_08_20_NO3.p, STRT_storm7a_08_20_fDOM.p, STRT_storm7a_08_20_SPC.p, STRT_storm7a_08_20_turb.p,
STRT_storm7b_08_21_NO3.p, STRT_storm7b_08_21_fDOM.p, STRT_storm7b_08_21_SPC.p, STRT_storm7b_08_21_turb.p,
STRT_storm8_08_28_NO3.p, STRT_storm8_08_28_fDOM.p, STRT_storm8_08_28_SPC.p, STRT_storm8_08_28_turb.p,
STRT_storm9a_09_03_NO3.p, STRT_storm9a_09_03_fDOM.p, STRT_storm9a_09_03_SPC.p, STRT_storm9a_09_03_turb.p,
STRT_storm9b_09_06_NO3.p, STRT_storm9b_09_06_fDOM.p, STRT_storm9b_09_06_SPC.p, STRT_storm9b_09_06_turb.p,
STRT_storm9c_09_09_NO3.p, STRT_storm9c_09_09_fDOM.p, STRT_storm9c_09_09_SPC.p, STRT_storm9c_09_09_turb.p,
STRT_storm10_09_23_NO3.p, STRT_storm10_09_23_fDOM.p, STRT_storm10_09_23_SPC.p, STRT_storm10_09_23_turb.p,
cols = 7)
library(readr)
library(tidyverse)
library(lubridate)
library(RColorBrewer)
library(gridExtra)
library(readxl)
library(zoo)
POKEurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR_gv4HDKJZmO1VWjpe0zCqgakHNZ0xb4Rsp4cXwQ54V0sBy4db8m8vbGkGRxpR_znTke3uUqEY2p3t/pub?output=csv"
VAULurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS8tCurJtxqAnODwEtdoT1UJSWItJ6FlMYWpKv9jC0qLkhmqzNokmlWMzVqcSELHUxwe5uwRGmJE1nQ/pub?output=csv"
STRTurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS4gexeTh9v891AZKTn1C6yeSygUPvbUBUlGVoCYhzrdVOMmmWMzzLVHVbW0HGBUixPTVIxkdaw27pd/pub?output=csv"
MOOSurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTlbEMW1W0oejDajqSy1WV7NiASVITJIegeeL1crwt8QZL-7cz_kvXXCB2KJzb2Ot82kO24nyfcQ-cL/pub?output=csv"
FRCHurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSG5lccfUqyTosyA6Qwmcqt_G_q4yN9IA4Pej9J2LWjXDlzMJI5KFFg7iafYOwfZohCRIpoVXFYpvuJ/pub?output=csv"
poke_discharge <- read.csv(url(POKEurl), stringsAsFactors = FALSE)
vaul_discharge <- read.csv(url(VAULurl), stringsAsFactors = FALSE)
strt_discharge <- read.csv(url(STRTurl), stringsAsFactors = FALSE)
moos_discharge <- read.csv(url(MOOSurl), stringsAsFactors = FALSE)
frch_discharge <- read.csv(url(FRCHurl), stringsAsFactors = FALSE)
names(poke_discharge) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
names(vaul_discharge) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
names(strt_discharge) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
names(moos_discharge) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
names(frch_discharge) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
poke_discharge$Time[poke_discharge$Time == ""] <- NA
vaul_discharge$Time[vaul_discharge$Time == ""] <- NA
strt_discharge$Time[strt_discharge$Time == ""] <- NA
moos_discharge$Time[moos_discharge$Time == ""] <- NA
frch_discharge$Time[frch_discharge$Time == ""] <- NA
poke_discharge <- poke_discharge %>% fill(width_cm) %>%
fill(Time)
vaul_discharge <- vaul_discharge %>% fill(width_cm) %>%
fill(Time) %>% fill(Date_cat)
strt_discharge <- strt_discharge %>% fill(width_cm) %>%
fill(Time) %>% fill(Date_cat)
moos_discharge <- moos_discharge %>% fill(width_cm) %>%
fill(Time) %>% fill(Date_cat)
frch_discharge <- frch_discharge %>% fill(width_cm) %>%
fill(Time) %>% fill(Date_cat)
poke_discharge$Date <- as.Date(as.character(poke_discharge$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
vaul_discharge$Date <- as.Date(as.character(vaul_discharge$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
strt_discharge$Date <- as.Date(as.character(strt_discharge$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
moos_discharge$Date <- as.Date(as.character(moos_discharge$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
frch_discharge$Date <- as.Date(as.character(frch_discharge$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
poke_discharge$datetime <- as.POSIXct(paste(poke_discharge$Date, poke_discharge$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
vaul_discharge$datetime <- as.POSIXct(paste(vaul_discharge$Date, vaul_discharge$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
strt_discharge$datetime <- as.POSIXct(paste(strt_discharge$Date, strt_discharge$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
moos_discharge$datetime <- as.POSIXct(paste(moos_discharge$Date, moos_discharge$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
frch_discharge$datetime <- as.POSIXct(paste(frch_discharge$Date, frch_discharge$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
poke_discharge <- poke_discharge %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
vaul_discharge <- vaul_discharge %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
strt_discharge <- strt_discharge %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
moos_discharge <- moos_discharge %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
frch_discharge <- frch_discharge %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
depth.pl.poke <- poke_discharge %>%
ggplot(aes(x = Distance_cm, y = reorder(depth_cm, desc(depth_cm)))) +
geom_point() +
facet_wrap(~Date)
depth.pl.poke
depth.pl.vaul <- vaul_discharge %>%
ggplot(aes(x = Distance_cm, y = reorder(depth_cm, desc(depth_cm)))) +
geom_point() +
facet_wrap(~Date)
depth.pl.vaul
strt_discharge$depth_cm <- as.numeric(strt_discharge$depth_cm)
str(strt_discharge)
depth.pl.strt <- strt_discharge %>%
ggplot(aes(x = Distance_cm, y = reorder(depth_cm, desc(depth_cm)))) +
geom_point() +
geom_line() +
facet_wrap(~Date)
depth.pl.strt
depth.pl.moos <- moos_discharge %>%
ggplot(aes(x = Distance_cm, y = reorder(depth_cm, desc(depth_cm)))) +
geom_point() +
facet_wrap(~Date)
depth.pl.moos
depth.pl.frch <- frch_discharge %>%
ggplot(aes(x = Distance_cm, y = reorder(depth_cm, desc(depth_cm)))) +
geom_point() +
facet_wrap(~Date)
depth.pl.frch
poke_discharge <- poke_discharge %>% filter(depth_cm >= 10)
vaul_discharge <- vaul_discharge %>% filter(depth_cm >= 10)
strt_discharge <- strt_discharge %>% filter(depth_cm >= 10)
moos_discharge <- moos_discharge %>% filter(depth_cm >= 10)
frch_discharge <- frch_discharge %>% filter(depth_cm >= 10)
mean.poke.depth <- zoo(c(poke_discharge$depth_cm, NA)) #mean of the depth
MEAN.DEPTH <- rollapply(as.numeric(mean.poke.depth), 2, mean, na.rm = TRUE) #rolling mean window
diff.poke <- zoo(c(poke_discharge$Distance_cm, NA))
DIFF <- rollapply(as.numeric(diff.poke), 2, diff, na.rm = TRUE)
mean.poke.vel <- zoo(c(poke_discharge$meanVel_m_s, NA))
MEAN.VEL <- rollapply(as.numeric(mean.poke.vel), 2, mean, na.rm = TRUE)
raw_to_transect_poke <- function(raw) {
transect.q <- ((DIFF *
MEAN.DEPTH) / 10000) *
(MEAN.VEL * 1000)
return(transect.q)
}
transect.poke <- mutate(poke_discharge, TransectQ = raw_to_transect_poke())
transect.poke <- transect.poke %>% filter(TransectQ >= 0)
### Grouping by date ###
MeasuredQ_POKE <- aggregate(transect.poke["TransectQ"], by = transect.poke["Date"], sum, na.rm = TRUE)
MeasuredQ_POKE
mean.vaul.depth <- zoo(c(vaul_discharge$depth_cm, NA))
MEAN.DEPTH.VAUL <- rollapply(as.numeric(mean.vaul.depth), 2, mean, na.rm = TRUE)
diff.vaul <- zoo(c(vaul_discharge$Distance_cm, NA))
DIFF.VAUL <- rollapply(as.numeric(diff.vaul), 2, diff, na.rm = TRUE)
mean.vaul.vel <- zoo(c(vaul_discharge$meanVel_m_s, NA))
MEAN.VEL.VAUL <- rollapply(as.numeric(mean.vaul.vel), 2, mean, na.rm = TRUE)
raw_to_transect_vaul <- function(raw) {
transect.q <- ((DIFF.VAUL *
MEAN.DEPTH.VAUL) / 10000) *
(MEAN.VEL.VAUL * 1000)
return(transect.q)
}
transect.vaul <- mutate(vaul_discharge, TransectQ = raw_to_transect_vaul())
transect.vaul <- transect.vaul %>% filter(TransectQ >=0) # Creates a column for the rolling Transect Q
MeasuredQ_VAUL <- aggregate(transect.vaul["TransectQ"], by = transect.vaul["Date"], sum, na.rm = TRUE)
MeasuredQ_VAUL
vel.pl.vaul <- vaul_discharge %>%
ggplot(aes(x = Distance_cm, y = meanVel_m_s)) +
geom_point() +
geom_line() +
facet_wrap(~Date)
vel.pl.vaul
VAULurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS8tCurJtxqAnODwEtdoT1UJSWItJ6FlMYWpKv9jC0qLkhmqzNokmlWMzVqcSELHUxwe5uwRGmJE1nQ/pub?output=csv"
vaul_discharge <- read.csv(url(VAULurl), stringsAsFactors = FALSE)
names(vaul_discharge) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
vaul_discharge$Time[vaul_discharge$Time == ""] <- NA
vaul_discharge <- vaul_discharge %>% fill(width_cm) %>%
fill(Time) %>% fill(Date_cat)
vaul_discharge$Date <- as.Date(as.character(vaul_discharge$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
vaul_discharge$datetime <- as.POSIXct(paste(vaul_discharge$Date, vaul_discharge$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
vaul_discharge <- vaul_discharge %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
depth.pl.vaul <- vaul_discharge %>%
ggplot(aes(x = Distance_cm, y = reorder(depth_cm, desc(depth_cm)))) +
geom_point() +
facet_wrap(~Date)
depth.pl.vaul
vel.pl.vaul <- vaul_discharge %>%
ggplot(aes(x = Distance_cm, y = meanVel_m_s)) +
geom_point() +
geom_line() +
facet_wrap(~Date)
vel.pl.vaul
vaul_discharge <- vaul_discharge %>% filter(depth_cm >= 10)
mean.vaul.depth <- zoo(c(vaul_discharge$depth_cm, NA))
MEAN.DEPTH.VAUL <- rollapply(as.numeric(mean.vaul.depth), 2, mean, na.rm = TRUE)
diff.vaul <- zoo(c(vaul_discharge$Distance_cm, NA))
DIFF.VAUL <- rollapply(as.numeric(diff.vaul), 2, diff, na.rm = TRUE)
mean.vaul.vel <- zoo(c(vaul_discharge$meanVel_m_s, NA))
MEAN.VEL.VAUL <- rollapply(as.numeric(mean.vaul.vel), 2, mean, na.rm = TRUE)
raw_to_transect_vaul <- function(raw) {
transect.q <- ((DIFF.VAUL *
MEAN.DEPTH.VAUL) / 10000) *
(MEAN.VEL.VAUL * 1000)
return(transect.q)
}
transect.vaul <- mutate(vaul_discharge, TransectQ = raw_to_transect_vaul())
transect.vaul <- transect.vaul %>% filter(TransectQ >=0) # Creates a column for the rolling Transect Q
MeasuredQ_VAUL <- aggregate(transect.vaul["TransectQ"], by = transect.vaul["Date"], sum, na.rm = TRUE)
MeasuredQ_VAUL
MeasuredQ_VAUL <- aggregate(transect.vaul["TransectQ"], by = transect.vaul["Date"], sum, na.rm = TRUE)
head(vaul_discharge)
transect.vaul <- mutate(vaul_discharge, TransectQ = raw_to_transect_vaul())
transect.vaul <- transect.vaul %>% filter(TransectQ >=0) # Creates a column for the rolling Transect Q
head(transect.vaul)
View(transect.vaul)
View(transect.poke)
mean.strt.depth <- zoo(c(strt_discharge$depth_cm, NA))
MEAN.DEPTH.STRT <- rollapply(as.numeric(mean.strt.depth), 2, mean, na.rm = TRUE)
diff.strt <- zoo(c(strt_discharge$Distance_cm, NA))
DIFF.STRT <- rollapply(as.numeric(diff.strt), 2, diff, na.rm = TRUE)
mean.strt.vel <- zoo(c(strt_discharge$meanVel_m_s, NA))
MEAN.VEL.STRT <- rollapply(as.numeric(mean.strt.vel), 2, mean, na.rm = TRUE)
raw_to_transect_strt <- function(raw) {
transect.q <- ((DIFF.STRT *
MEAN.DEPTH.STRT) / 10000) *
(MEAN.VEL.STRT * 1000)
return(transect.q)
}
transect.strt <- mutate(strt_discharge, TransectQ = raw_to_transect_strt())
transect.strt <- transect.strt %>% filter(TransectQ >= 0)
MeasuredQ_STRT <- aggregate(transect.strt["TransectQ"], by = transect.strt["Date"], sum, na.rm = TRUE)
MeasuredQ_STRT
mean.moos.depth <- zoo(c(moos_discharge$depth_cm, NA))
MEAN.DEPTH.MOOS <- rollapply(as.numeric(mean.moos.depth), 2, mean, na.rm = TRUE)
diff.moos <- zoo(c(moos_discharge$Distance_cm, NA))
DIFF.MOOS <- rollapply(as.numeric(diff.moos), 2, diff, na.rm = TRUE)
mean.moos.vel <- zoo(c(moos_discharge$Velocity_mn_m_s, NA))
MEAN.VEL.MOOS <- rollapply(as.numeric(mean.moos.vel), 2, mean, na.rm = TRUE)
raw_to_transect_moos <- function(raw) {
transect.q <- ((DIFF.MOOS *
MEAN.DEPTH.MOOS) / 10000) *
(MEAN.VEL.MOOS * 1000)
return(transect.q)
}
transect.moos <- mutate(moos_discharge, TransectQ = raw_to_transect_moos())
transect.moos <- transect.moos %>% filter(TransectQ >= 0)
MeasuredQ_MOOS <- aggregate(transect.moos["TransectQ"], by = transect.moos["Date"], sum, na.rm = TRUE)
MeasuredQ_MOOS
# FRCH #
mean.frch.depth <- zoo(c(frch_discharge$depth_cm, NA))
MEAN.DEPTH.FRCH <- rollapply(as.numeric(mean.frch.depth), 2, mean, na.rm = TRUE)
diff.frch <- zoo(c(frch_discharge$Distance_cm, NA))
DIFF.FRCH <- rollapply(as.numeric(diff.frch), 2, diff, na.rm = TRUE)
mean.frch.vel <- zoo(c(frch_discharge$Velocity_mn_m_s, NA))
MEAN.VEL.FRCH <- rollapply(as.numeric(mean.frch.vel), 2, mean, na.rm = TRUE)
raw_to_transect_frch <- function(raw) {
transect.q <- ((DIFF.FRCH *
MEAN.DEPTH.FRCH) / 10000) *
(MEAN.VEL.FRCH * 1000)
return(transect.q)
}
transect.frch <- mutate(frch_discharge, TransectQ = raw_to_transect_frch())
transect.frch <- transect.frch %>% filter(TransectQ >= 0)
MeasuredQ_FRCH <- aggregate(transect.frch["TransectQ"], by = transect.frch["Date"], sum, na.rm = TRUE)
MeasuredQ_FRCH
FRCH <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQ02bQVjz4Q5TLDeAVcB3ZHBqV-zoU2ZfbKyIM6QkaHgO5QlzHhr5l-NW-lVSAFqJFsCw0s1idEUdT1/pub?gid=471713318&single=true&output=csv"
MOOS <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTsY9QCgbgEl5T9hCMzqsl7tU7e5WtEb5_EuhxnQ60t4XXcfe_6rSiyGJvp-11648Sg01vWb4Kek524/pub?output=csv"
POKE <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR60uV7db7sAKL4CHck71QcG_TsijVHGJO53o4uQqYS9A68Rk3gxe_JelsLH3Xz18Y7uxoW6y2JviHJ/pub?output=csv"
STRT <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS6yfKCv1qjEHd7FL5yrl808sHabsZBhrnbkA0kMHNxYqD0UQnFsscjcGFHBA_dLslT1SGGRziausIU/pub?output=csv"
VAUL <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vQU9r7B2_rDK-RLFhzUZ0qG8VxKvUBuPj90h3Mz5rNPRTwF_amY9XTEDCFpDi0D-L2mizhpvRJDObCP/pub?output=csv"
FRCH_Dilution <- read.csv(url(FRCH))
MOOS_Dilution <- read.csv(url(MOOS))
POKE_Dilution <- read.csv(url(POKE))
STRT_Dilution <- read.csv(url(STRT))
VAUL_Dilution <- read.csv(url(VAUL))
FRCH_Dilution$Date <- as.Date(as.character(FRCH_Dilution$Date), format = "%y%m%d", tz = "America/Anchorage")
FRCH_Dilution$DateTime <- as.POSIXct(paste(FRCH_Dilution$Date, FRCH_Dilution$Timestamp), format = "%Y-%m-%d %H:%M:%S", tz = "America/Anchorage")
MOOS_Dilution$Date <- as.Date(as.character(MOOS_Dilution$Date), format = "%y%m%d", tz = "America/Anchorage")
MOOS_Dilution$DateTime <- as.POSIXct(paste(MOOS_Dilution$Date, MOOS_Dilution$Timestamp), format = "%Y-%m-%d %H:%M:%S", tz = "America/Anchorage")
POKE_Dilution$Date <- as.Date(as.character(POKE_Dilution$Date), format = "%y%m%d", tz = "America/Anchorage")
POKE_Dilution$DateTime <- as.POSIXct(paste(POKE_Dilution$Date, POKE_Dilution$Timestamp), format = "%Y-%m-%d %H:%M:%S", tz = "America/Anchorage")
STRT_Dilution$Date <- as.Date(as.character(STRT_Dilution$Date), format = "%y%m%d", tz = "America/Anchorage")
STRT_Dilution$DateTime <- as.POSIXct(paste(STRT_Dilution$Date, STRT_Dilution$Timestamp), format = "%Y-%m-%d %H:%M:%S", tz = "America/Anchorage")
VAUL_Dilution$Date <- as.Date(as.character(VAUL_Dilution$Date), format = "%y%m%d", tz = "America/Anchorage")
VAUL_Dilution$DateTime <- as.POSIXct(paste(VAUL_Dilution$Date, VAUL_Dilution$Timestamp), format = "%Y-%m-%d %H:%M:%S", tz = "America/Anchorage")
names(FRCH_Dilution) <- c("Date", "Timestamp", "SPcond", "Difference", "Temp", "Comment", "Site", "Folder", "ID", "Cond", "Volume", "TimeInterval", "DateTime")
FRCH_Dilution <- FRCH_Dilution %>% fill(Cond) %>% fill(Volume)
names(MOOS_Dilution) <- c("Date", "Timestamp", "SPcond", "Difference", "Temp", "Comment", "Site", "Folder", "ID", "Cond", "Volume", "TimeInterval", "DateTime")
MOOS_Dilution <- MOOS_Dilution %>% fill(Cond) %>% fill(Volume)
names(POKE_Dilution) <- c("Date", "Timestamp", "SPcond", "Difference", "Temp", "Comment", "Site", "Folder", "ID", "Cond", "Volume", "TimeInterval", "DateTime")
POKE_Dilution <- POKE_Dilution %>% fill(Cond) %>% fill(Volume)
names(STRT_Dilution) <- c("Date", "Timestamp", "SPcond", "Difference", "Temp", "Comment", "Site", "Folder", "ID", "Cond", "Volume", "TimeInterval", "DateTime")
STRT_Dilution <- STRT_Dilution %>% fill(Cond) %>% fill(Volume)
names(VAUL_Dilution) <- c("Date", "Timestamp", "SPcond", "Difference", "Temp", "Comment", "Site", "Folder", "ID", "Cond", "Volume", "TimeInterval", "DateTime")
VAUL_Dilution <- VAUL_Dilution %>% fill(Cond) %>% fill(Volume)
### Formula ###
# FRCH Discharge #
for (i in FRCH_Dilution) {
frch_date <- ddply(FRCH_Dilution, .(Date), summarize, daily_mean_SP = mean(SPcond))
frch_volume <- aggregate(FRCH_Dilution["Volume"], by = FRCH_Dilution["Date"], mean)
frch_cond <- aggregate(FRCH_Dilution["Cond"], by = FRCH_Dilution["Date"], mean)
frch_num <- frch_volume$Volume/1000 * frch_cond$Cond
frch_final <- mutate(frch_date, num = frch_num)
frch_sum_difference <- ddply(FRCH_Dilution,. (Date), summarize, daily_sum_SP = sum(Difference))
frch_Q <- frch_final$num / frch_sum_difference$daily_sum_SP
frch_MeasuredQ <- mutate(frch_date, MeasuredQ = frch_Q)
}
library(readxl)
library(readr)
library(ggplot2)
library(dplyr)
library(lubridate)
library(RColorBrewer)
library(gridExtra)
library(tidyr)
library(plyr)
for (i in FRCH_Dilution) {
frch_date <- ddply(FRCH_Dilution, .(Date), summarize, daily_mean_SP = mean(SPcond))
frch_volume <- aggregate(FRCH_Dilution["Volume"], by = FRCH_Dilution["Date"], mean)
frch_cond <- aggregate(FRCH_Dilution["Cond"], by = FRCH_Dilution["Date"], mean)
frch_num <- frch_volume$Volume/1000 * frch_cond$Cond
frch_final <- mutate(frch_date, num = frch_num)
frch_sum_difference <- ddply(FRCH_Dilution,. (Date), summarize, daily_sum_SP = sum(Difference))
frch_Q <- frch_final$num / frch_sum_difference$daily_sum_SP
frch_MeasuredQ <- mutate(frch_date, MeasuredQ = frch_Q)
}
frch_MeasuredQ
for (i in MOOS_Dilution) {
moos_date <- ddply(MOOS_Dilution, .(Date), summarize, daily_mean_SP = mean(SPcond))
moos_volume <- aggregate(MOOS_Dilution["Volume"], by = MOOS_Dilution["Date"], mean)
moos_cond <- aggregate(MOOS_Dilution["Cond"], by = MOOS_Dilution["Date"], mean)
moos_num <- moos_volume$Volume/1000 * moos_cond$Cond
moos_final <- mutate(moos_date, num = moos_num)
moos_sum_difference <- ddply(MOOS_Dilution,. (Date), summarize, daily_sum_SP = sum(Difference))
moos_Q <- moos_final$num / moos_sum_difference$daily_sum_SP
moos_MeasuredQ <- mutate(moos_date, MeasuredQ = moos_Q)
}
moos_MeasuredQ
for (i in POKE_Dilution) {
poke_date <- ddply(POKE_Dilution, .(Date), summarize, daily_mean_SP = mean(SPcond))
poke_volume <- aggregate(POKE_Dilution["Volume"], by = POKE_Dilution["Date"], mean)
poke_cond <- aggregate(POKE_Dilution["Cond"], by = POKE_Dilution["Date"], mean)
poke_num <- poke_volume$Volume/1000 * poke_cond$Cond
poke_final <- mutate(poke_date, num = poke_num)
poke_sum_difference <- ddply(POKE_Dilution,. (Date), summarize, daily_sum_SP = sum(Difference))
poke_Q <- poke_final$num / poke_sum_difference$daily_sum_SP
poke_MeasuredQ <- mutate(poke_date, MeasuredQ = poke_Q)
}
poke_MeasuredQ
for (i in STRT_Dilution) {
strt_date <- ddply(STRT_Dilution, .(Date), summarize, daily_mean_SP = mean(SPcond))
strt_volume <- aggregate(STRT_Dilution["Volume"], by = STRT_Dilution["Date"], mean)
strt_cond <- aggregate(STRT_Dilution["Cond"], by = STRT_Dilution["Date"], mean)
strt_num <- strt_volume$Volume/1000 * strt_cond$Cond
strt_final <- mutate(strt_date, num = strt_num)
strt_sum_difference <- ddply(STRT_Dilution,. (Date), summarize, daily_sum_SP = sum(Difference))
strt_Q <- strt_final$num / strt_sum_difference$daily_sum_SP
strt_MeasuredQ <- mutate(strt_date, MeasuredQ = strt_Q)
}
strt_MeasuredQ
POKEurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vR_gv4HDKJZmO1VWjpe0zCqgakHNZ0xb4Rsp4cXwQ54V0sBy4db8m8vbGkGRxpR_znTke3uUqEY2p3t/pub?output=csv"
VAULurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS8tCurJtxqAnODwEtdoT1UJSWItJ6FlMYWpKv9jC0qLkhmqzNokmlWMzVqcSELHUxwe5uwRGmJE1nQ/pub?output=csv"
STRTurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vS4gexeTh9v891AZKTn1C6yeSygUPvbUBUlGVoCYhzrdVOMmmWMzzLVHVbW0HGBUixPTVIxkdaw27pd/pub?output=csv"
MOOSurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vTlbEMW1W0oejDajqSy1WV7NiASVITJIegeeL1crwt8QZL-7cz_kvXXCB2KJzb2Ot82kO24nyfcQ-cL/pub?output=csv"
FRCHurl <- "https://docs.google.com/spreadsheets/d/e/2PACX-1vSG5lccfUqyTosyA6Qwmcqt_G_q4yN9IA4Pej9J2LWjXDlzMJI5KFFg7iafYOwfZohCRIpoVXFYpvuJ/pub?output=csv"
#read in poke discharge sheet
poke_discharge <- read.csv(url(POKEurl), stringsAsFactors = FALSE)
vaul_discharge <- read.csv(url(VAULurl), stringsAsFactors = FALSE)
strt_discharge <- read.csv(url(STRTurl), stringsAsFactors = FALSE)
moos_discharge <- read.csv(url(MOOSurl), stringsAsFactors = FALSE)
frch_discharge <- read.csv(url(FRCHurl), stringsAsFactors = FALSE)
# Rename columns
names(poke_discharge) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
names(vaul_discharge) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
names(strt_discharge) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
names(moos_discharge) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
names(frch_discharge) <- c("Date_cat", "width_cm", "Time", "Distance_cm", "depth_cm", "Vel_m_s", "Vel_halfdepth_m_s", "Vel_twicedepth_m_s", "Velocity_mn_m_s")
# Input NA for missing time
poke_discharge$Time[poke_discharge$Time == ""] <- NA
vaul_discharge$Time[vaul_discharge$Time == ""] <- NA
strt_discharge$Time[strt_discharge$Time == ""] <- NA
moos_discharge$Time[moos_discharge$Time == ""] <- NA
frch_discharge$Time[frch_discharge$Time == ""] <- NA
# Using fill function from tidyverse
poke_discharge <- poke_discharge %>% fill(width_cm) %>%
fill(Time)
vaul_discharge <- vaul_discharge %>% fill(width_cm) %>%
fill(Time) %>% fill(Date_cat)
strt_discharge <- strt_discharge %>% fill(width_cm) %>%
fill(Time) %>% fill(Date_cat)
moos_discharge <- moos_discharge %>% fill(width_cm) %>%
fill(Time) %>% fill(Date_cat)
frch_discharge <- frch_discharge %>% fill(width_cm) %>%
fill(Time) %>% fill(Date_cat)
## Create datetime column
# Convert integer date to Date
poke_discharge$Date <- as.Date(as.character(poke_discharge$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
vaul_discharge$Date <- as.Date(as.character(vaul_discharge$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
strt_discharge$Date <- as.Date(as.character(strt_discharge$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
moos_discharge$Date <- as.Date(as.character(moos_discharge$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
frch_discharge$Date <- as.Date(as.character(frch_discharge$Date_cat), format = "%y%m%d", tz = "America/Anchorage")
# Concatenate date & time
poke_discharge$datetime <- as.POSIXct(paste(poke_discharge$Date, poke_discharge$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
vaul_discharge$datetime <- as.POSIXct(paste(vaul_discharge$Date, vaul_discharge$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
strt_discharge$datetime <- as.POSIXct(paste(strt_discharge$Date, strt_discharge$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
moos_discharge$datetime <- as.POSIXct(paste(moos_discharge$Date, moos_discharge$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
frch_discharge$datetime <- as.POSIXct(paste(frch_discharge$Date, frch_discharge$Time), format = "%Y-%m-%d %H:%M", tz = "America/Anchorage")
## Calculate mean velocity = meanVel_m_s
poke_discharge <- poke_discharge %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
vaul_discharge <- vaul_discharge %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
strt_discharge <- strt_discharge %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
moos_discharge <- moos_discharge %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
frch_discharge <- frch_discharge %>% mutate(meanVel_m_s = ifelse(is.na(Vel_m_s), mean(c(.$Vel_halfdepth_m_s, .$Vel_twicedepth_m_s)), .$Vel_m_s))
mean.strt.depth <- zoo(c(strt_discharge$depth_cm, NA))
MEAN.DEPTH.STRT <- rollapply(as.numeric(mean.strt.depth), 2, mean, na.rm = TRUE)
diff.strt <- zoo(c(strt_discharge$Distance_cm, NA))
DIFF.STRT <- rollapply(as.numeric(diff.strt), 2, diff, na.rm = TRUE)
mean.strt.vel <- zoo(c(strt_discharge$meanVel_m_s, NA))
MEAN.VEL.STRT <- rollapply(as.numeric(mean.strt.vel), 2, mean, na.rm = TRUE)
raw_to_transect_strt <- function(raw) {
transect.q <- ((DIFF.STRT *
MEAN.DEPTH.STRT) / 10000) *
(MEAN.VEL.STRT * 1000)
return(transect.q)
}
transect.strt <- mutate(strt_discharge, TransectQ = raw_to_transect_strt())
transect.strt <- transect.strt %>% filter(TransectQ >= 0)
MeasuredQ_STRT <- aggregate(transect.strt["TransectQ"], by = transect.strt["Date"], sum, na.rm = TRUE)
MeasuredQ_STRT
for (i in VAUL_Dilution) {
vaul_date <- ddply(VAUL_Dilution, .(Date), summarize, daily_mean_SP = mean(SPcond))
vaul_volume <- aggregate(VAUL_Dilution["Volume"], by = VAUL_Dilution["Date"], mean)
vaul_cond <- aggregate(VAUL_Dilution["Cond"], by = VAUL_Dilution["Date"], mean)
vaul_num <- vaul_volume$Volume/1000 * vaul_cond$Cond
vaul_final <- mutate(vaul_date, num = vaul_num)
vaul_sum_difference <- ddply(VAUL_Dilution,. (Date), summarize, daily_sum_SP = sum(Difference))
vaul_Q <- vaul_final$num / vaul_sum_difference$daily_sum_SP
vaul_MeasuredQ <- mutate(vaul_date, MeasuredQ = vaul_Q)
}
vaul_MeasuredQ
