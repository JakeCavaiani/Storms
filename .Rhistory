names(POKE_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
POKE_turb_storm$site.ID <- "POKE"
POKE_turb_storm[cols] <- log(POKE_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
POKE_turb_storm <- POKE_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
POKE_turb_storm_ascending <- filter(POKE_turb_storm, limb == "ascending")
POKE_turb_storm_ascending <- POKE_turb_storm_ascending[is.finite(POKE_turb_storm_ascending$Q.norm) & is.finite(POKE_turb_storm_ascending$turb.norm), ]
beta.all.poke.moos.with.all <- POKE_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# STRT #
STRT_turb_storm$storm.ID = c(rep("storm1", 638),
rep("storm2", 274),
rep("storm3a", 1035),
rep("storm3b", 286),
rep("storm3c", 174),
rep("storm4", 466),
rep("storm5", 98),
rep("storm6", 246),
rep("storm7", 218),
rep("storm7b", 266),
rep("storm7c", 258))
names(STRT_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
STRT_turb_storm$site.ID <- "STRT"
STRT_turb_storm[cols] <- log(STRT_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
STRT_turb_storm <- STRT_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
STRT_turb_storm_ascending <- filter(STRT_turb_storm, limb == "ascending")
STRT_turb_storm_ascending <- STRT_turb_storm_ascending[is.finite(STRT_turb_storm_ascending$Q.norm) & is.finite(STRT_turb_storm_ascending$turb.norm), ]
beta.all.turb.strt <- STRT_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# VAUL #
VAUL_turb_storm$storm.ID = c(rep("storm1", 191),
rep("storm2", 207),
rep("storm3", 191),
rep("storm4a", 83),
rep("storm4b", 219),
rep("storm4c", 707),
rep("storm5", 275),
rep("storm6", 263),
rep("storm7", 107),
rep("storm8a", 167),
rep("storm8b", 223),
rep("storm8c", 479))
names(VAUL_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
VAUL_turb_storm$site.ID <- "VAUL"
VAUL_turb_storm[cols] <- log(VAUL_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
VAUL_turb_storm <- VAUL_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
VAUL_turb_storm_ascending <- filter(VAUL_turb_storm, limb == "ascending")
VAUL_turb_storm_ascending <- VAUL_turb_storm_ascending[is.finite(VAUL_turb_storm_ascending$Q.norm) & is.finite(VAUL_turb_storm_ascending$turb.norm), ]
beta.all.turb.vaul <- VAUL_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# CARI #
CARI_turb_storm <- CARI_turb_storm[!duplicated(CARI_turb_storm$valuedatetime), ] # duplicated values when imported
CARI_turb_storm$storm.ID = c(rep("storm1", 5579),
rep("storm2", 2159),
rep("storm3", 1086),
rep("storm4",2219),
rep("storm5", 2038),
rep("storm6a", 1259),
rep("storm6b", 3540),
rep("storm6c", 6438),
rep("storm6d", 2039),
rep("storm7a", 779),
rep("storm7b", 3299),
rep("storm8", 4058))
names(CARI_turb_storm) <- c("DateTime", "Q", "Q.norm", "turb", "turb.norm", "storm.ID")
CARI_turb_storm$site.ID <- "CARI"
CARI_turb_storm[cols] <- log(CARI_turb_storm[cols]) # making concentrations and Q log transformed
slope <- function(x, y){
mean_x <- mean(x)
mean_y <- mean(y)
nom <- sum((x - mean_x)*(y-mean_y))
denom <- sum((x - mean_x)^2)
m <- nom / denom
return(m)
}
CARI_turb_storm <- CARI_turb_storm %>% group_by(storm.ID) %>%
mutate(limb = ifelse(DateTime < DateTime[which.max(Q.norm)], "ascending", "descending"))
CARI_turb_storm_ascending <- filter(CARI_turb_storm, limb == "ascending")
CARI_turb_storm_ascending <- CARI_turb_storm_ascending[is.finite(CARI_turb_storm_ascending$Q.norm) & is.finite(CARI_turb_storm_ascending$turb.norm), ]
beta.all.turb.cari <- CARI_turb_storm_ascending %>% group_by(storm.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
# ALL #
STRT_turb_storm_ascending$DateTime <- as.POSIXct(STRT_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
VAUL_turb_storm_ascending$DateTime <- as.POSIXct(VAUL_turb_storm_ascending$DateTime,
"%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
All_turb_storm <- rbind(FRCH_turb_storm_ascending, MOOS_turb_storm_ascending,
STRT_turb_storm_ascending, VAUL_turb_storm_ascending,
CARI_turb_storm_ascending, POKE_turb_storm_ascending)
beta.all.turb <- All_turb_storm %>% group_by(storm.ID, site.ID) %>%
summarize(beta = slope(Q.norm, turb.norm)) # this works just like the beta one that is for an individual site
beta.all.turb$response_var <- "turb"
beta.all.2019 <- rbind(beta.all.no3, beta.all.fdom,
beta.all.SPC, beta.all.turb)
View(beta.all.2019)
write.csv(beta.all.2019, "~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/beta/beta.2019.csv")
library(readr)
beta_2019 <- read_csv("Output_from_analysis/06_HI_fire_permafrost_script/beta/beta.2019.csv")
View(beta_2019)
HI_FI_2018 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/HI_FI.diff_results.2018.csv")
HI_FI_2018$year <- "2018"
HI_FI_2019 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/HI_FI.diff_results_2019.csv")
HI_FI_2019$year <- "2019"
HI_FI_2020 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/HI_FI.diff_results_2020.csv")
HI_FI_2020$year <- "2020"
HI_FI_2021 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/HI_FI.diff_results_2021.csv")
HI_FI_2021$year <- "2021"
beta_2018 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/beta/beta.2018.csv")
beta_2018$year <- "2018"
beta_2019 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/beta/beta.2019.csv")
beta_2019$year <- "2019"
beta_2020 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/beta/beta.2020.csv")
beta_2020$year <- "2020"
beta_2021 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/beta/beta.2021.csv")
beta_2021$year <- "2021"
antecedent_2018 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/HI_antecedent_conditions/All_years/HI.2018.csv")
antecedent_2018 <- antecedent_2018[,-c(1:2)]
antecedent_2019 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/HI_antecedent_conditions/All_years/HI.2019.csv")
antecedent_2019 <- antecedent_2019[,-c(1:2)]
antecedent_2020 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/HI_antecedent_conditions/All_years/HI.2020.csv")
antecedent_2020 <- antecedent_2020[,-c(1)]
antecedent_2021 <- read.csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/HI_antecedent_conditions/All_years/HI.2021.csv")
antecedent_2021 <- antecedent_2021[,-c(1)]
HI_FI <- rbind(HI_FI_2018, HI_FI_2019, HI_FI_2020, HI_FI_2021)
beta_all <- rbind(beta_2018, beta_2019, beta_2020, beta_2021)
antecedent_all <- rbind(antecedent_2018, antecedent_2019, antecedent_2020, antecedent_2021)
names(antecedent_all)[names(antecedent_all) == "storm.num"] <- "storm.ID"
names(antecedent_all)[names(antecedent_all) == "response"] <- "response_var"
antecedent_all$year <- as.character(antecedent_all$year)
HI_FI = left_join(HI_FI, beta_all, by=c("site.ID", "storm.ID", "response_var", "year"))
HI_FI <- left_join(HI_FI, antecedent_all, by = c("site.ID", "storm.ID", "response_var", "year"))
write.csv(HI_FI, "~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/antecedent_HI_FI_1.0.csv")
HI_FI_NO3 = subset(HI_FI, response_var == "NO3")
HI_FI_NO3$site.ID <- factor(HI_FI_NO3$site.ID, levels = c('FRCH','MOOS','POKE','STRT','VAUL', 'CARI'))
HI_FI_NO3.p =
ggplot(HI_FI_NO3, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+
geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+theme_bw() +
ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
ggtitle("a) NO3-")+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20))
HI_FI_NO3.p
# fDOM #
HI_FI_fDOM = subset(HI_FI, response_var == "fDOM")
HI_FI_fDOM$site.ID <- factor(HI_FI_fDOM$site.ID, levels = c('FRCH','MOOS','POKE','STRT','VAUL', 'CARI'))
HI_FI_fDOM.p =
ggplot(HI_FI_fDOM, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+
geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+theme_bw() +
ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
ggtitle("b) fDOM")+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20))
HI_FI_fDOM.p
# SPC #
HI_FI_SPC = subset(HI_FI, response_var == "SPC")
HI_FI_SPC$site.ID <- factor(HI_FI_SPC$site.ID, levels = c('FRCH','MOOS','POKE','STRT','VAUL', 'CARI'))
HI_FI_SPC.p =
ggplot(HI_FI_SPC, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+
geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+theme_bw() +
ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
ggtitle("c) SPC")+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20))
HI_FI_SPC.p
# turb #
HI_FI_turb = subset(HI_FI, response_var == "turb")
HI_FI_turb$site.ID <- factor(HI_FI_turb$site.ID, levels = c('FRCH','MOOS','POKE','STRT','VAUL', 'CARI'))
HI_FI_turb.p =
ggplot(HI_FI_turb, aes(Flush_index, Hyst_index)) + geom_point(aes(colour=factor(site.ID), shape = pf), size = 4)+
geom_errorbar(aes(ymin=HI_ymin, ymax=HI_ymax), colour="black", alpha=0.5, size=.5, width = 0.1)+
geom_hline(yintercept = 0) + geom_vline(xintercept = 0)+
geom_errorbarh(aes(xmin=FI_ymin, xmax=FI_ymax), colour="black", alpha=0.5, size=.5, height = 0.1) +
scale_color_manual(values = c("orange red", viridis::viridis(6)), "Catchment")+theme_bw() +
ylim(-1.5, 1.5) + xlim(-1.5, 1.5)+
ggtitle("d) Turb")+
theme(panel.border = element_blank(), panel.grid.major = element_blank(),panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"), text = element_text(size = 20))
HI_
ggplot(HI_FI_NO3, aes(Flush_index, beta)) + geom_point(aes(colour=factor(site.ID)), size = 4) +
ylim(-1.5, 1.5) + xlim(-1.5, 1.5) +
geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) +
stat_poly_eq(formula = y~x,
label.y = "top", label.x = "right",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
ggplot(HI_FI_fDOM, aes(Flush_index, beta)) + geom_point(aes(colour=factor(site.ID)), size = 4) +
ylim(-1.5, 1.5) + xlim(-1.5, 1.5) +
geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) +
stat_poly_eq(formula = y~x,
label.y = "top", label.x = "right",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
ggplot(HI_FI_SPC, aes(Flush_index, beta)) + geom_point(aes(colour=factor(site.ID)), size = 4) +
ylim(-1.5, 1.5) + xlim(-1.5, 1.5) +
geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) +
stat_poly_eq(formula = y~x,
label.y = "top", label.x = "right",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
ggplot(HI_FI_turb, aes(Flush_index, beta)) + geom_point(aes(colour=factor(site.ID)), size = 4) +
ylim(-1.5, 1.5) + xlim(-1.5, 1.5) +
geom_smooth(method = "lm", na.rm = TRUE, fullrange = TRUE, aes(group = 1)) +
stat_poly_eq(formula = y~x,
label.y = "top", label.x = "right",
aes(label = paste(..eq.label.., ..rr.label.., sep = "~~~")),
parse = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(lubridate)
library(data.table)
library(ggplot2)
library(scales)
library(lme4)
library(nlme)
library(datasets)
# Read in data #
antecedent_HI_FI_1_0 <- read_csv("~/Documents/Storms/Output_from_analysis/06_HI_fire_permafrost_script/antecedent_HI_FI_1.0.csv")
# scaling data #
#scaling #
antecedent_HI_FI_1_0[c(20:22, 25,30)] <- lapply(antecedent_HI_FI_1_0[c(20:22, 25,30)], function(x) c(scale(x)))
pairs(antecedent_HI_FI_1_0[c(20:22, 25,30)])
my_data <- antecedent_HI_FI_1_0[, c(20:22, 25,30)]
my_data <- na.omit(my_data)
cor(my_data)
f1 <- formula(Hyst_index ~ precip + precip.week + Intensity + TimeSinceChena +
1|site.ID)
M0 <- lmer(f1, data = antecedent_HI_FI_1_0)
plot(M0)
plot(M0, 3)
f1 <- formula(log(Hyst_index +1) ~ precip + precip.week + Intensity + TimeSinceChena +
1|site.ID)
M0 <- lmer(f1, data = antecedent_HI_FI_1_0)
plot(M0)
plot(M0, 3)
qqnorm(resid(M0))
f1 <- formula(Hyst_index ~ precip + precip.week + Intensity + TimeSinceChena +
1|site.ID)
M0 <- lmer(f1, data = antecedent_HI_FI_1_0)
summary(M0)
f1 <- formula(Hyst_index ~ precip + precip.week + Intensity + TimeSinceChena +
(1|site.ID))
M0 <- lmer(f1, data = antecedent_HI_FI_1_0)
summary(M0)
names(antecedent_HI_FI_1_0)
# scaling data #
#scaling #
antecedent_HI_FI_1_0[c(20:23, 25,30)] <- lapply(antecedent_HI_FI_1_0[c(20:22, 25,30)], function(x) c(scale(x)))
# scaling data #
#scaling #
antecedent_HI_FI_1_0[c(20:23, 25,30)] <- lapply(antecedent_HI_FI_1_0[c(20:23, 25,30)], function(x) c(scale(x)))
pairs(antecedent_HI_FI_1_0[c(20:22, 25,30)])
pairs(antecedent_HI_FI_1_0[c(20:23, 25,30)])
my_data <- antecedent_HI_FI_1_0[, c(20:23, 25,30)]
my_data <- na.omit(my_data)
cor(my_data)
pairs(antecedent_HI_FI_1_0[c(3,20:23, 25,30)])
my_data <- antecedent_HI_FI_1_0[, c(3,20:23, 25,30)]
my_data <- na.omit(my_data)
cor(my_data)
View(antecedent_HI_FI_1_0)
FRCH_chem_2018 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2018.csv")
FRCH_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2019.csv")
FRCH_chem_2020 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2020.csv")
FRCH_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2021.csv")
View(FRCH_chem_2018)
FRCH_chem_2018 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2018.csv",
col_types = cols(fDOM.QSU = col_double(),
nitrateuM = col_double(), SpCond.uScm = col_double(),
Turbidity.FNU = col_double()))FRCH_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2019.csv"))
FRCH_chem_2018 <- read_csv("~/Documents/StormsQ_Chem/FRCH/FRCH_chem_2018.csv",
col_types = cols(fDOM.QSU = col_double(),
nitrateuM = col_double(), SpCond.uScm = col_double(),
Turbidity.FNU = col_double()))
FRCH_chem_2018 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2018.csv",
col_types = cols(fDOM.QSU = col_double(),
nitrateuM = col_double(), SpCond.uScm = col_double(),
Turbidity.FNU = col_double()))
FRCH_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2019.csv",
col_types = cols(fDOM.QSU = col_double(),
nitrateuM = col_double(), SpCond.uScm = col_double(),
Turbidity.FNU = col_double()))
FRCH_chem_2020 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2020.csv",
col_types = cols(fDOM.QSU = col_double(),
nitrateuM = col_double(), SpCond.uScm = col_double(),
Turbidity.FNU = col_double()))
FRCH_chem_2018 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2018.csv",
col_types = cols(fDOM.QSU = col_double(),
nitrateuM = col_double(), SpCond.uScm = col_double(),
Turbidity.FNU = col_double()))
FRCH_chem_2019 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2019.csv",
col_types = cols(fDOM.QSU.mn = col_double(),
nitrateuM = col_double(), SpCond.uScm.mn = col_double(),
Turbidity.FNU.mn = col_double()))
FRCH_chem_2020 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2020.csv",
col_types = cols(fDOM.QSU = col_double(),
nitrateuM = col_double(), SpCond.µS.cm = col_double(),
Turbidity.FNU = col_double()))
FRCH_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2021.csv",
col_types = cols(fDOM.QSU = col_double(),
nitrateuM = col_double(), SpCond.uScm = col_double(),
Turbidity.FNU = col_double()))
rm(FRCH_chem_2021)
FRCH_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2021.csv",
col_types = cols(fDOM.QSU = col_double(),
nitrateuM = col_double(), SpCond.uScm = col_double(),
Turbidity.FNU = col_double()))
View(FRCH_chem_2021)
FRCH_chem_2021 <- read_csv("~/Documents/Storms/Q_Chem/FRCH/FRCH_chem_2021.csv",
col_types = cols(MeanDischarge = col_double()))
### add in air temp ###
### from CPCRW CRREL Main Met Station ###
airtemp = read.csv("~/Documents/Storms/Ancilliary_data/CRREL_airtemp.csv", header = T)
airtemp$date_timeAK = as.POSIXct(airtemp$Time, "%m/%d/%y %H:%M", tz="America/Anchorage")
View(airtemp)
### add in air temp ###
### from CPCRW CRREL Main Met Station ###
airtemp = read.csv("~/Documents/Storms/Ancilliary_data/CRREL_airtemp.csv", skip = 5)
airtemp$date_timeAK = as.POSIXct(airtemp$Time, "%m/%d/%y %H:%M", tz="America/Anchorage")
class(airtemp$date_timeAK)
tz(airtemp$date_timeAK)
airtemp$airtemp_100.1200cm_mean = (airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_100cm.CRREL..C.+ airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_300cm.CRREL..C.+ airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1000cm.CRREL..C.+ airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1200cm.CRREL..C.)/4
airtemp = subset(airtemp, select=c("date_timeAK", "airtemp_100.1200cm_mean"))
### 15-min air temp needed to get daily min and max ###
## from CPCRW CRREL Main Met Station ##
airtemp = read.csv("~/Documents/Storms/Ancilliary_data/CRREL_airtemp.csv", header = T)
airtemp$date_timeAK = as.POSIXct(airtemp$Time, "%m/%d/%y %H:%M", tz="America/Anchorage")
### 15-min air temp needed to get daily min and max ###
## from CPCRW CRREL Main Met Station ##
airtemp = read.csv("~/Documents/Storms/Ancilliary_data/CRREL_airtemp.csv", skip = 5)
airtemp$date_timeAK = as.POSIXct(airtemp$Time, "%m/%d/%y %H:%M", tz="America/Anchorage")
class(airtemp$date_timeAK)
tz(airtemp$date_timeAK)
# min temp at 1200 is missing, so i'm going to exclude this height in mean and max temp avgs
airtemp$airtemp_100.1000cm_mean = (
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_100cm.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_300cm.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1000cm.CRREL..C.)/3
airtemp$airtemp_100.1000cm_max = (
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_100cm_MAX.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_300cm_MAX.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1000cm_MAX.CRREL..C.)/3
### 15-min air temp needed to get daily min and max ###
## from CPCRW CRREL Main Met Station ##
airtemp = read.csv("~/Documents/Storms/Ancilliary_data/CRREL_airtemp.csv", skip = 5)
airtemp$date_timeAK = as.POSIXct(airtemp$Time, "%m/%d/%y %H:%M", tz="America/Anchorage")
class(airtemp$date_timeAK)
tz(airtemp$date_timeAK)
# min temp at 1200 is missing, so i'm going to exclude this height in mean and max temp avgs
airtemp$airtemp_100.1000cm_mean = (
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_100cm.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_300cm.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1000cm.CRREL..C. +
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1200cm.CRREL..C.)/4
airtemp = read.csv("~/Documents/Storms/Ancilliary_data/CRREL_airtemp.csv", skip = 5)
airtemp$date_timeAK = as.POSIXct(airtemp$Time, "%m/%d/%y %H:%M", tz="America/Anchorage")
class(airtemp$date_timeAK)
tz(airtemp$date_timeAK)
# min temp at 1200 is missing, so i'm going to exclude this height in mean and max temp avgs
airtemp$airtemp_100.1200cm_mean = (
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_100cm.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_300cm.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1000cm.CRREL..C. +
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1200cm.CRREL..C.)/4
airtemp$airtemp_100.1200cm_max = (
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_100cm_MAX.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_300cm_MAX.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1000cm_MAX.CRREL..C. +
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1200cm_MAX.CRREL..C.)/4
airtemp$airtemp_100.1200cm_min = (
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_100cm_MIN.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_300cm_MIN.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1000cm_MIN.CRREL..C.+
airtemp$CPCRW.CRREL.Main.Met.Station..AirTemp_1200cm_MIN.CRREL..C.)/4
plot(airtemp$airtemp_100.1200cm_mean ~ airtemp$date_timeAK, type="l")
lines(airtemp$airtemp_100.1200cm_max ~ airtemp$date_timeAK, type="l", col="red")
lines(airtemp$airtemp_100.1200cm_min ~ airtemp$date_timeAK, type="l", col="blue")
airtemp = subset(airtemp, select=c("date_timeAK", "airtemp_100.1200cm_mean", "airtemp_100.1200cm_max", "airtemp_100.1200cm_min"))
range(airtemp$date_timeAK)
airtemp2 = read.csv("~/Documents/Storms/Ancilliary_data/Caribou_airtemp.csv", skip=5)
airtemp2$date_timeAK = as.POSIXct(airtemp2$Time, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
class(airtemp2$date_timeAK)
tz(airtemp2$date_timeAK)
airtemp2$airtemp2_100.1000cm_mean = (
airtemp2$CPCRW.Caribou.Peak..AirTemp_100cm.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_200cm.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_1000cm.CPEAK..C.)/3
airtemp2$airtemp2_100.1000cm_max = (
airtemp2$CPCRW.Caribou.Peak..AirTemp_100cm_MAX.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_200cm_MAX.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_1000cm_MAX.CPEAK..C.)/3
airtemp2$airtemp2_100.1000cm_min = (
airtemp2$CPCRW.Caribou.Peak..AirTemp_100cm_MIN.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_200cm_MIN.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_1000cm_MIN.CPEAK..C.)/3
plot(airtemp2$airtemp2_100.1000cm_mean ~ airtemp2$date_timeAK, type="l")
View(airtemp2)
rm(airtemp2)
### CPCRW ###
airtemp2 = read.csv("~/Documents/Storms/Ancilliary_data/Caribou_airtemp.csv", skip=5)
airtemp2$date_timeAK = as.POSIXct(airtemp2$Time, "%Y-%m-%d %H:%M:%S", tz="America/Anchorage")
airtemp2$date_timeAK = as.POSIXct(airtemp2$Time, "%m/%d/%y %H:%M", tz="America/Anchorage")
class(airtemp2$date_timeAK)
tz(airtemp2$date_timeAK)
airtemp2$airtemp2_100.1000cm_mean = (
airtemp2$CPCRW.Caribou.Peak..AirTemp_100cm.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_200cm.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_1000cm.CPEAK..C.)/3
airtemp2$airtemp2_100.1000cm_max = (
airtemp2$CPCRW.Caribou.Peak..AirTemp_100cm_MAX.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_200cm_MAX.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_1000cm_MAX.CPEAK..C.)/3
airtemp2$airtemp2_100.1000cm_min = (
airtemp2$CPCRW.Caribou.Peak..AirTemp_100cm_MIN.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_200cm_MIN.CPEAK..C.+
airtemp2$CPCRW.Caribou.Peak..AirTemp_1000cm_MIN.CPEAK..C.)/3
plot(airtemp2$airtemp2_100.1000cm_mean ~ airtemp2$date_timeAK, type="l")
lines(airtemp2$airtemp2_100.1000cm_max ~ airtemp2$date_timeAK, type="l", col="red")
lines(airtemp2$airtemp2_100.1000cm_min ~ airtemp2$date_timeAK, type="l", col="blue")
airtemp2 = subset(airtemp2, select=c("date_timeAK", "airtemp2_100.1000cm_mean", "airtemp2_100.1000cm_max", "airtemp2_100.1000cm_min"))
range(airtemp2$date_timeAK)
# join data from two met staions
time <- data.frame(
date_timeAK = seq.POSIXt(
from = ISOdatetime(2018,05,01,0,0,0, tz = "America/Anchorage"),
to = ISOdatetime(2021,10,31,23,0,0, tz= "America/Anchorage"),
by = "1 hours" ))
View(time)
airtempall = left_join(time, airtemp, by="date_timeAK")
airtempall = left_join(airtempall, airtemp2, by="date_timeAK")
View(airtempall)
# average temps from two met stations
airtempmean = data.frame(date_timeAK = airtempall$date_timeAK,
airtemp_100.1000cm_mean = rowMeans(
airtempall[c("airtemp_100.1200cm_mean",
"airtemp2_100.1000cm_mean")]),
airtemp_100.1000cm_max = rowMeans(
airtempall[c("airtemp_100.1200cm_max",
"airtemp2_100.1000cm_max")]),
airtemp_100.1000cm_min = rowMeans(
airtempall[c("airtemp_100.1200cm_min",
"airtemp2_100.1000cm_min")]))
View(airtempmean)
# get daily
airtempmean$day = format(as.POSIXct(airtempmean$date_timeAK,format="%Y-%m-%d %H:%M:%S"),format="%Y-%m-%d")
airtempmean$day = as.POSIXct(airtempmean$day, "%Y-%m-%d", tz="America/Anchorage")
airtempmean.daily =
airtempmean %>%
select(day, airtemp_100.1000cm_mean, airtemp_100.1000cm_max, airtemp_100.1000cm_min) %>%
group_by(day) %>%
summarize_all(funs(mean, max, min), na.rm = TRUE)
plot(airtempmean.daily$airtemp_100.1000cm_mean_mean ~ airtempmean.daily$day, type="o", ylim=c(-10,40))
lines(airtempmean.daily$airtemp_100.1000cm_max_max ~ airtempmean.daily$day, type="o", col="red")
lines(airtempmean.daily$airtemp_100.1000cm_min_min ~ airtempmean.daily$day, type="o", col="blue")
### calc GDD ###
#remotes::install_github("karawoo/cbccy")
library(cbccy)
### calc GDD ###
install.packages("remotes")
install.packages("remotes")
remotes::install_github("karawoo/cbccy")
plot(airtempmean.daily$airtemp_100.1000cm_mean_mean ~ airtempmean.daily$day, type="o", ylim=c(-20,40))
lines(airtempmean.daily$airtemp_100.1000cm_max_max ~ airtempmean.daily$day, type="o", col="red")
lines(airtempmean.daily$airtemp_100.1000cm_min_min ~ airtempmean.daily$day, type="o", col="blue")
#remotes::install_github("karawoo/cbccy")
library(cbccy)
### calc GDD ###
install.packages("remotes")
#remotes::install_github("karawoo/cbccy")
install.packages("cbccy")
### calc GDD ###
install.packages("remotes")
install.packages("remotes")
library(cbccy)
#remotes::install_github("karawoo/cbccy")
install.packages("cbccy")
remotes::install_github("bocinsky/gutaker2020_rice_niche")
library(cbccy)
installed.packages("cbccy")
install.packages("cbccy")
remotes::install_github("karawoo/cbccy")
